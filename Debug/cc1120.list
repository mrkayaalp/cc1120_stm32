
cc1120.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008acc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008c90  08008c90  00009c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cac  08008cac  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008cac  08008cac  00009cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb4  08008cb4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb4  08008cb4  00009cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cb8  08008cb8  00009cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008cbc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  2000007c  08008d38  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  08008d38  0000aa90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9fb  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a3b  00000000  00000000  00028aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f7  00000000  00000000  0002ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026046  00000000  00000000  0003005f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b2b  00000000  00000000  000560a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db1fb  00000000  00000000  00077bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152dcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d0  00000000  00000000  00152e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001597e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008c78 	.word	0x08008c78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	08008c78 	.word	0x08008c78

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <majorTomHere>:
static void setAmpDirection(cc1120_devTypeDef* cc1120_dev);


/*---------------------Public Functions------------------------*/

void majorTomHere(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  // Major Tom to Ground Control
  HAL_GPIO_TogglePin(USERLED_GPIO_Port, USERLED_Pin);
 80004f8:	2110      	movs	r1, #16
 80004fa:	4806      	ldr	r0, [pc, #24]	@ (8000514 <majorTomHere+0x20>)
 80004fc:	f001 f929 	bl	8001752 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(USERLED2_GPIO_Port, USERLED2_Pin);
 8000500:	2108      	movs	r1, #8
 8000502:	4804      	ldr	r0, [pc, #16]	@ (8000514 <majorTomHere+0x20>)
 8000504:	f001 f925 	bl	8001752 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800050c:	f000 fe6e 	bl	80011ec <HAL_Delay>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020400 	.word	0x40020400

08000518 <rfRunRx>:
/*-------------------------------RX--------------------------*/

/*!
* @brief This API sets the CC1120 radio for RX mode.
*/
RfChipStatus_t rfRunRx() {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  RfChipStatus_t chipstatus;
  // Strobe RX to receive packet
  chipstatus = trxSpiCmdStrobe(CC112X_SRX);
 800051e:	2034      	movs	r0, #52	@ 0x34
 8000520:	f000 f9f4 	bl	800090c <trxSpiCmdStrobe>
 8000524:	4603      	mov	r3, r0
 8000526:	71fb      	strb	r3, [r7, #7]
  return chipstatus;
 8000528:	79fb      	ldrb	r3, [r7, #7]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <rfRecieveRxPacket>:

/*!
* @brief This API recieve the  RX buffer.
*/
RfChipStatus_t rfRecieveRxPacket() {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  RfChipStatus_t chipstatus;
  chipstatus = cc112xSpiReadReg(CC112X_NUM_RXBYTES, &rxBytes, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	491c      	ldr	r1, [pc, #112]	@ (80005b0 <rfRecieveRxPacket+0x7c>)
 800053e:	f642 70d7 	movw	r0, #12247	@ 0x2fd7
 8000542:	f000 f86d 	bl	8000620 <cc112xSpiReadReg>
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]

  // Check that we have bytes in FIFO
  if (rxBytes != 0) {
 800054a:	4b19      	ldr	r3, [pc, #100]	@ (80005b0 <rfRecieveRxPacket+0x7c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d029      	beq.n	80005a6 <rfRecieveRxPacket+0x72>

    // Read MARCSTATE to check for RX FIFO error
    chipstatus = cc112xSpiReadReg(CC1120_MARCSTATE, &marcState, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	4917      	ldr	r1, [pc, #92]	@ (80005b4 <rfRecieveRxPacket+0x80>)
 8000556:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800055a:	f000 f861 	bl	8000620 <cc112xSpiReadReg>
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]

    // Mask out MARCSTATE bits and check if we have a RX FIFO error
    if ((marcState & 0x1F) == RX_FIFO_ERROR) {
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <rfRecieveRxPacket+0x80>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	f003 031f 	and.w	r3, r3, #31
 800056a:	2b11      	cmp	r3, #17
 800056c:	d105      	bne.n	800057a <rfRecieveRxPacket+0x46>

      // Flush RX FIFO
      chipstatus = trxSpiCmdStrobe(CC112X_SFRX);
 800056e:	203a      	movs	r0, #58	@ 0x3a
 8000570:	f000 f9cc 	bl	800090c <trxSpiCmdStrobe>
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	e015      	b.n	80005a6 <rfRecieveRxPacket+0x72>
    }
    else {

      // Read n bytes from RX FIFO
      chipstatus = cc112xSpiReadRxFifo(rxBuffer, rxBytes);
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <rfRecieveRxPacket+0x7c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4619      	mov	r1, r3
 8000580:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <rfRecieveRxPacket+0x84>)
 8000582:	f000 f882 	bl	800068a <cc112xSpiReadRxFifo>
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]

      // Check CRC ok (CRC_OK: bit7 in second status byte)
      // This assumes status bytes are appended in RX_FIFO
      // (PKT_CFG1.APPEND_STATUS = 1)
      // If CRC is disabled the CRC_OK field will read 1
      if (rxBuffer[rxBytes - 1] & 0x80) {
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <rfRecieveRxPacket+0x7c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3b01      	subs	r3, #1
 8000590:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <rfRecieveRxPacket+0x84>)
 8000592:	5cd3      	ldrb	r3, [r2, r3]
 8000594:	b25b      	sxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	da05      	bge.n	80005a6 <rfRecieveRxPacket+0x72>

        // Update packet counter
        rxPacketCounter++;
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <rfRecieveRxPacket+0x88>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <rfRecieveRxPacket+0x88>)
 80005a4:	801a      	strh	r2, [r3, #0]
      }
    }
  }
  return chipstatus;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000011c 	.word	0x2000011c
 80005b4:	2000011d 	.word	0x2000011d
 80005b8:	2000009c 	.word	0x2000009c
 80005bc:	20000098 	.word	0x20000098

080005c0 <cc1120SpiTRx>:

/*!
 * @brief spi communication func. for CC1120
 */
RfSerialStatus_t cc1120SpiTRx(uint8_t *txbuffer, uint8_t *rxbuffer)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  RfSerialStatus_t status = RF_SERIAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]


      status = HAL_SPI_TransmitReceive(&hspi1, txbuffer, rxbuffer, 1, 250);
 80005ce:	23fa      	movs	r3, #250	@ 0xfa
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4804      	ldr	r0, [pc, #16]	@ (80005ec <cc1120SpiTRx+0x2c>)
 80005da:	f003 ff82 	bl	80044e2 <HAL_SPI_TransmitReceive>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]


  return status;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000017c 	.word	0x2000017c

080005f0 <cc1120_startTransaction>:

/*!
 * @brief Sets CS High
 */
void cc1120_startTransaction()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CC1120_CS_GPIO_Port, CC1120_CS_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4802      	ldr	r0, [pc, #8]	@ (8000604 <cc1120_startTransaction+0x14>)
 80005fa:	f001 f891 	bl	8001720 <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000

08000608 <cc1120_endTransaction>:

/*!
 * @brief Sets CS Low
 */
void cc1120_endTransaction()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CC1120_CS_GPIO_Port, CC1120_CS_Pin, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <cc1120_endTransaction+0x14>)
 8000612:	f001 f885 	bl	8001720 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000

08000620 <cc112xSpiReadReg>:
 * output parameters
 *
 * @return      RfChipStatus_t
 */
RfChipStatus_t cc112xSpiReadReg(uint16 addr, uint8 *pData, uint8 len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	80fb      	strh	r3, [r7, #6]
 800062c:	4613      	mov	r3, r2
 800062e:	717b      	strb	r3, [r7, #5]
  uint8 tempExt = (uint8)(addr >> 8);
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	0a1b      	lsrs	r3, r3, #8
 8000634:	b29b      	uxth	r3, r3
 8000636:	73bb      	strb	r3, [r7, #14]
  uint8 tempAddr = (uint8)(addr & 0x00FF);
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	737b      	strb	r3, [r7, #13]
  RfChipStatus_t chipstatus;

  /* Checking if this is a FIFO access -> returns chip not ready  */
  if ((CC112X_SINGLE_TXFIFO <= tempAddr) && (tempExt == 0))
 800063c:	7b7b      	ldrb	r3, [r7, #13]
 800063e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000640:	d904      	bls.n	800064c <cc112xSpiReadReg+0x2c>
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <cc112xSpiReadReg+0x2c>
    return STATUS_CHIP_RDYn_BM;
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	e01a      	b.n	8000682 <cc112xSpiReadReg+0x62>

  /* Decide what register space is accessed */
  if (!tempExt)
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d109      	bne.n	8000666 <cc112xSpiReadReg+0x46>
  {
    chipstatus = trx8BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempAddr, pData, len);
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	b29b      	uxth	r3, r3
 8000656:	7b79      	ldrb	r1, [r7, #13]
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	20c0      	movs	r0, #192	@ 0xc0
 800065c:	f000 f8d6 	bl	800080c <trx8BitRegAccess>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e00c      	b.n	8000680 <cc112xSpiReadReg+0x60>
  }
  else if (tempExt == 0x2F) // extended register space command
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	2b2f      	cmp	r3, #47	@ 0x2f
 800066a:	d109      	bne.n	8000680 <cc112xSpiReadReg+0x60>
  {
    chipstatus = trx16BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempExt, tempAddr, pData, len);
 800066c:	7b7a      	ldrb	r2, [r7, #13]
 800066e:	7bb9      	ldrb	r1, [r7, #14]
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	20c0      	movs	r0, #192	@ 0xc0
 8000678:	f000 f900 	bl	800087c <trx16BitRegAccess>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]
  }
  return (chipstatus);
 8000680:	7bfb      	ldrb	r3, [r7, #15]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <cc112xSpiReadRxFifo>:
 * output parameters
 *
 * @return      RfChipStatus_t
 */
RfChipStatus_t cc112xSpiReadRxFifo(uint8 *pData, uint8 len)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	460b      	mov	r3, r1
 8000694:	70fb      	strb	r3, [r7, #3]
  RfChipStatus_t chipstatus;
  chipstatus = trx8BitRegAccess(0x00, CC112X_BURST_RXFIFO, pData, len);
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	b29b      	uxth	r3, r3
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	21ff      	movs	r1, #255	@ 0xff
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f8b4 	bl	800080c <trx8BitRegAccess>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
  return (chipstatus);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b4b      	ldr	r3, [pc, #300]	@ (80007fc <MX_GPIO_Init+0x148>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a4a      	ldr	r2, [pc, #296]	@ (80007fc <MX_GPIO_Init+0x148>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b48      	ldr	r3, [pc, #288]	@ (80007fc <MX_GPIO_Init+0x148>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <MX_GPIO_Init+0x148>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a43      	ldr	r2, [pc, #268]	@ (80007fc <MX_GPIO_Init+0x148>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <MX_GPIO_Init+0x148>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <MX_GPIO_Init+0x148>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a3c      	ldr	r2, [pc, #240]	@ (80007fc <MX_GPIO_Init+0x148>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b3a      	ldr	r3, [pc, #232]	@ (80007fc <MX_GPIO_Init+0x148>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <MX_GPIO_Init+0x148>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a35      	ldr	r2, [pc, #212]	@ (80007fc <MX_GPIO_Init+0x148>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b33      	ldr	r3, [pc, #204]	@ (80007fc <MX_GPIO_Init+0x148>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2110      	movs	r1, #16
 800073e:	4830      	ldr	r0, [pc, #192]	@ (8000800 <MX_GPIO_Init+0x14c>)
 8000740:	f000 ffee 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HGM_CC1190_Pin|LNA_EN_CC1190_Pin|USERLED2_Pin|USERLED_Pin
 8000744:	2200      	movs	r2, #0
 8000746:	f24c 0138 	movw	r1, #49208	@ 0xc038
 800074a:	482e      	ldr	r0, [pc, #184]	@ (8000804 <MX_GPIO_Init+0x150>)
 800074c:	f000 ffe8 	bl	8001720 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA_EN_CC11190_GPIO_Port, PA_EN_CC11190_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2140      	movs	r1, #64	@ 0x40
 8000754:	482c      	ldr	r0, [pc, #176]	@ (8000808 <MX_GPIO_Init+0x154>)
 8000756:	f000 ffe3 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800075a:	2310      	movs	r3, #16
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4823      	ldr	r0, [pc, #140]	@ (8000800 <MX_GPIO_Init+0x14c>)
 8000772:	f000 fe41 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HGM_CC1190_Pin|LNA_EN_CC1190_Pin|USERLED2_Pin|USERLED_Pin
 8000776:	f24c 0338 	movw	r3, #49208	@ 0xc038
 800077a:	617b      	str	r3, [r7, #20]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	481d      	ldr	r0, [pc, #116]	@ (8000804 <MX_GPIO_Init+0x150>)
 8000790:	f000 fe32 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA_EN_CC11190_Pin;
 8000794:	2340      	movs	r3, #64	@ 0x40
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PA_EN_CC11190_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <MX_GPIO_Init+0x154>)
 80007ac:	f000 fe24 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO3_CC1120_Pin;
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO3_CC1120_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4811      	ldr	r0, [pc, #68]	@ (8000808 <MX_GPIO_Init+0x154>)
 80007c4:	f000 fe18 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO2_CC1120_EXTI_Pin|GPIO0_CC1120_EXTI_Pin;
 80007c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	480a      	ldr	r0, [pc, #40]	@ (8000808 <MX_GPIO_Init+0x154>)
 80007e0:	f000 fe0a 	bl	80013f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2017      	movs	r0, #23
 80007ea:	f000 fddb 	bl	80013a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ee:	2017      	movs	r0, #23
 80007f0:	f000 fdf4 	bl	80013dc <HAL_NVIC_EnableIRQ>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800

0800080c <trx8BitRegAccess>:
  * output parameters
  *
  * @return      chip status
  */
RfChipStatus_t trx8BitRegAccess(uint8 accessType, uint8 addrByte, uint8* pData, uint16 len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	603a      	str	r2, [r7, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	460b      	mov	r3, r1
 800081c:	71bb      	strb	r3, [r7, #6]
 800081e:	4613      	mov	r3, r2
 8000820:	80bb      	strh	r3, [r7, #4]
  RfChipStatus_t chipstatus;
  RfSerialStatus_t serailstatus;
  uint8_t txbuffer = accessType | addrByte;
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	4313      	orrs	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	737b      	strb	r3, [r7, #13]

  /* Pull CS_N low and wait for SO to go low before communication starts */

  cc1120_startTransaction();
 800082c:	f7ff fee0 	bl	80005f0 <cc1120_startTransaction>
  /*TRXEM_SPI_TX(accessType|addrByte);
  TRXEM_SPI_WAIT_DONE();
  */


  serailstatus = cc1120SpiTRx(&txbuffer, &chipstatus); //rx will be chip status
 8000830:	f107 020e 	add.w	r2, r7, #14
 8000834:	f107 030d 	add.w	r3, r7, #13
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fec0 	bl	80005c0 <cc1120SpiTRx>
 8000840:	4603      	mov	r3, r0
 8000842:	73fb      	strb	r3, [r7, #15]
  while (hspi1.State != HAL_SPI_STATE_READY);
 8000844:	bf00      	nop
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <trx8BitRegAccess+0x6c>)
 8000848:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b01      	cmp	r3, #1
 8000850:	d1f9      	bne.n	8000846 <trx8BitRegAccess+0x3a>

  /* Storing chip status */
  serailstatus = trxReadWriteBurstSingle(accessType | addrByte, pData, len);
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	4313      	orrs	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	88ba      	ldrh	r2, [r7, #4]
 800085c:	6839      	ldr	r1, [r7, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f87e 	bl	8000960 <trxReadWriteBurstSingle>
 8000864:	4603      	mov	r3, r0
 8000866:	73fb      	strb	r3, [r7, #15]
  cc1120_endTransaction();
 8000868:	f7ff fece 	bl	8000608 <cc1120_endTransaction>
  /* return the status byte value */
  return(chipstatus);
 800086c:	7bbb      	ldrb	r3, [r7, #14]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000017c 	.word	0x2000017c

0800087c <trx16BitRegAccess>:
 * output parameters
 *
 * @return      RfChipStatus_t
 */
RfChipStatus_t trx16BitRegAccess(uint8 accessType, uint8 extAddr, uint8 regAddr, uint8* pData, uint8 len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	460b      	mov	r3, r1
 800088a:	71bb      	strb	r3, [r7, #6]
 800088c:	4613      	mov	r3, r2
 800088e:	717b      	strb	r3, [r7, #5]
  RfChipStatus_t chipstatus;
  RfSerialStatus_t serailstatus;
  uint8_t rxbuffer;
  uint8_t txbuffer = accessType | extAddr;
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	4313      	orrs	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	733b      	strb	r3, [r7, #12]

  cc1120_startTransaction();
 800089a:	f7ff fea9 	bl	80005f0 <cc1120_startTransaction>
  //TRXEM_SPI_BEGIN();
  //while(TRXEM_PORT_IN & TRXEM_SPI_MISO_PIN);

  /* send extended address byte with access type bits set */
  serailstatus = cc1120SpiTRx(&txbuffer, &chipstatus); //rxbuffer will be chip status
 800089e:	f107 020e 	add.w	r2, r7, #14
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe89 	bl	80005c0 <cc1120SpiTRx>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
  // extended command
  while (hspi1.State != HAL_SPI_STATE_READY);
 80008b2:	bf00      	nop
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <trx16BitRegAccess+0x8c>)
 80008b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d1f9      	bne.n	80008b4 <trx16BitRegAccess+0x38>
  /* Storing chip status */
  //readValue = TRXEM_SPI_RX();
  //TRXEM_SPI_TX(regAddr);
  //TRXEM_SPI_WAIT_DONE();
  serailstatus = cc1120SpiTRx(&regAddr, &rxbuffer);
 80008c0:	f107 020d 	add.w	r2, r7, #13
 80008c4:	1d7b      	adds	r3, r7, #5
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe79 	bl	80005c0 <cc1120SpiTRx>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73fb      	strb	r3, [r7, #15]
  while (hspi1.State != HAL_SPI_STATE_READY);
 80008d2:	bf00      	nop
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <trx16BitRegAccess+0x8c>)
 80008d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d1f9      	bne.n	80008d4 <trx16BitRegAccess+0x58>

  /* Communicate len number of bytes */
  serailstatus = trxReadWriteBurstSingle(accessType | extAddr, pData, len);
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	7e3a      	ldrb	r2, [r7, #24]
 80008ea:	b292      	uxth	r2, r2
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f836 	bl	8000960 <trxReadWriteBurstSingle>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
  //TRXEM_SPI_END();
  cc1120_endTransaction();
 80008f8:	f7ff fe86 	bl	8000608 <cc1120_endTransaction>
  /* return the status byte value */
  return(chipstatus);
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000017c 	.word	0x2000017c

0800090c <trxSpiCmdStrobe>:
 * output parameters
 *
 * @return      status byte
 */
RfChipStatus_t trxSpiCmdStrobe(uint8 cmd)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  RfChipStatus_t chipstatus;
  RfSerialStatus_t serailstatus;
  uint8_t txbuffer = cmd;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	737b      	strb	r3, [r7, #13]

  cc1120_startTransaction();
 800091a:	f7ff fe69 	bl	80005f0 <cc1120_startTransaction>
  while (hspi1.State != HAL_SPI_STATE_READY);
 800091e:	bf00      	nop
 8000920:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <trxSpiCmdStrobe+0x50>)
 8000922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b01      	cmp	r3, #1
 800092a:	d1f9      	bne.n	8000920 <trxSpiCmdStrobe+0x14>
  //TRXEM_SPI_BEGIN();
  //while(TRXEM_PORT_IN & TRXEM_SPI_MISO_PIN);
  serailstatus = cc1120SpiTRx(&txbuffer, &chipstatus);
 800092c:	f107 020e 	add.w	r2, r7, #14
 8000930:	f107 030d 	add.w	r3, r7, #13
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe42 	bl	80005c0 <cc1120SpiTRx>
 800093c:	4603      	mov	r3, r0
 800093e:	73fb      	strb	r3, [r7, #15]
  while (hspi1.State != HAL_SPI_STATE_READY);
 8000940:	bf00      	nop
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <trxSpiCmdStrobe+0x50>)
 8000944:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d1f9      	bne.n	8000942 <trxSpiCmdStrobe+0x36>
  //TRXEM_SPI_TX(cmd);
  //TRXEM_SPI_WAIT_DONE();
  //rc = TRXEM_SPI_RX();
  //TRXEM_SPI_END();
  cc1120_endTransaction();
 800094e:	f7ff fe5b 	bl	8000608 <cc1120_endTransaction>

  return(chipstatus);
 8000952:	7bbb      	ldrb	r3, [r7, #14]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000017c 	.word	0x2000017c

08000960 <trxReadWriteBurstSingle>:
 * output parameters
 *
 * @return      RfSerialStatus_t
 */
static RfSerialStatus_t trxReadWriteBurstSingle(uint8 addr, uint8* pData, uint16 len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	80bb      	strh	r3, [r7, #4]
  uint16 i;
  uint8_t buffer = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	733b      	strb	r3, [r7, #12]


  RfSerialStatus_t serailstatus;
  /* Communicate len number of bytes: if RX - the procedure sends 0x00 to push bytes from slave*/
  if (addr & RADIO_READ_ACCESS)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	da2f      	bge.n	80009dc <trxReadWriteBurstSingle+0x7c>
  {
    if (addr & RADIO_BURST_ACCESS)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000982:	2b00      	cmp	r3, #0
 8000984:	d01b      	beq.n	80009be <trxReadWriteBurstSingle+0x5e>
    {
      for (i = 0; i < len; i++)
 8000986:	2300      	movs	r3, #0
 8000988:	81fb      	strh	r3, [r7, #14]
 800098a:	e013      	b.n	80009b4 <trxReadWriteBurstSingle+0x54>
      {
        //TRXEM_SPI_TX(0);            /* Possible to combining read and write as one access type */
        //TRXEM_SPI_WAIT_DONE();
        //*pData = TRXEM_SPI_RX();     /* Store pData from last pData RX */
        serailstatus = cc1120SpiTRx(buffer, pData);
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe15 	bl	80005c0 <cc1120SpiTRx>
 8000996:	4603      	mov	r3, r0
 8000998:	737b      	strb	r3, [r7, #13]
        while (hspi1.State != HAL_SPI_STATE_READY);
 800099a:	bf00      	nop
 800099c:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <trxReadWriteBurstSingle+0xe4>)
 800099e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d1f9      	bne.n	800099c <trxReadWriteBurstSingle+0x3c>
        pData++;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	603b      	str	r3, [r7, #0]
      for (i = 0; i < len; i++)
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	3301      	adds	r3, #1
 80009b2:	81fb      	strh	r3, [r7, #14]
 80009b4:	89fa      	ldrh	r2, [r7, #14]
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3e7      	bcc.n	800098c <trxReadWriteBurstSingle+0x2c>
 80009bc:	e03d      	b.n	8000a3a <trxReadWriteBurstSingle+0xda>
      }
    }
    else
    {
      serailstatus = cc1120SpiTRx(buffer, pData);
 80009be:	7b3b      	ldrb	r3, [r7, #12]
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdfc 	bl	80005c0 <cc1120SpiTRx>
 80009c8:	4603      	mov	r3, r0
 80009ca:	737b      	strb	r3, [r7, #13]
      while (hspi1.State != HAL_SPI_STATE_READY);
 80009cc:	bf00      	nop
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <trxReadWriteBurstSingle+0xe4>)
 80009d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d1f9      	bne.n	80009ce <trxReadWriteBurstSingle+0x6e>
 80009da:	e02e      	b.n	8000a3a <trxReadWriteBurstSingle+0xda>
    }
  }
  else
  {
    if (addr & RADIO_BURST_ACCESS)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d01b      	beq.n	8000a1e <trxReadWriteBurstSingle+0xbe>
    {
      /* Communicate len number of bytes: if TX - the procedure doesn't overwrite pData */
      for (i = 0; i < len; i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	81fb      	strh	r3, [r7, #14]
 80009ea:	e013      	b.n	8000a14 <trxReadWriteBurstSingle+0xb4>
      {
        serailstatus = cc1120SpiTRx(pData, buffer);
 80009ec:	7b3b      	ldrb	r3, [r7, #12]
 80009ee:	4619      	mov	r1, r3
 80009f0:	6838      	ldr	r0, [r7, #0]
 80009f2:	f7ff fde5 	bl	80005c0 <cc1120SpiTRx>
 80009f6:	4603      	mov	r3, r0
 80009f8:	737b      	strb	r3, [r7, #13]
        while (hspi1.State != HAL_SPI_STATE_READY);
 80009fa:	bf00      	nop
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <trxReadWriteBurstSingle+0xe4>)
 80009fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d1f9      	bne.n	80009fc <trxReadWriteBurstSingle+0x9c>
        pData++;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	603b      	str	r3, [r7, #0]
      for (i = 0; i < len; i++)
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	3301      	adds	r3, #1
 8000a12:	81fb      	strh	r3, [r7, #14]
 8000a14:	89fa      	ldrh	r2, [r7, #14]
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d3e7      	bcc.n	80009ec <trxReadWriteBurstSingle+0x8c>
 8000a1c:	e00d      	b.n	8000a3a <trxReadWriteBurstSingle+0xda>
      }
    }
    else
    {
      serailstatus = cc1120SpiTRx(pData, buffer); // txbuffer'ı öylesine koydum buraya
 8000a1e:	7b3b      	ldrb	r3, [r7, #12]
 8000a20:	4619      	mov	r1, r3
 8000a22:	6838      	ldr	r0, [r7, #0]
 8000a24:	f7ff fdcc 	bl	80005c0 <cc1120SpiTRx>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	737b      	strb	r3, [r7, #13]
      while (hspi1.State != HAL_SPI_STATE_READY);
 8000a2c:	bf00      	nop
 8000a2e:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <trxReadWriteBurstSingle+0xe4>)
 8000a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d1f9      	bne.n	8000a2e <trxReadWriteBurstSingle+0xce>
    }
  }
  return serailstatus;
 8000a3a:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000017c 	.word	0x2000017c

08000a48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	@ (8000a9c <MX_I2C1_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a54:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <MX_I2C1_Init+0x58>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a86:	f002 faa1 	bl	8002fcc <HAL_I2C_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 f90e 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000120 	.word	0x20000120
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	000186a0 	.word	0x000186a0

08000aa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	@ (8000b28 <HAL_I2C_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12b      	bne.n	8000b1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae2:	23c0      	movs	r3, #192	@ 0xc0
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae6:	2312      	movs	r3, #18
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af2:	2304      	movs	r3, #4
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <HAL_I2C_MspInit+0x8c>)
 8000afe:	f000 fc7b 	bl	80013f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	@ 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
  //PKT_SYNC_RXTX
  if (GPIO_Pin == GPIO2_CC1120_EXTI_Pin) {
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b44:	d115      	bne.n	8000b72 <HAL_GPIO_EXTI_Callback+0x3e>

    
    if(cc1120_dev->rfmode == RF_MODE_RX){
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x48>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d10c      	bne.n	8000b6c <HAL_GPIO_EXTI_Callback+0x38>
      // Wait for packet received interrupt
      chipstatus = rfRecieveRxPacket();
 8000b52:	f7ff fcef 	bl	8000534 <rfRecieveRxPacket>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b5c:	701a      	strb	r2, [r3, #0]
      chipstatus = rfRunRx();
 8000b5e:	f7ff fcdb 	bl	8000518 <rfRunRx>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b68:	701a      	strb	r2, [r3, #0]
    }
  }
  if (GPIO_Pin == GPIO0_CC1120_EXTI_Pin) {
    //RXFIFO_THR Handler
  }
}
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_EXTI_Callback+0x3e>
      HAL_Delay(2);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f000 fb3d 	bl	80011ec <HAL_Delay>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000174 	.word	0x20000174
 8000b80:	20000178 	.word	0x20000178

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 faee 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f810 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f7ff fd90 	bl	80006b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b94:	f000 f892 	bl	8000cbc <MX_SPI1_Init>
  MX_I2C1_Init();
 8000b98:	f7ff ff56 	bl	8000a48 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b9c:	f000 fa48 	bl	8001030 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000ba0:	f007 fc34 	bl	800840c <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 majorTomHere();
 8000ba4:	f7ff fca6 	bl	80004f4 <majorTomHere>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ba8:	f007 fc56 	bl	8008458 <MX_USB_HOST_Process>
	 majorTomHere();
 8000bac:	bf00      	nop
 8000bae:	e7f9      	b.n	8000ba4 <main+0x20>

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	@ 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2234      	movs	r2, #52	@ 0x34
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f007 ffcc 	bl	8008b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <SystemClock_Config+0xd4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	4a29      	ldr	r2, [pc, #164]	@ (8000c84 <SystemClock_Config+0xd4>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be4:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <SystemClock_Config+0xd4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <SystemClock_Config+0xd8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfc:	4a22      	ldr	r2, [pc, #136]	@ (8000c88 <SystemClock_Config+0xd8>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <SystemClock_Config+0xd8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c24:	230f      	movs	r3, #15
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c28:	2390      	movs	r3, #144	@ 0x90
 8000c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c30:	2305      	movs	r3, #5
 8000c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f929 	bl	8003e94 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c48:	f000 f832 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2302      	movs	r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2103      	movs	r1, #3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 faf2 	bl	8003254 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c76:	f000 f81b 	bl	8000cb0 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	@ 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9e:	f000 fa85 	bl	80011ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40000c00 	.word	0x40000c00

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <Error_Handler+0x8>

08000cbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <MX_SPI1_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d0e:	f003 fb5f 	bl	80043d0 <HAL_SPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d18:	f7ff ffca 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000017c 	.word	0x2000017c
 8000d24:	40013000 	.word	0x40013000

08000d28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	@ (8000dac <HAL_SPI_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12b      	bne.n	8000da2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d82:	23e0      	movs	r3, #224	@ 0xe0
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d9e:	f000 fb2b 	bl	80013f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40013000 	.word	0x40013000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	@ 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <HAL_InitTick+0xe4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_InitTick+0xe4>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <HAL_InitTick+0xe4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fb22 	bl	8003488 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f002 faf3 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8000e52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e56:	f002 faef 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <HAL_InitTick+0xe8>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_InitTick+0xf0>)
 8000e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e7a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e80:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e96:	f003 fd91 	bl	80049bc <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ea8:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000eaa:	f003 fde1 	bl	8004a70 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ebc:	2032      	movs	r0, #50	@ 0x32
 8000ebe:	f000 fa8d 	bl	80013dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d808      	bhi.n	8000eda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2032      	movs	r0, #50	@ 0x32
 8000ece:	f000 fa69 	bl	80013a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_InitTick+0xf4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e002      	b.n	8000ee0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3738      	adds	r7, #56	@ 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	200001d4 	.word	0x200001d4
 8000ef8:	40000c00 	.word	0x40000c00
 8000efc:	20000004 	.word	0x20000004

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO2_CC1120_EXTI_Pin);
 8000f64:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f68:	f000 fc0e 	bl	8001788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO0_CC1120_EXTI_Pin);
 8000f6c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f70:	f000 fc0a 	bl	8001788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <TIM5_IRQHandler+0x10>)
 8000f7e:	f003 fde7 	bl	8004b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001d4 	.word	0x200001d4

08000f8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <OTG_FS_IRQHandler+0x10>)
 8000f92:	f000 fe7b 	bl	8001c8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000644 	.word	0x20000644

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f007 fddc 	bl	8008b8c <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20020000 	.word	0x20020000
 8001000:	00000400 	.word	0x00000400
 8001004:	2000021c 	.word	0x2000021c
 8001008:	20000a90 	.word	0x20000a90

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MX_USART1_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_USART1_UART_Init+0x4c>)
 8001068:	f003 ff56 	bl	8004f18 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f7ff fe1d 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000220 	.word	0x20000220
 8001080:	40011000 	.word	0x40011000

08001084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <HAL_UART_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12c      	bne.n	8001100 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a10      	ldr	r2, [pc, #64]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_UART_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f0:	2307      	movs	r3, #7
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <HAL_UART_MspInit+0x8c>)
 80010fc:	f000 f97c 	bl	80013f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	@ 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40011000 	.word	0x40011000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800114c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111a:	490e      	ldr	r1, [pc, #56]	@ (8001154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800111c:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001130:	4c0b      	ldr	r4, [pc, #44]	@ (8001160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113e:	f7ff ff65 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f007 fd29 	bl	8008b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fd1d 	bl	8000b84 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001158:	08008cbc 	.word	0x08008cbc
  ldr r2, =_sbss
 800115c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001160:	20000a90 	.word	0x20000a90

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_Init+0x40>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_Init+0x40>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_Init+0x40>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f8fc 	bl	800138e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f7ff fe36 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fe0c 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000264 	.word	0x20000264

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000264 	.word	0x20000264

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffee 	bl	80011d4 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffde 	bl	80011d4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	@ (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	@ (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff4c 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b6:	f7ff ff61 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	6978      	ldr	r0, [r7, #20]
 80013c2:	f7ff ffb1 	bl	8001328 <NVIC_EncodePriority>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff80 	bl	80012d4 <__NVIC_SetPriority>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff54 	bl	8001298 <__NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	@ 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e165      	b.n	80016e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8154 	bne.w	80016da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d005      	beq.n	800144a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	2b02      	cmp	r3, #2
 8001448:	d130      	bne.n	80014ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001480:	2201      	movs	r2, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f003 0201 	and.w	r2, r3, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d017      	beq.n	80014e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d123      	bne.n	800153c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80ae 	beq.w	80016da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <HAL_GPIO_Init+0x300>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	4a5c      	ldr	r2, [pc, #368]	@ (80016f8 <HAL_GPIO_Init+0x300>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158c:	6453      	str	r3, [r2, #68]	@ 0x44
 800158e:	4b5a      	ldr	r3, [pc, #360]	@ (80016f8 <HAL_GPIO_Init+0x300>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159a:	4a58      	ldr	r2, [pc, #352]	@ (80016fc <HAL_GPIO_Init+0x304>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001700 <HAL_GPIO_Init+0x308>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x21a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001704 <HAL_GPIO_Init+0x30c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x216>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001708 <HAL_GPIO_Init+0x310>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x212>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4c      	ldr	r2, [pc, #304]	@ (800170c <HAL_GPIO_Init+0x314>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x20e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001710 <HAL_GPIO_Init+0x318>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x20a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001714 <HAL_GPIO_Init+0x31c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x206>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a49      	ldr	r2, [pc, #292]	@ (8001718 <HAL_GPIO_Init+0x320>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x202>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e00c      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00a      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 80015fe:	2305      	movs	r3, #5
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001602:	2304      	movs	r3, #4
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	4935      	ldr	r1, [pc, #212]	@ (80016fc <HAL_GPIO_Init+0x304>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b3a      	ldr	r3, [pc, #232]	@ (800171c <HAL_GPIO_Init+0x324>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a31      	ldr	r2, [pc, #196]	@ (800171c <HAL_GPIO_Init+0x324>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <HAL_GPIO_Init+0x324>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a26      	ldr	r2, [pc, #152]	@ (800171c <HAL_GPIO_Init+0x324>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001686:	4b25      	ldr	r3, [pc, #148]	@ (800171c <HAL_GPIO_Init+0x324>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016aa:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <HAL_GPIO_Init+0x324>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_GPIO_Init+0x324>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d4:	4a11      	ldr	r2, [pc, #68]	@ (800171c <HAL_GPIO_Init+0x324>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f ae96 	bls.w	8001414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3724      	adds	r7, #36	@ 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40013800 	.word	0x40013800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40021400 	.word	0x40021400
 8001718:	40021800 	.word	0x40021800
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	041a      	lsls	r2, r3, #16
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43d9      	mvns	r1, r3
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	400b      	ands	r3, r1
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f9c4 	bl	8000b34 <HAL_GPIO_EXTI_Callback>
  }
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b08f      	sub	sp, #60	@ 0x3c
 80017bc:	af0a      	add	r7, sp, #40	@ 0x28
 80017be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e054      	b.n	8001874 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f006 fe6f 	bl	80084c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 feb9 	bl	8005580 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	687e      	ldr	r6, [r7, #4]
 8001816:	466d      	mov	r5, sp
 8001818:	f106 0410 	add.w	r4, r6, #16
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001828:	e885 0003 	stmia.w	r5, {r0, r1}
 800182c:	1d33      	adds	r3, r6, #4
 800182e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f003 fe33 	bl	800549c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2101      	movs	r1, #1
 800183c:	4618      	mov	r0, r3
 800183e:	f003 feb0 	bl	80055a2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	687e      	ldr	r6, [r7, #4]
 800184a:	466d      	mov	r5, sp
 800184c:	f106 0410 	add.w	r4, r6, #16
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800185c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001860:	1d33      	adds	r3, r6, #4
 8001862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f004 f839 	bl	80058dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800187c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af04      	add	r7, sp, #16
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	70bb      	strb	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_HCD_HC_Init+0x28>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e076      	b.n	8001992 <HAL_HCD_HC_Init+0x116>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	@ 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	333d      	adds	r3, #61	@ 0x3d
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	@ 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3338      	adds	r3, #56	@ 0x38
 80018cc:	787a      	ldrb	r2, [r7, #1]
 80018ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	212c      	movs	r1, #44	@ 0x2c
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	3340      	adds	r3, #64	@ 0x40
 80018de:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80018e0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	212c      	movs	r1, #44	@ 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3339      	adds	r3, #57	@ 0x39
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	@ 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	333f      	adds	r3, #63	@ 0x3f
 8001902:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	78ba      	ldrb	r2, [r7, #2]
 800190c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001910:	b2d0      	uxtb	r0, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	@ 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	333a      	adds	r3, #58	@ 0x3a
 800191e:	4602      	mov	r2, r0
 8001920:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001922:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	da09      	bge.n	800193e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	@ 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	333b      	adds	r3, #59	@ 0x3b
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e008      	b.n	8001950 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	@ 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	333b      	adds	r3, #59	@ 0x3b
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	@ 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	333c      	adds	r3, #60	@ 0x3c
 800195e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001962:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	787c      	ldrb	r4, [r7, #1]
 800196a:	78ba      	ldrb	r2, [r7, #2]
 800196c:	78f9      	ldrb	r1, [r7, #3]
 800196e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4623      	mov	r3, r4
 8001980:	f004 f926 	bl	8005bd0 <USB_HC_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}

0800199a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_HCD_HC_Halt+0x1e>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e00f      	b.n	80019d8 <HAL_HCD_HC_Halt+0x3e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 fb76 	bl	80060ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	70fb      	strb	r3, [r7, #3]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70bb      	strb	r3, [r7, #2]
 80019f6:	4613      	mov	r3, r2
 80019f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	@ 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	333b      	adds	r3, #59	@ 0x3b
 8001a08:	78ba      	ldrb	r2, [r7, #2]
 8001a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	@ 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	333f      	adds	r3, #63	@ 0x3f
 8001a1a:	787a      	ldrb	r2, [r7, #1]
 8001a1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a1e:	7c3b      	ldrb	r3, [r7, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d112      	bne.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	212c      	movs	r1, #44	@ 0x2c
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3342      	adds	r3, #66	@ 0x42
 8001a32:	2203      	movs	r2, #3
 8001a34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	@ 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	333d      	adds	r3, #61	@ 0x3d
 8001a44:	7f3a      	ldrb	r2, [r7, #28]
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e008      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	@ 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3342      	adds	r3, #66	@ 0x42
 8001a58:	2202      	movs	r2, #2
 8001a5a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	f200 80c6 	bhi.w	8001bf0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a64:	a201      	add	r2, pc, #4	@ (adr r2, 8001a6c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a7d 	.word	0x08001a7d
 8001a70:	08001bdd 	.word	0x08001bdd
 8001a74:	08001ae1 	.word	0x08001ae1
 8001a78:	08001b5f 	.word	0x08001b5f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a7c:	7c3b      	ldrb	r3, [r7, #16]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f040 80b8 	bne.w	8001bf4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a84:	78bb      	ldrb	r3, [r7, #2]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 80b4 	bne.w	8001bf4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a8c:	8b3b      	ldrh	r3, [r7, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d108      	bne.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	@ 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3355      	adds	r3, #85	@ 0x55
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	212c      	movs	r1, #44	@ 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3355      	adds	r3, #85	@ 0x55
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	@ 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3342      	adds	r3, #66	@ 0x42
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001aca:	e093      	b.n	8001bf4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	212c      	movs	r1, #44	@ 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3342      	adds	r3, #66	@ 0x42
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e089      	b.n	8001bf4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ae0:	78bb      	ldrb	r3, [r7, #2]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d11d      	bne.n	8001b22 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	@ 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3355      	adds	r3, #85	@ 0x55
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	@ 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3342      	adds	r3, #66	@ 0x42
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b0c:	e073      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	212c      	movs	r1, #44	@ 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3342      	adds	r3, #66	@ 0x42
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
      break;
 8001b20:	e069      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	212c      	movs	r1, #44	@ 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3354      	adds	r3, #84	@ 0x54
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	@ 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	3342      	adds	r3, #66	@ 0x42
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
      break;
 8001b48:	e055      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	@ 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3342      	adds	r3, #66	@ 0x42
 8001b58:	2202      	movs	r2, #2
 8001b5a:	701a      	strb	r2, [r3, #0]
      break;
 8001b5c:	e04b      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b5e:	78bb      	ldrb	r3, [r7, #2]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d11d      	bne.n	8001ba0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	@ 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3355      	adds	r3, #85	@ 0x55
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	@ 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	@ 0x42
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b8a:	e034      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	@ 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	3342      	adds	r3, #66	@ 0x42
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	701a      	strb	r2, [r3, #0]
      break;
 8001b9e:	e02a      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	212c      	movs	r1, #44	@ 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	3354      	adds	r3, #84	@ 0x54
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	212c      	movs	r1, #44	@ 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3342      	adds	r3, #66	@ 0x42
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
      break;
 8001bc6:	e016      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	212c      	movs	r1, #44	@ 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3342      	adds	r3, #66	@ 0x42
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
      break;
 8001bda:	e00c      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	212c      	movs	r1, #44	@ 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3342      	adds	r3, #66	@ 0x42
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
      break;
 8001bee:	e002      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001bf0:	bf00      	nop
 8001bf2:	e000      	b.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001bf4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	@ 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3344      	adds	r3, #68	@ 0x44
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	8b3a      	ldrh	r2, [r7, #24]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	202c      	movs	r0, #44	@ 0x2c
 8001c10:	fb00 f303 	mul.w	r3, r0, r3
 8001c14:	440b      	add	r3, r1
 8001c16:	334c      	adds	r3, #76	@ 0x4c
 8001c18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	212c      	movs	r1, #44	@ 0x2c
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	3360      	adds	r3, #96	@ 0x60
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	212c      	movs	r1, #44	@ 0x2c
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3350      	adds	r3, #80	@ 0x50
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	@ 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3339      	adds	r3, #57	@ 0x39
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	212c      	movs	r1, #44	@ 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3361      	adds	r3, #97	@ 0x61
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	222c      	movs	r2, #44	@ 0x2c
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	3338      	adds	r3, #56	@ 0x38
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	18d1      	adds	r1, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f004 f8ca 	bl	8005e14 <USB_HC_StartXfer>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop

08001c8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fdd7 	bl	8005856 <USB_GetMode>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f040 80f6 	bne.w	8001e9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fdbb 	bl	8005830 <USB_ReadInterrupts>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80ec 	beq.w	8001e9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fdb2 	bl	8005830 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001cd6:	d104      	bne.n	8001ce2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ce0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fda2 	bl	8005830 <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cf6:	d104      	bne.n	8001d02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fd92 	bl	8005830 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d16:	d104      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fd82 	bl	8005830 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d103      	bne.n	8001d3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fd74 	bl	8005830 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d52:	d11c      	bne.n	8001d8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d6e:	2110      	movs	r1, #16
 8001d70:	6938      	ldr	r0, [r7, #16]
 8001d72:	f003 fc63 	bl	800563c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d76:	6938      	ldr	r0, [r7, #16]
 8001d78:	f003 fc94 	bl	80056a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fe5e 	bl	8005a44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f006 fc23 	bl	80085d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fd4c 	bl	8005830 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da2:	d102      	bne.n	8001daa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f001 f89e 	bl	8002ee6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fd3e 	bl	8005830 <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d106      	bne.n	8001dcc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f006 fbec 	bl	800859c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2208      	movs	r2, #8
 8001dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fd2d 	bl	8005830 <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d101      	bne.n	8001de4 <HAL_HCD_IRQHandler+0x158>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_HCD_IRQHandler+0x15a>
 8001de4:	2300      	movs	r3, #0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d012      	beq.n	8001e10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0210 	bic.w	r2, r2, #16
 8001df8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 ffa1 	bl	8002d42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0210 	orr.w	r2, r2, #16
 8001e0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fd0b 	bl	8005830 <USB_ReadInterrupts>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e24:	d13a      	bne.n	8001e9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 f934 	bl	8006098 <USB_HC_ReadInterrupt>
 8001e30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e025      	b.n	8001e84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d018      	beq.n	8001e7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e62:	d106      	bne.n	8001e72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8ab 	bl	8001fc6 <HCD_HC_IN_IRQHandler>
 8001e70:	e005      	b.n	8001e7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	4619      	mov	r1, r3
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fbf9 	bl	8002670 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3d4      	bcc.n	8001e38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	e000      	b.n	8001e9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001e9a:	bf00      	nop
    }
  }
}
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_HCD_Start+0x16>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e013      	b.n	8001ee0 <HAL_HCD_Start+0x3e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 fe20 	bl	8005b0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fb44 	bl	800555e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_HCD_Stop+0x16>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e00d      	b.n	8001f1a <HAL_HCD_Stop+0x32>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f004 fa0e 	bl	800632c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fdc2 	bl	8005ab8 <USB_ResetPort>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	212c      	movs	r1, #44	@ 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3360      	adds	r3, #96	@ 0x60
 8001f58:	781b      	ldrb	r3, [r3, #0]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	212c      	movs	r1, #44	@ 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3350      	adds	r3, #80	@ 0x50
 8001f80:	681b      	ldr	r3, [r3, #0]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 fe06 	bl	8005bac <USB_GetCurrentFrame>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fde1 	bl	8005b7e <USB_GetHostSpeed>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d11a      	bne.n	800202c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002002:	461a      	mov	r2, r3
 8002004:	2304      	movs	r3, #4
 8002006:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	@ 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3361      	adds	r3, #97	@ 0x61
 8002016:	2206      	movs	r2, #6
 8002018:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f004 f848 	bl	80060ba <USB_HC_Halt>
 800202a:	e0af      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002042:	d11b      	bne.n	800207c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002056:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	@ 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3361      	adds	r3, #97	@ 0x61
 8002066:	2207      	movs	r2, #7
 8002068:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f004 f820 	bl	80060ba <USB_HC_Halt>
 800207a:	e087      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b20      	cmp	r3, #32
 8002090:	d109      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209e:	461a      	mov	r2, r3
 80020a0:	2320      	movs	r3, #32
 80020a2:	6093      	str	r3, [r2, #8]
 80020a4:	e072      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d11a      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c8:	461a      	mov	r2, r3
 80020ca:	2308      	movs	r3, #8
 80020cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	@ 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3361      	adds	r3, #97	@ 0x61
 80020dc:	2205      	movs	r2, #5
 80020de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 ffe5 	bl	80060ba <USB_HC_Halt>
 80020f0:	e04c      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002108:	d11b      	bne.n	8002142 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002116:	461a      	mov	r2, r3
 8002118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800211c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	212c      	movs	r1, #44	@ 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3361      	adds	r3, #97	@ 0x61
 800212c:	2208      	movs	r2, #8
 800212e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f003 ffbd 	bl	80060ba <USB_HC_Halt>
 8002140:	e024      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002154:	2b80      	cmp	r3, #128	@ 0x80
 8002156:	d119      	bne.n	800218c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	212c      	movs	r1, #44	@ 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3361      	adds	r3, #97	@ 0x61
 8002178:	2206      	movs	r2, #6
 800217a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f003 ff97 	bl	80060ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800219e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021a2:	d112      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 ff83 	bl	80060ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021c6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021c8:	e24e      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	f040 80df 	bne.w	80023a0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	@ 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3348      	adds	r3, #72	@ 0x48
 80021f8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	0159      	lsls	r1, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	440b      	add	r3, r1
 8002202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800220c:	1ad2      	subs	r2, r2, r3
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	202c      	movs	r0, #44	@ 0x2c
 8002214:	fb00 f303 	mul.w	r3, r0, r3
 8002218:	440b      	add	r3, r1
 800221a:	3350      	adds	r3, #80	@ 0x50
 800221c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	@ 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3361      	adds	r3, #97	@ 0x61
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	@ 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	335c      	adds	r3, #92	@ 0x5c
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	@ 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	333f      	adds	r3, #63	@ 0x3f
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d009      	beq.n	800227c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	@ 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	333f      	adds	r3, #63	@ 0x3f
 8002276:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002278:	2b02      	cmp	r3, #2
 800227a:	d111      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f003 ff17 	bl	80060ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2310      	movs	r3, #16
 800229c:	6093      	str	r3, [r2, #8]
 800229e:	e03a      	b.n	8002316 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	@ 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	333f      	adds	r3, #63	@ 0x3f
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d009      	beq.n	80022c8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	212c      	movs	r1, #44	@ 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	333f      	adds	r3, #63	@ 0x3f
 80022c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d126      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	0151      	lsls	r1, r2, #5
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	440a      	add	r2, r1
 80022de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	@ 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3360      	adds	r3, #96	@ 0x60
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	b2d9      	uxtb	r1, r3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	202c      	movs	r0, #44	@ 0x2c
 8002304:	fb00 f303 	mul.w	r3, r0, r3
 8002308:	4413      	add	r3, r2
 800230a:	3360      	adds	r3, #96	@ 0x60
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f006 f96d 	bl	80085f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d12b      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	212c      	movs	r1, #44	@ 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3348      	adds	r3, #72	@ 0x48
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	202c      	movs	r0, #44	@ 0x2c
 8002334:	fb00 f202 	mul.w	r2, r0, r2
 8002338:	440a      	add	r2, r1
 800233a:	3240      	adds	r2, #64	@ 0x40
 800233c:	8812      	ldrh	r2, [r2, #0]
 800233e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 818e 	beq.w	8002668 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	@ 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3354      	adds	r3, #84	@ 0x54
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2d8      	uxtb	r0, r3
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	@ 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3354      	adds	r3, #84	@ 0x54
 8002370:	4602      	mov	r2, r0
 8002372:	701a      	strb	r2, [r3, #0]
}
 8002374:	e178      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	@ 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3354      	adds	r3, #84	@ 0x54
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	f083 0301 	eor.w	r3, r3, #1
 800238a:	b2d8      	uxtb	r0, r3
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	@ 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3354      	adds	r3, #84	@ 0x54
 800239a:	4602      	mov	r2, r0
 800239c:	701a      	strb	r2, [r3, #0]
}
 800239e:	e163      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	f040 80f6 	bne.w	80025a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	@ 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	@ 0x61
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d109      	bne.n	80023e0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	@ 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3360      	adds	r3, #96	@ 0x60
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e0c9      	b.n	8002574 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	@ 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3361      	adds	r3, #97	@ 0x61
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d109      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	@ 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3360      	adds	r3, #96	@ 0x60
 8002402:	2205      	movs	r2, #5
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e0b5      	b.n	8002574 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	@ 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3361      	adds	r3, #97	@ 0x61
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b06      	cmp	r3, #6
 800241a:	d009      	beq.n	8002430 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	@ 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3361      	adds	r3, #97	@ 0x61
 800242a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800242c:	2b08      	cmp	r3, #8
 800242e:	d150      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	@ 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	335c      	adds	r3, #92	@ 0x5c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	202c      	movs	r0, #44	@ 0x2c
 8002448:	fb00 f303 	mul.w	r3, r0, r3
 800244c:	440b      	add	r3, r1
 800244e:	335c      	adds	r3, #92	@ 0x5c
 8002450:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	212c      	movs	r1, #44	@ 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	335c      	adds	r3, #92	@ 0x5c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d912      	bls.n	800248c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	@ 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	335c      	adds	r3, #92	@ 0x5c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	@ 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3360      	adds	r3, #96	@ 0x60
 8002486:	2204      	movs	r2, #4
 8002488:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800248a:	e073      	b.n	8002574 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	@ 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3360      	adds	r3, #96	@ 0x60
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024d0:	e050      	b.n	8002574 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	@ 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3361      	adds	r3, #97	@ 0x61
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d122      	bne.n	800252c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	@ 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3360      	adds	r3, #96	@ 0x60
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800250e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002516:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002524:	461a      	mov	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e023      	b.n	8002574 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	@ 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	@ 0x61
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b07      	cmp	r3, #7
 800253e:	d119      	bne.n	8002574 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	@ 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	335c      	adds	r3, #92	@ 0x5c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	202c      	movs	r0, #44	@ 0x2c
 8002558:	fb00 f303 	mul.w	r3, r0, r3
 800255c:	440b      	add	r3, r1
 800255e:	335c      	adds	r3, #92	@ 0x5c
 8002560:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	@ 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3360      	adds	r3, #96	@ 0x60
 8002570:	2204      	movs	r2, #4
 8002572:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	2302      	movs	r3, #2
 8002584:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	b2d9      	uxtb	r1, r3
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	202c      	movs	r0, #44	@ 0x2c
 8002590:	fb00 f303 	mul.w	r3, r0, r3
 8002594:	4413      	add	r3, r2
 8002596:	3360      	adds	r3, #96	@ 0x60
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f006 f827 	bl	80085f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025a2:	e061      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d156      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	@ 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333f      	adds	r3, #63	@ 0x3f
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d111      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	@ 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	335c      	adds	r3, #92	@ 0x5c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fd65 	bl	80060ba <USB_HC_Halt>
 80025f0:	e031      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	@ 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	333f      	adds	r3, #63	@ 0x3f
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	@ 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	333f      	adds	r3, #63	@ 0x3f
 8002614:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002616:	2b02      	cmp	r3, #2
 8002618:	d11d      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	@ 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	@ 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d110      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	212c      	movs	r1, #44	@ 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3361      	adds	r3, #97	@ 0x61
 8002642:	2203      	movs	r2, #3
 8002644:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fd32 	bl	80060ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002662:	461a      	mov	r2, r3
 8002664:	2310      	movs	r3, #16
 8002666:	6093      	str	r3, [r2, #8]
}
 8002668:	bf00      	nop
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d11a      	bne.n	80026d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	2304      	movs	r3, #4
 80026b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	@ 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3361      	adds	r3, #97	@ 0x61
 80026c0:	2206      	movs	r2, #6
 80026c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fcf3 	bl	80060ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026d4:	e331      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d12e      	bne.n	800274a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	2320      	movs	r3, #32
 80026fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	@ 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333d      	adds	r3, #61	@ 0x3d
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	f040 8313 	bne.w	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	212c      	movs	r1, #44	@ 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	333d      	adds	r3, #61	@ 0x3d
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	212c      	movs	r1, #44	@ 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3360      	adds	r3, #96	@ 0x60
 8002734:	2202      	movs	r2, #2
 8002736:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fcb9 	bl	80060ba <USB_HC_Halt>
}
 8002748:	e2f7      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800275c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002760:	d112      	bne.n	8002788 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002774:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fc9a 	bl	80060ba <USB_HC_Halt>
}
 8002786:	e2d8      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d140      	bne.n	8002820 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	@ 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	335c      	adds	r3, #92	@ 0x5c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c2:	2b40      	cmp	r3, #64	@ 0x40
 80027c4:	d111      	bne.n	80027ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	@ 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	333d      	adds	r3, #61	@ 0x3d
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	2340      	movs	r3, #64	@ 0x40
 80027e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2301      	movs	r3, #1
 80027fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	212c      	movs	r1, #44	@ 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3361      	adds	r3, #97	@ 0x61
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f003 fc4e 	bl	80060ba <USB_HC_Halt>
}
 800281e:	e28c      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002832:	2b40      	cmp	r3, #64	@ 0x40
 8002834:	d12c      	bne.n	8002890 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	@ 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3361      	adds	r3, #97	@ 0x61
 8002844:	2204      	movs	r2, #4
 8002846:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	212c      	movs	r1, #44	@ 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	333d      	adds	r3, #61	@ 0x3d
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	@ 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	335c      	adds	r3, #92	@ 0x5c
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fc1f 	bl	80060ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002888:	461a      	mov	r2, r3
 800288a:	2340      	movs	r3, #64	@ 0x40
 800288c:	6093      	str	r3, [r2, #8]
}
 800288e:	e254      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d11a      	bne.n	80028dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	2308      	movs	r3, #8
 80028b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	@ 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3361      	adds	r3, #97	@ 0x61
 80028c6:	2205      	movs	r2, #5
 80028c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 fbf0 	bl	80060ba <USB_HC_Halt>
}
 80028da:	e22e      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d140      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	@ 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	335c      	adds	r3, #92	@ 0x5c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	@ 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3361      	adds	r3, #97	@ 0x61
 8002912:	2203      	movs	r2, #3
 8002914:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	@ 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	333d      	adds	r3, #61	@ 0x3d
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d112      	bne.n	8002950 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	@ 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	333c      	adds	r3, #60	@ 0x3c
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	212c      	movs	r1, #44	@ 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	333d      	adds	r3, #61	@ 0x3d
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fbad 	bl	80060ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296c:	461a      	mov	r2, r3
 800296e:	2310      	movs	r3, #16
 8002970:	6093      	str	r3, [r2, #8]
}
 8002972:	e1e2      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d164      	bne.n	8002a54 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d111      	bne.n	80029b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	@ 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3361      	adds	r3, #97	@ 0x61
 80029a0:	2206      	movs	r2, #6
 80029a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fb83 	bl	80060ba <USB_HC_Halt>
 80029b4:	e044      	b.n	8002a40 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	@ 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	335c      	adds	r3, #92	@ 0x5c
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	202c      	movs	r0, #44	@ 0x2c
 80029ce:	fb00 f303 	mul.w	r3, r0, r3
 80029d2:	440b      	add	r3, r1
 80029d4:	335c      	adds	r3, #92	@ 0x5c
 80029d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	@ 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	335c      	adds	r3, #92	@ 0x5c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d920      	bls.n	8002a2e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	@ 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	335c      	adds	r3, #92	@ 0x5c
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	212c      	movs	r1, #44	@ 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3360      	adds	r3, #96	@ 0x60
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	b2d9      	uxtb	r1, r3
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	202c      	movs	r0, #44	@ 0x2c
 8002a1a:	fb00 f303 	mul.w	r3, r0, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3360      	adds	r3, #96	@ 0x60
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f005 fde2 	bl	80085f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a2c:	e008      	b.n	8002a40 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	@ 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3360      	adds	r3, #96	@ 0x60
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	6093      	str	r3, [r2, #8]
}
 8002a52:	e172      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6a:	d11b      	bne.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	@ 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3361      	adds	r3, #97	@ 0x61
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fb16 	bl	80060ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aa0:	6093      	str	r3, [r2, #8]
}
 8002aa2:	e14a      	b.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	f040 813f 	bne.w	8002d3a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	@ 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3361      	adds	r3, #97	@ 0x61
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d17d      	bne.n	8002bcc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	@ 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3360      	adds	r3, #96	@ 0x60
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	@ 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	333f      	adds	r3, #63	@ 0x3f
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d00a      	beq.n	8002b0c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	@ 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	333f      	adds	r3, #63	@ 0x3f
 8002b04:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	f040 8100 	bne.w	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d113      	bne.n	8002b3c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	@ 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3355      	adds	r3, #85	@ 0x55
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f083 0301 	eor.w	r3, r3, #1
 8002b28:	b2d8      	uxtb	r0, r3
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	212c      	movs	r1, #44	@ 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3355      	adds	r3, #85	@ 0x55
 8002b38:	4602      	mov	r2, r0
 8002b3a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f040 80e3 	bne.w	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	@ 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	334c      	adds	r3, #76	@ 0x4c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80d8 	beq.w	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	@ 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	334c      	adds	r3, #76	@ 0x4c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	202c      	movs	r0, #44	@ 0x2c
 8002b72:	fb00 f202 	mul.w	r2, r0, r2
 8002b76:	440a      	add	r2, r1
 8002b78:	3240      	adds	r2, #64	@ 0x40
 8002b7a:	8812      	ldrh	r2, [r2, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	202c      	movs	r0, #44	@ 0x2c
 8002b86:	fb00 f202 	mul.w	r2, r0, r2
 8002b8a:	440a      	add	r2, r1
 8002b8c:	3240      	adds	r2, #64	@ 0x40
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80b5 	beq.w	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	@ 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3355      	adds	r3, #85	@ 0x55
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	f083 0301 	eor.w	r3, r3, #1
 8002bb6:	b2d8      	uxtb	r0, r3
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	@ 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3355      	adds	r3, #85	@ 0x55
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e09f      	b.n	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	@ 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3361      	adds	r3, #97	@ 0x61
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d109      	bne.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	@ 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3360      	adds	r3, #96	@ 0x60
 8002bee:	2202      	movs	r2, #2
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e08b      	b.n	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	@ 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3361      	adds	r3, #97	@ 0x61
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d109      	bne.n	8002c1c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	@ 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3360      	adds	r3, #96	@ 0x60
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e077      	b.n	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	@ 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3361      	adds	r3, #97	@ 0x61
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d109      	bne.n	8002c44 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	212c      	movs	r1, #44	@ 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3360      	adds	r3, #96	@ 0x60
 8002c3e:	2205      	movs	r2, #5
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e063      	b.n	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	212c      	movs	r1, #44	@ 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3361      	adds	r3, #97	@ 0x61
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d009      	beq.n	8002c6c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	@ 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3361      	adds	r3, #97	@ 0x61
 8002c66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d14f      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	@ 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	335c      	adds	r3, #92	@ 0x5c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	202c      	movs	r0, #44	@ 0x2c
 8002c84:	fb00 f303 	mul.w	r3, r0, r3
 8002c88:	440b      	add	r3, r1
 8002c8a:	335c      	adds	r3, #92	@ 0x5c
 8002c8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	212c      	movs	r1, #44	@ 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	335c      	adds	r3, #92	@ 0x5c
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d912      	bls.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	212c      	movs	r1, #44	@ 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	335c      	adds	r3, #92	@ 0x5c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	@ 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3360      	adds	r3, #96	@ 0x60
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e021      	b.n	8002d0c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	@ 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3360      	adds	r3, #96	@ 0x60
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cf0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cf8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d06:	461a      	mov	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	b2d9      	uxtb	r1, r3
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	202c      	movs	r0, #44	@ 0x2c
 8002d28:	fb00 f303 	mul.w	r3, r0, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3360      	adds	r3, #96	@ 0x60
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f005 fc5b 	bl	80085f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d3a:	bf00      	nop
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08a      	sub	sp, #40	@ 0x28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	0c5b      	lsrs	r3, r3, #17
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d004      	beq.n	8002d88 <HCD_RXQLVL_IRQHandler+0x46>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	f000 80a9 	beq.w	8002ed8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d86:	e0aa      	b.n	8002ede <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80a6 	beq.w	8002edc <HCD_RXQLVL_IRQHandler+0x19a>
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	212c      	movs	r1, #44	@ 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3344      	adds	r3, #68	@ 0x44
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 809b 	beq.w	8002edc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	212c      	movs	r1, #44	@ 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3350      	adds	r3, #80	@ 0x50
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	441a      	add	r2, r3
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	202c      	movs	r0, #44	@ 0x2c
 8002dc0:	fb00 f303 	mul.w	r3, r0, r3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	334c      	adds	r3, #76	@ 0x4c
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d87a      	bhi.n	8002ec4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	212c      	movs	r1, #44	@ 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3344      	adds	r3, #68	@ 0x44
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	b292      	uxth	r2, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f002 fcca 	bl	8005780 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	212c      	movs	r1, #44	@ 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3344      	adds	r3, #68	@ 0x44
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	441a      	add	r2, r3
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	202c      	movs	r0, #44	@ 0x2c
 8002e06:	fb00 f303 	mul.w	r3, r0, r3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3344      	adds	r3, #68	@ 0x44
 8002e0e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	212c      	movs	r1, #44	@ 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3350      	adds	r3, #80	@ 0x50
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	441a      	add	r2, r3
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	202c      	movs	r0, #44	@ 0x2c
 8002e2a:	fb00 f303 	mul.w	r3, r0, r3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3350      	adds	r3, #80	@ 0x50
 8002e32:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	0cdb      	lsrs	r3, r3, #19
 8002e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	212c      	movs	r1, #44	@ 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3340      	adds	r3, #64	@ 0x40
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d13c      	bne.n	8002edc <HCD_RXQLVL_IRQHandler+0x19a>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d039      	beq.n	8002edc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e86:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	212c      	movs	r1, #44	@ 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3354      	adds	r3, #84	@ 0x54
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2d8      	uxtb	r0, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	212c      	movs	r1, #44	@ 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3354      	adds	r3, #84	@ 0x54
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	701a      	strb	r2, [r3, #0]
      break;
 8002ec2:	e00b      	b.n	8002edc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	212c      	movs	r1, #44	@ 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3360      	adds	r3, #96	@ 0x60
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
      break;
 8002ed6:	e001      	b.n	8002edc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002edc:	bf00      	nop
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3728      	adds	r7, #40	@ 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002f12:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d10b      	bne.n	8002f36 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d102      	bne.n	8002f2e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f005 fb45 	bl	80085b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d132      	bne.n	8002fa6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f043 0308 	orr.w	r3, r3, #8
 8002f46:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d126      	bne.n	8002fa0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d113      	bne.n	8002f82 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002f60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f64:	d106      	bne.n	8002f74 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 fd69 	bl	8005a44 <USB_InitFSLSPClkSel>
 8002f72:	e011      	b.n	8002f98 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fd62 	bl	8005a44 <USB_InitFSLSPClkSel>
 8002f80:	e00a      	b.n	8002f98 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d106      	bne.n	8002f98 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f90:	461a      	mov	r2, r3
 8002f92:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002f96:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f005 fb37 	bl	800860c <HAL_HCD_PortEnabled_Callback>
 8002f9e:	e002      	b.n	8002fa6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f005 fb41 	bl	8008628 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d103      	bne.n	8002fb8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e12b      	b.n	8003236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fd56 	bl	8000aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	@ 0x24
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800301e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800302e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003030:	f000 fa02 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8003034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4a81      	ldr	r2, [pc, #516]	@ (8003240 <HAL_I2C_Init+0x274>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d807      	bhi.n	8003050 <HAL_I2C_Init+0x84>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a80      	ldr	r2, [pc, #512]	@ (8003244 <HAL_I2C_Init+0x278>)
 8003044:	4293      	cmp	r3, r2
 8003046:	bf94      	ite	ls
 8003048:	2301      	movls	r3, #1
 800304a:	2300      	movhi	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e006      	b.n	800305e <HAL_I2C_Init+0x92>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a7d      	ldr	r2, [pc, #500]	@ (8003248 <HAL_I2C_Init+0x27c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0e7      	b.n	8003236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4a78      	ldr	r2, [pc, #480]	@ (800324c <HAL_I2C_Init+0x280>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9b      	lsrs	r3, r3, #18
 8003070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a6a      	ldr	r2, [pc, #424]	@ (8003240 <HAL_I2C_Init+0x274>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d802      	bhi.n	80030a0 <HAL_I2C_Init+0xd4>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3301      	adds	r3, #1
 800309e:	e009      	b.n	80030b4 <HAL_I2C_Init+0xe8>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	4a69      	ldr	r2, [pc, #420]	@ (8003250 <HAL_I2C_Init+0x284>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	3301      	adds	r3, #1
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	495c      	ldr	r1, [pc, #368]	@ (8003240 <HAL_I2C_Init+0x274>)
 80030d0:	428b      	cmp	r3, r1
 80030d2:	d819      	bhi.n	8003108 <HAL_I2C_Init+0x13c>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e59      	subs	r1, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e2:	1c59      	adds	r1, r3, #1
 80030e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030e8:	400b      	ands	r3, r1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_I2C_Init+0x138>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1e59      	subs	r1, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003102:	e051      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003104:	2304      	movs	r3, #4
 8003106:	e04f      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d111      	bne.n	8003134 <HAL_I2C_Init+0x168>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	440b      	add	r3, r1
 800311e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003122:	3301      	adds	r3, #1
 8003124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e012      	b.n	800315a <HAL_I2C_Init+0x18e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	0099      	lsls	r1, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Init+0x196>
 800315e:	2301      	movs	r3, #1
 8003160:	e022      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10e      	bne.n	8003188 <HAL_I2C_Init+0x1bc>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1e58      	subs	r0, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	440b      	add	r3, r1
 8003178:	fbb0 f3f3 	udiv	r3, r0, r3
 800317c:	3301      	adds	r3, #1
 800317e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003186:	e00f      	b.n	80031a8 <HAL_I2C_Init+0x1dc>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	0099      	lsls	r1, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	fbb0 f3f3 	udiv	r3, r0, r3
 800319e:	3301      	adds	r3, #1
 80031a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	6809      	ldr	r1, [r1, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6911      	ldr	r1, [r2, #16]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68d2      	ldr	r2, [r2, #12]
 80031e2:	4311      	orrs	r1, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	000186a0 	.word	0x000186a0
 8003244:	001e847f 	.word	0x001e847f
 8003248:	003d08ff 	.word	0x003d08ff
 800324c:	431bde83 	.word	0x431bde83
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0cc      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b68      	ldr	r3, [pc, #416]	@ (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d90c      	bls.n	8003290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b65      	ldr	r3, [pc, #404]	@ (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	@ (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a58      	ldr	r2, [pc, #352]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a52      	ldr	r2, [pc, #328]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d044      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d119      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d003      	beq.n	8003312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b3f      	ldr	r3, [pc, #252]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3b      	ldr	r3, [pc, #236]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e067      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b37      	ldr	r3, [pc, #220]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4934      	ldr	r1, [pc, #208]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fd ff46 	bl	80011d4 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fd ff42 	bl	80011d4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2b      	ldr	r3, [pc, #172]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d20c      	bcs.n	800339c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b22      	ldr	r3, [pc, #136]	@ (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	@ (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033da:	f000 fbb1 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	@ (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fd04 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800
 8003414:	08008c94 	.word	0x08008c94
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	@ (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	@ (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	08008ca4 	.word	0x08008ca4

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	@ (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	08008ca4 	.word	0x08008ca4

08003488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	220f      	movs	r2, #15
 8003496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003498:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0203 	and.w	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034a4:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034b0:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034bc:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ca:	4b07      	ldr	r3, [pc, #28]	@ (80034e8 <HAL_RCC_GetClockConfig+0x60>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40023c00 	.word	0x40023c00

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08c      	sub	sp, #48	@ 0x30
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003524:	4b6f      	ldr	r3, [pc, #444]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800352a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	496c      	ldr	r1, [pc, #432]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003542:	2301      	movs	r3, #1
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003552:	4b64      	ldr	r3, [pc, #400]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003558:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	4960      	ldr	r1, [pc, #384]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003570:	2301      	movs	r3, #1
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d017      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003580:	4b58      	ldr	r3, [pc, #352]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003586:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	4955      	ldr	r1, [pc, #340]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359e:	d101      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80035a0:	2301      	movs	r3, #1
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80035ac:	2301      	movs	r3, #1
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035bc:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	4946      	ldr	r1, [pc, #280]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035da:	d101      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80035dc:	2301      	movs	r3, #1
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80035e8:	2301      	movs	r3, #1
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 808a 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b39      	ldr	r3, [pc, #228]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	4a38      	ldr	r2, [pc, #224]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	@ 0x40
 800360a:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003616:	4b34      	ldr	r3, [pc, #208]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003620:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003622:	f7fd fdd7 	bl	80011d4 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fd fdd3 	bl	80011d4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e278      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800363c:	4b2a      	ldr	r3, [pc, #168]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003648:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003650:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02f      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	429a      	cmp	r2, r3
 8003664:	d028      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003666:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003670:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800367c:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003682:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d114      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800368e:	f7fd fda1 	bl	80011d4 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fd fd9d 	bl	80011d4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e240      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ee      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c4:	d114      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80036d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036da:	4902      	ldr	r1, [pc, #8]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]
 80036e0:	e00c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40007000 	.word	0x40007000
 80036ec:	42470e40 	.word	0x42470e40
 80036f0:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a49      	ldr	r2, [pc, #292]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	4b47      	ldr	r3, [pc, #284]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	4944      	ldr	r1, [pc, #272]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800370a:	4313      	orrs	r3, r2
 800370c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003720:	4b3f      	ldr	r3, [pc, #252]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003722:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003730:	4b3a      	ldr	r3, [pc, #232]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003736:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	4937      	ldr	r1, [pc, #220]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003752:	4b32      	ldr	r3, [pc, #200]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003758:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003760:	492e      	ldr	r1, [pc, #184]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d011      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003774:	4b29      	ldr	r3, [pc, #164]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	4926      	ldr	r1, [pc, #152]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003792:	d101      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003794:	2301      	movs	r3, #1
 8003796:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80037a4:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	491a      	ldr	r1, [pc, #104]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d011      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d4:	4911      	ldr	r1, [pc, #68]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e4:	d101      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80037e6:	2301      	movs	r3, #1
 80037e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d005      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f8:	f040 80ff 	bne.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003802:	f7fd fce7 	bl	80011d4 <HAL_GetTick>
 8003806:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003808:	e00e      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800380a:	f7fd fce3 	bl	80011d4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d907      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e188      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800381c:	40023800 	.word	0x40023800
 8003820:	424711e0 	.word	0x424711e0
 8003824:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003828:	4b7e      	ldr	r3, [pc, #504]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ea      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003850:	2b00      	cmp	r3, #0
 8003852:	d028      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d124      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800385c:	4b71      	ldr	r3, [pc, #452]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	3301      	adds	r3, #1
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800386e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003874:	0e1b      	lsrs	r3, r3, #24
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	3b01      	subs	r3, #1
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	431a      	orrs	r2, r3
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	071b      	lsls	r3, r3, #28
 800389e:	4961      	ldr	r1, [pc, #388]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d035      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d0:	d130      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80038d2:	4b54      	ldr	r3, [pc, #336]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	0f1b      	lsrs	r3, r3, #28
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	019b      	lsls	r3, r3, #6
 80038fc:	431a      	orrs	r2, r3
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	3b01      	subs	r3, #1
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	431a      	orrs	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	071b      	lsls	r3, r3, #28
 8003914:	4943      	ldr	r1, [pc, #268]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800391c:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800391e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003922:	f023 021f 	bic.w	r2, r3, #31
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	493d      	ldr	r1, [pc, #244]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d029      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003948:	d124      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800394a:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800395c:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	4925      	ldr	r1, [pc, #148]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d016      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	071b      	lsls	r3, r3, #28
 80039c6:	4917      	ldr	r1, [pc, #92]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039ce:	4b16      	ldr	r3, [pc, #88]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fd fbfe 	bl	80011d4 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039dc:	f7fd fbfa 	bl	80011d4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e09f      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 8095 	bne.w	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a02:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a08:	f7fd fbe4 	bl	80011d4 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0e:	e00f      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a10:	f7fd fbe0 	bl	80011d4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d908      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e085      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	42470068 	.word	0x42470068
 8003a2c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a30:	4b41      	ldr	r3, [pc, #260]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a3c:	d0e8      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02b      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d127      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003a66:	4b34      	ldr	r3, [pc, #208]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	3301      	adds	r3, #1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	431a      	orrs	r2, r3
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	4928      	ldr	r1, [pc, #160]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a9c:	4b26      	ldr	r3, [pc, #152]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	4922      	ldr	r1, [pc, #136]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aca:	d118      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003acc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad2:	0e1b      	lsrs	r3, r3, #24
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	019b      	lsls	r3, r3, #6
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	061b      	lsls	r3, r3, #24
 8003af6:	4910      	ldr	r1, [pc, #64]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003afe:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fd fb66 	bl	80011d4 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b0c:	f7fd fb62 	bl	80011d4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e007      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b2a:	d1ef      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3730      	adds	r7, #48	@ 0x30
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470070 	.word	0x42470070

08003b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b44:	b0a6      	sub	sp, #152	@ 0x98
 8003b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b66:	4bc8      	ldr	r3, [pc, #800]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	f200 817e 	bhi.w	8003e70 <HAL_RCC_GetSysClockFreq+0x330>
 8003b74:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003e71 	.word	0x08003e71
 8003b84:	08003e71 	.word	0x08003e71
 8003b88:	08003e71 	.word	0x08003e71
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003e71 	.word	0x08003e71
 8003b94:	08003e71 	.word	0x08003e71
 8003b98:	08003e71 	.word	0x08003e71
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003e71 	.word	0x08003e71
 8003ba4:	08003e71 	.word	0x08003e71
 8003ba8:	08003e71 	.word	0x08003e71
 8003bac:	08003d2b 	.word	0x08003d2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4bb6      	ldr	r3, [pc, #728]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8003bb6:	e15f      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb8:	4bb5      	ldr	r3, [pc, #724]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003bbe:	e15b      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc0:	4bb1      	ldr	r3, [pc, #708]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bcc:	4bae      	ldr	r3, [pc, #696]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d031      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd8:	4bab      	ldr	r3, [pc, #684]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	2200      	movs	r2, #0
 8003be0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003be2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003be4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bea:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bec:	2300      	movs	r3, #0
 8003bee:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bf0:	4ba7      	ldr	r3, [pc, #668]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bf2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	fb03 f202 	mul.w	r2, r3, r2
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4621      	mov	r1, r4
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	4aa2      	ldr	r2, [pc, #648]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c08:	4621      	mov	r1, r4
 8003c0a:	fba1 1202 	umull	r1, r2, r1, r2
 8003c0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c10:	460a      	mov	r2, r1
 8003c12:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003c14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c16:	4413      	add	r3, r2
 8003c18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c1e:	2200      	movs	r2, #0
 8003c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003c2c:	f7fc faea 	bl	8000204 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4613      	mov	r3, r2
 8003c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c3a:	e064      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3c:	4b92      	ldr	r3, [pc, #584]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	2200      	movs	r2, #0
 8003c44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c46:	657a      	str	r2, [r7, #84]	@ 0x54
 8003c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c50:	2300      	movs	r3, #0
 8003c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003c58:	4622      	mov	r2, r4
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	f04f 0000 	mov.w	r0, #0
 8003c60:	f04f 0100 	mov.w	r1, #0
 8003c64:	0159      	lsls	r1, r3, #5
 8003c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6a:	0150      	lsls	r0, r2, #5
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4621      	mov	r1, r4
 8003c72:	1a51      	subs	r1, r2, r1
 8003c74:	6139      	str	r1, [r7, #16]
 8003c76:	4629      	mov	r1, r5
 8003c78:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8a:	4659      	mov	r1, fp
 8003c8c:	018b      	lsls	r3, r1, #6
 8003c8e:	4651      	mov	r1, sl
 8003c90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c94:	4651      	mov	r1, sl
 8003c96:	018a      	lsls	r2, r1, #6
 8003c98:	4651      	mov	r1, sl
 8003c9a:	ebb2 0801 	subs.w	r8, r2, r1
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cb8:	4690      	mov	r8, r2
 8003cba:	4699      	mov	r9, r3
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	eb18 0303 	adds.w	r3, r8, r3
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	462b      	mov	r3, r5
 8003cc6:	eb49 0303 	adc.w	r3, r9, r3
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cd8:	4629      	mov	r1, r5
 8003cda:	028b      	lsls	r3, r1, #10
 8003cdc:	4621      	mov	r1, r4
 8003cde:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	028a      	lsls	r2, r1, #10
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cee:	2200      	movs	r2, #0
 8003cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cf8:	f7fc fa84 	bl	8000204 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d06:	4b60      	ldr	r3, [pc, #384]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	3301      	adds	r3, #1
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8003d18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d28:	e0a6      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d2a:	4b57      	ldr	r3, [pc, #348]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d36:	4b54      	ldr	r3, [pc, #336]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d02a      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d42:	4b51      	ldr	r3, [pc, #324]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	2200      	movs	r2, #0
 8003d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d54:	2100      	movs	r1, #0
 8003d56:	4b4e      	ldr	r3, [pc, #312]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d58:	fb03 f201 	mul.w	r2, r3, r1
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	fb00 f303 	mul.w	r3, r0, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	4a4a      	ldr	r2, [pc, #296]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d66:	fba0 1202 	umull	r1, r2, r0, r2
 8003d6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d6c:	460a      	mov	r2, r1
 8003d6e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003d70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d72:	4413      	add	r3, r2
 8003d74:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d88:	f7fc fa3c 	bl	8000204 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4613      	mov	r3, r2
 8003d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d96:	e05b      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d98:	4b3b      	ldr	r3, [pc, #236]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	2200      	movs	r2, #0
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	f04f 0000 	mov.w	r0, #0
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	0159      	lsls	r1, r3, #5
 8003dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc6:	0150      	lsls	r0, r2, #5
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4641      	mov	r1, r8
 8003dce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003de4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dec:	ebb2 040a 	subs.w	r4, r2, sl
 8003df0:	eb63 050b 	sbc.w	r5, r3, fp
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	00eb      	lsls	r3, r5, #3
 8003dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e02:	00e2      	lsls	r2, r4, #3
 8003e04:	4614      	mov	r4, r2
 8003e06:	461d      	mov	r5, r3
 8003e08:	4643      	mov	r3, r8
 8003e0a:	18e3      	adds	r3, r4, r3
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	464b      	mov	r3, r9
 8003e10:	eb45 0303 	adc.w	r3, r5, r3
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e22:	4629      	mov	r1, r5
 8003e24:	028b      	lsls	r3, r1, #10
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	028a      	lsls	r2, r1, #10
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e38:	2200      	movs	r2, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	61fa      	str	r2, [r7, #28]
 8003e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e42:	f7fc f9df 	bl	8000204 <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e50:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	0f1b      	lsrs	r3, r3, #28
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8003e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e6e:	e003      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3798      	adds	r7, #152	@ 0x98
 8003e80:	46bd      	mov	sp, r7
 8003e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	017d7840 	.word	0x017d7840

08003e94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e28d      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8083 	beq.w	8003fba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003eb4:	4b94      	ldr	r3, [pc, #592]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ec0:	4b91      	ldr	r3, [pc, #580]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b8b      	ldr	r3, [pc, #556]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d112      	bne.n	8003f0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee6:	4b88      	ldr	r3, [pc, #544]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	4b84      	ldr	r3, [pc, #528]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d05b      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x124>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d157      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e25a      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d106      	bne.n	8003f24 <HAL_RCC_OscConfig+0x90>
 8003f16:	4b7c      	ldr	r3, [pc, #496]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7b      	ldr	r2, [pc, #492]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e01d      	b.n	8003f60 <HAL_RCC_OscConfig+0xcc>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0xb4>
 8003f2e:	4b76      	ldr	r3, [pc, #472]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a75      	ldr	r2, [pc, #468]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b73      	ldr	r3, [pc, #460]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a72      	ldr	r2, [pc, #456]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0xcc>
 8003f48:	4b6f      	ldr	r3, [pc, #444]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a6b      	ldr	r2, [pc, #428]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd f934 	bl	80011d4 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fd f930 	bl	80011d4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	@ 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e21f      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b61      	ldr	r3, [pc, #388]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0xdc>
 8003f8e:	e014      	b.n	8003fba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd f920 	bl	80011d4 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fd f91c 	bl	80011d4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	@ 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e20b      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	4b57      	ldr	r3, [pc, #348]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x104>
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d06f      	beq.n	80040a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fc6:	4b50      	ldr	r3, [pc, #320]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d105      	bne.n	8003fea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fde:	4b4a      	ldr	r3, [pc, #296]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b47      	ldr	r3, [pc, #284]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b44      	ldr	r3, [pc, #272]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x186>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1d3      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b3b      	ldr	r3, [pc, #236]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4937      	ldr	r1, [pc, #220]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e03a      	b.n	80040a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b34      	ldr	r3, [pc, #208]	@ (800410c <HAL_RCC_OscConfig+0x278>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd f8c9 	bl	80011d4 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004046:	f7fd f8c5 	bl	80011d4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1b4      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	4b2b      	ldr	r3, [pc, #172]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b28      	ldr	r3, [pc, #160]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4925      	ldr	r1, [pc, #148]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b24      	ldr	r3, [pc, #144]	@ (800410c <HAL_RCC_OscConfig+0x278>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd f8a8 	bl	80011d4 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004088:	f7fd f8a4 	bl	80011d4 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e193      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d036      	beq.n	8004120 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ba:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fd f888 	bl	80011d4 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fd f884 	bl	80011d4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e173      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_OscConfig+0x274>)
 80040dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x234>
 80040e6:	e01b      	b.n	8004120 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b09      	ldr	r3, [pc, #36]	@ (8004110 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7fd f871 	bl	80011d4 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	e00e      	b.n	8004114 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fd f86d 	bl	80011d4 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d907      	bls.n	8004114 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e15c      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
 8004108:	40023800 	.word	0x40023800
 800410c:	42470000 	.word	0x42470000
 8004110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004114:	4b8a      	ldr	r3, [pc, #552]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ea      	bne.n	80040f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8097 	beq.w	800425c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004132:	4b83      	ldr	r3, [pc, #524]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	4b7f      	ldr	r3, [pc, #508]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	@ 0x40
 800414e:	4b7c      	ldr	r3, [pc, #496]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4b79      	ldr	r3, [pc, #484]	@ (8004344 <HAL_RCC_OscConfig+0x4b0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416a:	4b76      	ldr	r3, [pc, #472]	@ (8004344 <HAL_RCC_OscConfig+0x4b0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a75      	ldr	r2, [pc, #468]	@ (8004344 <HAL_RCC_OscConfig+0x4b0>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004176:	f7fd f82d 	bl	80011d4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fd f829 	bl	80011d4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e118      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	4b6c      	ldr	r3, [pc, #432]	@ (8004344 <HAL_RCC_OscConfig+0x4b0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x31e>
 80041a4:	4b66      	ldr	r3, [pc, #408]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a8:	4a65      	ldr	r2, [pc, #404]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b0:	e01c      	b.n	80041ec <HAL_RCC_OscConfig+0x358>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x340>
 80041ba:	4b61      	ldr	r3, [pc, #388]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	4a60      	ldr	r2, [pc, #384]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x358>
 80041d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d8:	4a59      	ldr	r2, [pc, #356]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e0:	4b57      	ldr	r3, [pc, #348]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e4:	4a56      	ldr	r2, [pc, #344]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	f023 0304 	bic.w	r3, r3, #4
 80041ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fc ffee 	bl	80011d4 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fc ffea 	bl	80011d4 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e0d7      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	4b4b      	ldr	r3, [pc, #300]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <HAL_RCC_OscConfig+0x368>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fc ffd8 	bl	80011d4 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fc ffd4 	bl	80011d4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0c1      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	4b40      	ldr	r3, [pc, #256]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ee      	bne.n	8004228 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	4a3a      	ldr	r2, [pc, #232]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800425a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80ad 	beq.w	80043c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004266:	4b36      	ldr	r3, [pc, #216]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b08      	cmp	r3, #8
 8004270:	d060      	beq.n	8004334 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d145      	bne.n	8004306 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427a:	4b33      	ldr	r3, [pc, #204]	@ (8004348 <HAL_RCC_OscConfig+0x4b4>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fc ffa8 	bl	80011d4 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fc ffa4 	bl	80011d4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e093      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	4b29      	ldr	r3, [pc, #164]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	3b01      	subs	r3, #1
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	071b      	lsls	r3, r3, #28
 80042d2:	491b      	ldr	r1, [pc, #108]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x4b4>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fc ff79 	bl	80011d4 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fc ff75 	bl	80011d4 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e064      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f8:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x452>
 8004304:	e05c      	b.n	80043c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <HAL_RCC_OscConfig+0x4b4>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fc ff62 	bl	80011d4 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fc ff5e 	bl	80011d4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e04d      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_OscConfig+0x4ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x480>
 8004332:	e045      	b.n	80043c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e040      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000
 8004348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800434c:	4b1f      	ldr	r3, [pc, #124]	@ (80043cc <HAL_RCC_OscConfig+0x538>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d030      	beq.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d129      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d122      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004384:	4293      	cmp	r3, r2
 8004386:	d119      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d10f      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e07b      	b.n	80044da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043f2:	d009      	beq.n	8004408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	61da      	str	r2, [r3, #28]
 80043fa:	e005      	b.n	8004408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fc80 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800443e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448c:	ea42 0103 	orr.w	r1, r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	f003 0104 	and.w	r1, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	f003 0210 	and.w	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08c      	sub	sp, #48	@ 0x30
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x26>
 8004504:	2302      	movs	r3, #2
 8004506:	e18a      	b.n	800481e <HAL_SPI_TransmitReceive+0x33c>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004510:	f7fc fe60 	bl	80011d4 <HAL_GetTick>
 8004514:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800451c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800452e:	2b01      	cmp	r3, #1
 8004530:	d00f      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x70>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004538:	d107      	bne.n	800454a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_SPI_TransmitReceive+0x68>
 8004542:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004546:	2b04      	cmp	r3, #4
 8004548:	d003      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800454a:	2302      	movs	r3, #2
 800454c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004550:	e15b      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x82>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x82>
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800456a:	e14e      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b04      	cmp	r3, #4
 8004576:	d003      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2205      	movs	r2, #5
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c0:	2b40      	cmp	r3, #64	@ 0x40
 80045c2:	d007      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045dc:	d178      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x10a>
 80045e6:	8b7b      	ldrh	r3, [r7, #26]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d166      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	881a      	ldrh	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004610:	e053      	b.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	d11b      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x176>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x176>
 800462a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d113      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	881a      	ldrh	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	1c9a      	adds	r2, r3, #2
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d119      	bne.n	800469a <HAL_SPI_TransmitReceive+0x1b8>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d014      	beq.n	800469a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	b292      	uxth	r2, r2
 800467c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004696:	2301      	movs	r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800469a:	f7fc fd9b 	bl	80011d4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d807      	bhi.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
 80046aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d003      	beq.n	80046ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80046b8:	e0a7      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1a6      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x130>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1a1      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x130>
 80046ce:	e07c      	b.n	80047ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_SPI_TransmitReceive+0x1fc>
 80046d8:	8b7b      	ldrh	r3, [r7, #26]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d16b      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004704:	e057      	b.n	80047b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d11c      	bne.n	800474e <HAL_SPI_TransmitReceive+0x26c>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_SPI_TransmitReceive+0x26c>
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d114      	bne.n	800474e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d119      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x2ae>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d014      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004790:	f7fc fd20 	bl	80011d4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800479c:	429a      	cmp	r2, r3
 800479e:	d803      	bhi.n	80047a8 <HAL_SPI_TransmitReceive+0x2c6>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d102      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x2cc>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80047b4:	e029      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1a2      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x224>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d19d      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f8b2 	bl	8004938 <SPI_EndRxTxTransaction>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80047e6:	e010      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e000      	b.n	800480a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800481a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800481e:	4618      	mov	r0, r3
 8004820:	3730      	adds	r7, #48	@ 0x30
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004838:	f7fc fccc 	bl	80011d4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4413      	add	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004848:	f7fc fcc4 	bl	80011d4 <HAL_GetTick>
 800484c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484e:	4b39      	ldr	r3, [pc, #228]	@ (8004934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	0d1b      	lsrs	r3, r3, #20
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	e054      	b.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d050      	beq.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004868:	f7fc fcb4 	bl	80011d4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d902      	bls.n	800487e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13d      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800488c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004896:	d111      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a0:	d004      	beq.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048aa:	d107      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c4:	d10f      	bne.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e017      	b.n	800492a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3b01      	subs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d19b      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000000 	.word	0x20000000

08004938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004944:	4b1b      	ldr	r3, [pc, #108]	@ (80049b4 <SPI_EndRxTxTransaction+0x7c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <SPI_EndRxTxTransaction+0x80>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0d5b      	lsrs	r3, r3, #21
 8004950:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004962:	d112      	bne.n	800498a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	2180      	movs	r1, #128	@ 0x80
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff5a 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3b01      	subs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a0:	2b80      	cmp	r3, #128	@ 0x80
 80049a2:	d0f2      	beq.n	800498a <SPI_EndRxTxTransaction+0x52>
 80049a4:	e000      	b.n	80049a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80049a6:	bf00      	nop
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000000 	.word	0x20000000
 80049b8:	165e9f81 	.word	0x165e9f81

080049bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e041      	b.n	8004a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f839 	bl	8004a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 f9d8 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d001      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e04e      	b.n	8004b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	@ (8004b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d022      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab2:	d01d      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d018      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00e      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a19      	ldr	r2, [pc, #100]	@ (8004b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x80>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	@ (8004b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d111      	bne.n	8004b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d010      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	e007      	b.n	8004b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40001800 	.word	0x40001800

08004b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d122      	bne.n	8004bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d11b      	bne.n	8004bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0202 	mvn.w	r2, #2
 8004b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8ee 	bl	8004d74 <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8e0 	bl	8004d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8f1 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0204 	mvn.w	r2, #4
 8004bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8c4 	bl	8004d74 <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8b6 	bl	8004d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8c7 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0208 	mvn.w	r2, #8
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f89a 	bl	8004d74 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f88c 	bl	8004d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f89d 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0210 	mvn.w	r2, #16
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f870 	bl	8004d74 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f862 	bl	8004d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f873 	bl	8004d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0201 	mvn.w	r2, #1
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fb ffdc 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b80      	cmp	r3, #128	@ 0x80
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	2b80      	cmp	r3, #128	@ 0x80
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f902 	bl	8004f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0a:	2b40      	cmp	r3, #64	@ 0x40
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	d107      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f838 	bl	8004d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d107      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0220 	mvn.w	r2, #32
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8cc 	bl	8004ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a40      	ldr	r2, [pc, #256]	@ (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ec8 <TIM_Base_SetConfig+0x118>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3c      	ldr	r2, [pc, #240]	@ (8004ecc <TIM_Base_SetConfig+0x11c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed0 <TIM_Base_SetConfig+0x120>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed4 <TIM_Base_SetConfig+0x124>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e10:	d027      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec8 <TIM_Base_SetConfig+0x118>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d023      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ecc <TIM_Base_SetConfig+0x11c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed0 <TIM_Base_SetConfig+0x120>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a29      	ldr	r2, [pc, #164]	@ (8004ed4 <TIM_Base_SetConfig+0x124>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d017      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a28      	ldr	r2, [pc, #160]	@ (8004ed8 <TIM_Base_SetConfig+0x128>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a27      	ldr	r2, [pc, #156]	@ (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a26      	ldr	r2, [pc, #152]	@ (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a25      	ldr	r2, [pc, #148]	@ (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <TIM_Base_SetConfig+0x13c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d108      	bne.n	8004e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed4 <TIM_Base_SetConfig+0x124>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	40001c00 	.word	0x40001c00
 8004eec:	40002000 	.word	0x40002000

08004ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e03f      	b.n	8004faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc f8a0 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2224      	movs	r2, #36	@ 0x24
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f829 	bl	8004fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb8:	b0c0      	sub	sp, #256	@ 0x100
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	68d9      	ldr	r1, [r3, #12]
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	ea40 0301 	orr.w	r3, r0, r1
 8004fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800500c:	f021 010c 	bic.w	r1, r1, #12
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800501a:	430b      	orrs	r3, r1
 800501c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502e:	6999      	ldr	r1, [r3, #24]
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	ea40 0301 	orr.w	r3, r0, r1
 800503a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b8f      	ldr	r3, [pc, #572]	@ (8005280 <UART_SetConfig+0x2cc>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d005      	beq.n	8005054 <UART_SetConfig+0xa0>
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b8d      	ldr	r3, [pc, #564]	@ (8005284 <UART_SetConfig+0x2d0>)
 8005050:	429a      	cmp	r2, r3
 8005052:	d104      	bne.n	800505e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7fe fa04 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8005058:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800505c:	e003      	b.n	8005066 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800505e:	f7fe f9eb 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8005062:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005070:	f040 810c 	bne.w	800528c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005078:	2200      	movs	r2, #0
 800507a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800507e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005082:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005086:	4622      	mov	r2, r4
 8005088:	462b      	mov	r3, r5
 800508a:	1891      	adds	r1, r2, r2
 800508c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800508e:	415b      	adcs	r3, r3
 8005090:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005096:	4621      	mov	r1, r4
 8005098:	eb12 0801 	adds.w	r8, r2, r1
 800509c:	4629      	mov	r1, r5
 800509e:	eb43 0901 	adc.w	r9, r3, r1
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050b6:	4690      	mov	r8, r2
 80050b8:	4699      	mov	r9, r3
 80050ba:	4623      	mov	r3, r4
 80050bc:	eb18 0303 	adds.w	r3, r8, r3
 80050c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050c4:	462b      	mov	r3, r5
 80050c6:	eb49 0303 	adc.w	r3, r9, r3
 80050ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050e2:	460b      	mov	r3, r1
 80050e4:	18db      	adds	r3, r3, r3
 80050e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050e8:	4613      	mov	r3, r2
 80050ea:	eb42 0303 	adc.w	r3, r2, r3
 80050ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80050f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050f8:	f7fb f884 	bl	8000204 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4b61      	ldr	r3, [pc, #388]	@ (8005288 <UART_SetConfig+0x2d4>)
 8005102:	fba3 2302 	umull	r2, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	011c      	lsls	r4, r3, #4
 800510a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005114:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005118:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	1891      	adds	r1, r2, r2
 8005122:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005124:	415b      	adcs	r3, r3
 8005126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800512c:	4641      	mov	r1, r8
 800512e:	eb12 0a01 	adds.w	sl, r2, r1
 8005132:	4649      	mov	r1, r9
 8005134:	eb43 0b01 	adc.w	fp, r3, r1
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005144:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800514c:	4692      	mov	sl, r2
 800514e:	469b      	mov	fp, r3
 8005150:	4643      	mov	r3, r8
 8005152:	eb1a 0303 	adds.w	r3, sl, r3
 8005156:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800515a:	464b      	mov	r3, r9
 800515c:	eb4b 0303 	adc.w	r3, fp, r3
 8005160:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005170:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005174:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005178:	460b      	mov	r3, r1
 800517a:	18db      	adds	r3, r3, r3
 800517c:	643b      	str	r3, [r7, #64]	@ 0x40
 800517e:	4613      	mov	r3, r2
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	647b      	str	r3, [r7, #68]	@ 0x44
 8005186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800518a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800518e:	f7fb f839 	bl	8000204 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4611      	mov	r1, r2
 8005198:	4b3b      	ldr	r3, [pc, #236]	@ (8005288 <UART_SetConfig+0x2d4>)
 800519a:	fba3 2301 	umull	r2, r3, r3, r1
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2264      	movs	r2, #100	@ 0x64
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	1acb      	subs	r3, r1, r3
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051ae:	4b36      	ldr	r3, [pc, #216]	@ (8005288 <UART_SetConfig+0x2d4>)
 80051b0:	fba3 2302 	umull	r2, r3, r3, r2
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051bc:	441c      	add	r4, r3
 80051be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051d8:	415b      	adcs	r3, r3
 80051da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051e0:	4641      	mov	r1, r8
 80051e2:	1851      	adds	r1, r2, r1
 80051e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80051e6:	4649      	mov	r1, r9
 80051e8:	414b      	adcs	r3, r1
 80051ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051f8:	4659      	mov	r1, fp
 80051fa:	00cb      	lsls	r3, r1, #3
 80051fc:	4651      	mov	r1, sl
 80051fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005202:	4651      	mov	r1, sl
 8005204:	00ca      	lsls	r2, r1, #3
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	4603      	mov	r3, r0
 800520c:	4642      	mov	r2, r8
 800520e:	189b      	adds	r3, r3, r2
 8005210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005214:	464b      	mov	r3, r9
 8005216:	460a      	mov	r2, r1
 8005218:	eb42 0303 	adc.w	r3, r2, r3
 800521c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800522c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005234:	460b      	mov	r3, r1
 8005236:	18db      	adds	r3, r3, r3
 8005238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800523a:	4613      	mov	r3, r2
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005246:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800524a:	f7fa ffdb 	bl	8000204 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4b0d      	ldr	r3, [pc, #52]	@ (8005288 <UART_SetConfig+0x2d4>)
 8005254:	fba3 1302 	umull	r1, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	2164      	movs	r1, #100	@ 0x64
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	3332      	adds	r3, #50	@ 0x32
 8005266:	4a08      	ldr	r2, [pc, #32]	@ (8005288 <UART_SetConfig+0x2d4>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	f003 0207 	and.w	r2, r3, #7
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4422      	add	r2, r4
 800527a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800527c:	e106      	b.n	800548c <UART_SetConfig+0x4d8>
 800527e:	bf00      	nop
 8005280:	40011000 	.word	0x40011000
 8005284:	40011400 	.word	0x40011400
 8005288:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800528c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005290:	2200      	movs	r2, #0
 8005292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005296:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800529a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800529e:	4642      	mov	r2, r8
 80052a0:	464b      	mov	r3, r9
 80052a2:	1891      	adds	r1, r2, r2
 80052a4:	6239      	str	r1, [r7, #32]
 80052a6:	415b      	adcs	r3, r3
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ae:	4641      	mov	r1, r8
 80052b0:	1854      	adds	r4, r2, r1
 80052b2:	4649      	mov	r1, r9
 80052b4:	eb43 0501 	adc.w	r5, r3, r1
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	00eb      	lsls	r3, r5, #3
 80052c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c6:	00e2      	lsls	r2, r4, #3
 80052c8:	4614      	mov	r4, r2
 80052ca:	461d      	mov	r5, r3
 80052cc:	4643      	mov	r3, r8
 80052ce:	18e3      	adds	r3, r4, r3
 80052d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052d4:	464b      	mov	r3, r9
 80052d6:	eb45 0303 	adc.w	r3, r5, r3
 80052da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052fa:	4629      	mov	r1, r5
 80052fc:	008b      	lsls	r3, r1, #2
 80052fe:	4621      	mov	r1, r4
 8005300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005304:	4621      	mov	r1, r4
 8005306:	008a      	lsls	r2, r1, #2
 8005308:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800530c:	f7fa ff7a 	bl	8000204 <__aeabi_uldivmod>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4b60      	ldr	r3, [pc, #384]	@ (8005498 <UART_SetConfig+0x4e4>)
 8005316:	fba3 2302 	umull	r2, r3, r3, r2
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	011c      	lsls	r4, r3, #4
 800531e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005322:	2200      	movs	r2, #0
 8005324:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005328:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800532c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005330:	4642      	mov	r2, r8
 8005332:	464b      	mov	r3, r9
 8005334:	1891      	adds	r1, r2, r2
 8005336:	61b9      	str	r1, [r7, #24]
 8005338:	415b      	adcs	r3, r3
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005340:	4641      	mov	r1, r8
 8005342:	1851      	adds	r1, r2, r1
 8005344:	6139      	str	r1, [r7, #16]
 8005346:	4649      	mov	r1, r9
 8005348:	414b      	adcs	r3, r1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005358:	4659      	mov	r1, fp
 800535a:	00cb      	lsls	r3, r1, #3
 800535c:	4651      	mov	r1, sl
 800535e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005362:	4651      	mov	r1, sl
 8005364:	00ca      	lsls	r2, r1, #3
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	4603      	mov	r3, r0
 800536c:	4642      	mov	r2, r8
 800536e:	189b      	adds	r3, r3, r2
 8005370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005374:	464b      	mov	r3, r9
 8005376:	460a      	mov	r2, r1
 8005378:	eb42 0303 	adc.w	r3, r2, r3
 800537c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	67bb      	str	r3, [r7, #120]	@ 0x78
 800538a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005398:	4649      	mov	r1, r9
 800539a:	008b      	lsls	r3, r1, #2
 800539c:	4641      	mov	r1, r8
 800539e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053a2:	4641      	mov	r1, r8
 80053a4:	008a      	lsls	r2, r1, #2
 80053a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053aa:	f7fa ff2b 	bl	8000204 <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	4b38      	ldr	r3, [pc, #224]	@ (8005498 <UART_SetConfig+0x4e4>)
 80053b6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2264      	movs	r2, #100	@ 0x64
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	1acb      	subs	r3, r1, r3
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	3332      	adds	r3, #50	@ 0x32
 80053c8:	4a33      	ldr	r2, [pc, #204]	@ (8005498 <UART_SetConfig+0x4e4>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d4:	441c      	add	r4, r3
 80053d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053da:	2200      	movs	r2, #0
 80053dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80053de:	677a      	str	r2, [r7, #116]	@ 0x74
 80053e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053e4:	4642      	mov	r2, r8
 80053e6:	464b      	mov	r3, r9
 80053e8:	1891      	adds	r1, r2, r2
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	415b      	adcs	r3, r3
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053f4:	4641      	mov	r1, r8
 80053f6:	1851      	adds	r1, r2, r1
 80053f8:	6039      	str	r1, [r7, #0]
 80053fa:	4649      	mov	r1, r9
 80053fc:	414b      	adcs	r3, r1
 80053fe:	607b      	str	r3, [r7, #4]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800540c:	4659      	mov	r1, fp
 800540e:	00cb      	lsls	r3, r1, #3
 8005410:	4651      	mov	r1, sl
 8005412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005416:	4651      	mov	r1, sl
 8005418:	00ca      	lsls	r2, r1, #3
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	4603      	mov	r3, r0
 8005420:	4642      	mov	r2, r8
 8005422:	189b      	adds	r3, r3, r2
 8005424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005426:	464b      	mov	r3, r9
 8005428:	460a      	mov	r2, r1
 800542a:	eb42 0303 	adc.w	r3, r2, r3
 800542e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	663b      	str	r3, [r7, #96]	@ 0x60
 800543a:	667a      	str	r2, [r7, #100]	@ 0x64
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005448:	4649      	mov	r1, r9
 800544a:	008b      	lsls	r3, r1, #2
 800544c:	4641      	mov	r1, r8
 800544e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005452:	4641      	mov	r1, r8
 8005454:	008a      	lsls	r2, r1, #2
 8005456:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800545a:	f7fa fed3 	bl	8000204 <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <UART_SetConfig+0x4e4>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	@ 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	3332      	adds	r3, #50	@ 0x32
 8005476:	4a08      	ldr	r2, [pc, #32]	@ (8005498 <UART_SetConfig+0x4e4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 020f 	and.w	r2, r3, #15
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4422      	add	r2, r4
 800548a:	609a      	str	r2, [r3, #8]
}
 800548c:	bf00      	nop
 800548e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005492:	46bd      	mov	sp, r7
 8005494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005498:	51eb851f 	.word	0x51eb851f

0800549c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800549c:	b084      	sub	sp, #16
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	f107 001c 	add.w	r0, r7, #28
 80054aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d122      	bne.n	80054fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f9c0 	bl	8005874 <USB_CoreReset>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
 80054f8:	e01a      	b.n	8005530 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9b4 	bl	8005874 <USB_CoreReset>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
 8005522:	e005      	b.n	8005530 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10b      	bne.n	800554e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f043 0206 	orr.w	r2, r3, #6
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800555a:	b004      	add	sp, #16
 800555c:	4770      	bx	lr

0800555e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f043 0201 	orr.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 0201 	bic.w	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d115      	bne.n	80055f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055d0:	2001      	movs	r0, #1
 80055d2:	f7fb fe0b 	bl	80011ec <HAL_Delay>
      ms++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f93a 	bl	8005856 <USB_GetMode>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d01e      	beq.n	8005626 <USB_SetCurrentMode+0x84>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b31      	cmp	r3, #49	@ 0x31
 80055ec:	d9f0      	bls.n	80055d0 <USB_SetCurrentMode+0x2e>
 80055ee:	e01a      	b.n	8005626 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d115      	bne.n	8005622 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005602:	2001      	movs	r0, #1
 8005604:	f7fb fdf2 	bl	80011ec <HAL_Delay>
      ms++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3301      	adds	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f921 	bl	8005856 <USB_GetMode>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <USB_SetCurrentMode+0x84>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b31      	cmp	r3, #49	@ 0x31
 800561e:	d9f0      	bls.n	8005602 <USB_SetCurrentMode+0x60>
 8005620:	e001      	b.n	8005626 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e005      	b.n	8005632 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b32      	cmp	r3, #50	@ 0x32
 800562a:	d101      	bne.n	8005630 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a13      	ldr	r2, [pc, #76]	@ (80056a0 <USB_FlushTxFifo+0x64>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d901      	bls.n	800565c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e01b      	b.n	8005694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	daf2      	bge.n	800564a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	019b      	lsls	r3, r3, #6
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a08      	ldr	r2, [pc, #32]	@ (80056a0 <USB_FlushTxFifo+0x64>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e006      	b.n	8005694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	d0f0      	beq.n	8005674 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	00030d40 	.word	0x00030d40

080056a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a11      	ldr	r2, [pc, #68]	@ (8005700 <USB_FlushRxFifo+0x5c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e018      	b.n	80056f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	daf2      	bge.n	80056b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2210      	movs	r2, #16
 80056d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a08      	ldr	r2, [pc, #32]	@ (8005700 <USB_FlushRxFifo+0x5c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e006      	b.n	80056f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d0f0      	beq.n	80056d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	00030d40 	.word	0x00030d40

08005704 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	@ 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	460b      	mov	r3, r1
 8005714:	71fb      	strb	r3, [r7, #7]
 8005716:	4613      	mov	r3, r2
 8005718:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005722:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d123      	bne.n	8005772 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800572a:	88bb      	ldrh	r3, [r7, #4]
 800572c:	3303      	adds	r3, #3
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e018      	b.n	800576a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	031a      	lsls	r2, r3, #12
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4413      	add	r3, r2
 8005740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005744:	461a      	mov	r2, r3
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	3301      	adds	r3, #1
 8005756:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3301      	adds	r3, #1
 8005762:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	3301      	adds	r3, #1
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	429a      	cmp	r2, r3
 8005770:	d3e2      	bcc.n	8005738 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3724      	adds	r7, #36	@ 0x24
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005780:	b480      	push	{r7}
 8005782:	b08b      	sub	sp, #44	@ 0x2c
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	b29b      	uxth	r3, r3
 800579c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	e014      	b.n	80057d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	3301      	adds	r3, #1
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	3301      	adds	r3, #1
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	3301      	adds	r3, #1
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	3301      	adds	r3, #1
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	3301      	adds	r3, #1
 80057d4:	623b      	str	r3, [r7, #32]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d3e6      	bcc.n	80057ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057de:	8bfb      	ldrh	r3, [r7, #30]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01e      	beq.n	8005822 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ee:	461a      	mov	r2, r3
 80057f0:	f107 0310 	add.w	r3, r7, #16
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	b2da      	uxtb	r2, r3
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	701a      	strb	r2, [r3, #0]
      i++;
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	3301      	adds	r3, #1
 800580e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	3301      	adds	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005816:	8bfb      	ldrh	r3, [r7, #30]
 8005818:	3b01      	subs	r3, #1
 800581a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800581c:	8bfb      	ldrh	r3, [r7, #30]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1ea      	bne.n	80057f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005824:	4618      	mov	r0, r3
 8005826:	372c      	adds	r7, #44	@ 0x2c
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4013      	ands	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005848:	68fb      	ldr	r3, [r7, #12]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0301 	and.w	r3, r3, #1
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3301      	adds	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a13      	ldr	r2, [pc, #76]	@ (80058d8 <USB_CoreReset+0x64>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e01b      	b.n	80058ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	daf2      	bge.n	8005880 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a09      	ldr	r2, [pc, #36]	@ (80058d8 <USB_CoreReset+0x64>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e006      	b.n	80058ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d0f0      	beq.n	80058aa <USB_CoreReset+0x36>

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	00030d40 	.word	0x00030d40

080058dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058dc:	b084      	sub	sp, #16
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80058ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058fc:	461a      	mov	r2, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005906:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d018      	beq.n	800594c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10a      	bne.n	8005936 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800592e:	f043 0304 	orr.w	r3, r3, #4
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e014      	b.n	8005960 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e009      	b.n	8005960 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005960:	2110      	movs	r1, #16
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fe6a 	bl	800563c <USB_FlushTxFifo>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fe96 	bl	80056a4 <USB_FlushRxFifo>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005982:	2300      	movs	r3, #0
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	e015      	b.n	80059b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005994:	461a      	mov	r2, r3
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3301      	adds	r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3e5      	bcc.n	8005988 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a13      	ldr	r2, [pc, #76]	@ (8005a30 <USB_HostInit+0x154>)
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <USB_HostInit+0x158>)
 80059e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80059ec:	e009      	b.n	8005a02 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2280      	movs	r2, #128	@ 0x80
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a10      	ldr	r2, [pc, #64]	@ (8005a38 <USB_HostInit+0x15c>)
 80059f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a0f      	ldr	r2, [pc, #60]	@ (8005a3c <USB_HostInit+0x160>)
 80059fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d105      	bne.n	8005a14 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f043 0210 	orr.w	r2, r3, #16
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	4b09      	ldr	r3, [pc, #36]	@ (8005a40 <USB_HostInit+0x164>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a2c:	b004      	add	sp, #16
 8005a2e:	4770      	bx	lr
 8005a30:	01000200 	.word	0x01000200
 8005a34:	00e00300 	.word	0x00e00300
 8005a38:	00600080 	.word	0x00600080
 8005a3c:	004000e0 	.word	0x004000e0
 8005a40:	a3200008 	.word	0xa3200008

08005a44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d107      	bne.n	8005a96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a92:	6053      	str	r3, [r2, #4]
 8005a94:	e009      	b.n	8005aaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d106      	bne.n	8005aaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005aa8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ad8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ae8:	2064      	movs	r0, #100	@ 0x64
 8005aea:	f7fb fb7f 	bl	80011ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005af6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005afa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005afc:	200a      	movs	r0, #10
 8005afe:	f7fb fb75 	bl	80011ec <HAL_Delay>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <USB_DriveVbus+0x44>
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d106      	bne.n	8005b50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5a:	d109      	bne.n	8005b70 <USB_DriveVbus+0x64>
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	0c5b      	lsrs	r3, r3, #17
 8005b9c:	f003 0303 	and.w	r3, r3, #3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	b29b      	uxth	r3, r3
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	70fb      	strb	r3, [r7, #3]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70bb      	strb	r3, [r7, #2]
 8005be6:	4613      	mov	r3, r2
 8005be8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295
 8005c04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d87e      	bhi.n	8005d0c <USB_HC_Init+0x13c>
 8005c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <USB_HC_Init+0x44>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005ccf 	.word	0x08005ccf
 8005c1c:	08005c25 	.word	0x08005c25
 8005c20:	08005c91 	.word	0x08005c91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c30:	461a      	mov	r2, r3
 8005c32:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005c36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	da10      	bge.n	8005c62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c60:	e057      	b.n	8005d12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d051      	beq.n	8005d12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c88:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005c8c:	60d3      	str	r3, [r2, #12]
      break;
 8005c8e:	e040      	b.n	8005d12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	da34      	bge.n	8005d16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ccc:	e023      	b.n	8005d16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f240 2325 	movw	r3, #549	@ 0x225
 8005ce0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ce2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da17      	bge.n	8005d1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d04:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005d08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d0a:	e006      	b.n	8005d1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	77fb      	strb	r3, [r7, #31]
      break;
 8005d10:	e004      	b.n	8005d1c <USB_HC_Init+0x14c>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <USB_HC_Init+0x14c>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <USB_HC_Init+0x14c>
      break;
 8005d1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d50:	6939      	ldr	r1, [r7, #16]
 8005d52:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d56:	4313      	orrs	r3, r2
 8005d58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da03      	bge.n	8005d76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	e001      	b.n	8005d7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff feff 	bl	8005b7e <USB_GetHostSpeed>
 8005d80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d106      	bne.n	8005d98 <USB_HC_Init+0x1c8>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d003      	beq.n	8005d98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e001      	b.n	8005d9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d9c:	787b      	ldrb	r3, [r7, #1]
 8005d9e:	059b      	lsls	r3, r3, #22
 8005da0:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005da4:	78bb      	ldrb	r3, [r7, #2]
 8005da6:	02db      	lsls	r3, r3, #11
 8005da8:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005db2:	049b      	lsls	r3, r3, #18
 8005db4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005db8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dba:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	0159      	lsls	r1, r3, #5
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	440b      	add	r3, r1
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dd8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005dda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d003      	beq.n	8005dea <USB_HC_Init+0x21a>
 8005de2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d10f      	bne.n	8005e0a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	@ 0x30
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d02d      	beq.n	8005e9a <USB_HC_StartXfer+0x86>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	791b      	ldrb	r3, [r3, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d129      	bne.n	8005e9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d117      	bne.n	8005e7c <USB_HC_StartXfer+0x68>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	79db      	ldrb	r3, [r3, #7]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <USB_HC_StartXfer+0x48>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	79db      	ldrb	r3, [r3, #7]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d10f      	bne.n	8005e7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <USB_HC_StartXfer+0x86>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	795b      	ldrb	r3, [r3, #5]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fa0f 	bl	80062b4 <USB_DoPing>
      return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e0f8      	b.n	800608c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d018      	beq.n	8005ed4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	8912      	ldrh	r2, [r2, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	3b01      	subs	r3, #1
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	8912      	ldrh	r2, [r2, #8]
 8005eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eb6:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8005eb8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005eba:	8b7b      	ldrh	r3, [r7, #26]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d90b      	bls.n	8005ed8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005ec0:	8b7b      	ldrh	r3, [r7, #26]
 8005ec2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ec4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	8912      	ldrh	r2, [r2, #8]
 8005eca:	fb03 f202 	mul.w	r2, r3, r2
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	611a      	str	r2, [r3, #16]
 8005ed2:	e001      	b.n	8005ed8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ee0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	8912      	ldrh	r2, [r2, #8]
 8005ee6:	fb03 f202 	mul.w	r2, r3, r2
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	611a      	str	r2, [r3, #16]
 8005eee:	e003      	b.n	8005ef8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f02:	04d9      	lsls	r1, r3, #19
 8005f04:	4b63      	ldr	r3, [pc, #396]	@ (8006094 <USB_HC_StartXfer+0x280>)
 8005f06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	7a9b      	ldrb	r3, [r3, #10]
 8005f0e:	075b      	lsls	r3, r3, #29
 8005f10:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f14:	69f9      	ldr	r1, [r7, #28]
 8005f16:	0148      	lsls	r0, r1, #5
 8005f18:	6a39      	ldr	r1, [r7, #32]
 8005f1a:	4401      	add	r1, r0
 8005f1c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68d9      	ldr	r1, [r3, #12]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3a:	460a      	mov	r2, r1
 8005f3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf0c      	ite	eq
 8005f4e:	2301      	moveq	r3, #1
 8005f50:	2300      	movne	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	7e7b      	ldrb	r3, [r7, #25]
 8005f86:	075b      	lsls	r3, r3, #29
 8005f88:	69f9      	ldr	r1, [r7, #28]
 8005f8a:	0148      	lsls	r0, r1, #5
 8005f8c:	6a39      	ldr	r1, [r7, #32]
 8005f8e:	4401      	add	r1, r0
 8005f90:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	e003      	b.n	8005fca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fc8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fd0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fde:	461a      	mov	r2, r3
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e04e      	b.n	800608c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	78db      	ldrb	r3, [r3, #3]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d149      	bne.n	800608a <USB_HC_StartXfer+0x276>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d045      	beq.n	800608a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	79db      	ldrb	r3, [r3, #7]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d830      	bhi.n	8006068 <USB_HC_StartXfer+0x254>
 8006006:	a201      	add	r2, pc, #4	@ (adr r2, 800600c <USB_HC_StartXfer+0x1f8>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800601d 	.word	0x0800601d
 8006010:	08006041 	.word	0x08006041
 8006014:	0800601d 	.word	0x0800601d
 8006018:	08006041 	.word	0x08006041
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	3303      	adds	r3, #3
 8006022:	089b      	lsrs	r3, r3, #2
 8006024:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006026:	8afa      	ldrh	r2, [r7, #22]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	b29b      	uxth	r3, r3
 800602e:	429a      	cmp	r2, r3
 8006030:	d91c      	bls.n	800606c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	619a      	str	r2, [r3, #24]
        }
        break;
 800603e:	e015      	b.n	800606c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	3303      	adds	r3, #3
 8006046:	089b      	lsrs	r3, r3, #2
 8006048:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800604a:	8afa      	ldrh	r2, [r7, #22]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	b29b      	uxth	r3, r3
 8006056:	429a      	cmp	r2, r3
 8006058:	d90a      	bls.n	8006070 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	619a      	str	r2, [r3, #24]
        }
        break;
 8006066:	e003      	b.n	8006070 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006068:	bf00      	nop
 800606a:	e002      	b.n	8006072 <USB_HC_StartXfer+0x25e>
        break;
 800606c:	bf00      	nop
 800606e:	e000      	b.n	8006072 <USB_HC_StartXfer+0x25e>
        break;
 8006070:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	68d9      	ldr	r1, [r3, #12]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	785a      	ldrb	r2, [r3, #1]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	b29b      	uxth	r3, r3
 8006080:	2000      	movs	r0, #0
 8006082:	9000      	str	r0, [sp, #0]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff fb3d 	bl	8005704 <USB_WritePacket>
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3728      	adds	r7, #40	@ 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	1ff80000 	.word	0x1ff80000

08006098 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	b29b      	uxth	r3, r3
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b089      	sub	sp, #36	@ 0x24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	0c9b      	lsrs	r3, r3, #18
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	0fdb      	lsrs	r3, r3, #31
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b20      	cmp	r3, #32
 8006108:	d104      	bne.n	8006114 <USB_HC_Halt+0x5a>
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	e0c8      	b.n	80062a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <USB_HC_Halt+0x66>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d163      	bne.n	80061e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	440a      	add	r2, r1
 8006136:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800613a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800613e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 80ab 	bne.w	80062a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d133      	bne.n	80061c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	440a      	add	r2, r1
 8006170:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006178:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	440a      	add	r2, r1
 8006190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006198:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061a6:	d81d      	bhi.n	80061e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061be:	d0ec      	beq.n	800619a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061c0:	e070      	b.n	80062a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061e2:	e05f      	b.n	80062a4 <USB_HC_Halt+0x1ea>
            break;
 80061e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061e6:	e05d      	b.n	80062a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006202:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006206:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d133      	bne.n	8006280 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	440a      	add	r2, r1
 800622e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006232:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006236:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	440a      	add	r2, r1
 800624e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006252:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006256:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006264:	d81d      	bhi.n	80062a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800627c:	d0ec      	beq.n	8006258 <USB_HC_Halt+0x19e>
 800627e:	e011      	b.n	80062a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800629a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e000      	b.n	80062a4 <USB_HC_Halt+0x1ea>
          break;
 80062a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	@ 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80062c8:	2301      	movs	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	04da      	lsls	r2, r3, #19
 80062d0:	4b15      	ldr	r3, [pc, #84]	@ (8006328 <USB_DoPing+0x74>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006304:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006312:	461a      	mov	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	1ff80000 	.word	0x1ff80000

0800632c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff f91d 	bl	8005580 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006346:	2110      	movs	r1, #16
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff f977 	bl	800563c <USB_FlushTxFifo>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff f9a3 	bl	80056a4 <USB_FlushRxFifo>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e01f      	b.n	80063ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006384:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800638c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006394:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a2:	461a      	mov	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b0f      	cmp	r3, #15
 80063b2:	d9dc      	bls.n	800636e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063b4:	2300      	movs	r3, #0
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	e034      	b.n	8006424 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ee:	461a      	mov	r2, r3
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006400:	d80c      	bhi.n	800641c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006418:	d0ec      	beq.n	80063f4 <USB_StopHost+0xc8>
 800641a:	e000      	b.n	800641e <USB_StopHost+0xf2>
        break;
 800641c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	3301      	adds	r3, #1
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d9c7      	bls.n	80063ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006430:	461a      	mov	r2, r3
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f04f 32ff 	mov.w	r2, #4294967295
 800643e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff f88c 	bl	800555e <USB_EnableGlobalInt>

  return ret;
 8006446:	7ffb      	ldrb	r3, [r7, #31]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b089      	sub	sp, #36	@ 0x24
 8006454:	af04      	add	r7, sp, #16
 8006456:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006458:	2301      	movs	r3, #1
 800645a:	2202      	movs	r2, #2
 800645c:	2102      	movs	r1, #2
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fc66 	bl	8006d30 <USBH_FindInterface>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2bff      	cmp	r3, #255	@ 0xff
 800646c:	d002      	beq.n	8006474 <USBH_CDC_InterfaceInit+0x24>
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d901      	bls.n	8006478 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006474:	2302      	movs	r3, #2
 8006476:	e13d      	b.n	80066f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fc3b 	bl	8006cf8 <USBH_SelectInterface>
 8006482:	4603      	mov	r3, r0
 8006484:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800648c:	2302      	movs	r3, #2
 800648e:	e131      	b.n	80066f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006496:	2050      	movs	r0, #80	@ 0x50
 8006498:	f002 faa2 	bl	80089e0 <malloc>
 800649c:	4603      	mov	r3, r0
 800649e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80064b0:	2302      	movs	r3, #2
 80064b2:	e11f      	b.n	80066f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80064b4:	2250      	movs	r2, #80	@ 0x50
 80064b6:	2100      	movs	r1, #0
 80064b8:	68b8      	ldr	r0, [r7, #8]
 80064ba:	f002 fb4f 	bl	8008b5c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	211a      	movs	r1, #26
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b25b      	sxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da15      	bge.n	8006502 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	211a      	movs	r1, #26
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	211a      	movs	r1, #26
 80064f2:	fb01 f303 	mul.w	r3, r1, r3
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80064fc:	881a      	ldrh	r2, [r3, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 ff1c 	bl	8008346 <USBH_AllocPipe>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	7819      	ldrb	r1, [r3, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	7858      	ldrb	r0, [r3, #1]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	8952      	ldrh	r2, [r2, #10]
 800652e:	9202      	str	r2, [sp, #8]
 8006530:	2203      	movs	r2, #3
 8006532:	9201      	str	r2, [sp, #4]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4623      	mov	r3, r4
 8006538:	4602      	mov	r2, r0
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 fed4 	bl	80082e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2200      	movs	r2, #0
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f002 f9e2 	bl	8008912 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800654e:	2300      	movs	r3, #0
 8006550:	2200      	movs	r2, #0
 8006552:	210a      	movs	r1, #10
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fbeb 	bl	8006d30 <USBH_FindInterface>
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2bff      	cmp	r3, #255	@ 0xff
 8006562:	d002      	beq.n	800656a <USBH_CDC_InterfaceInit+0x11a>
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d901      	bls.n	800656e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800656a:	2302      	movs	r3, #2
 800656c:	e0c2      	b.n	80066f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	211a      	movs	r1, #26
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	4413      	add	r3, r2
 800657a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	b25b      	sxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	da16      	bge.n	80065b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	211a      	movs	r1, #26
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	4413      	add	r3, r2
 8006592:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006596:	781a      	ldrb	r2, [r3, #0]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	211a      	movs	r1, #26
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80065ac:	881a      	ldrh	r2, [r3, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	835a      	strh	r2, [r3, #26]
 80065b2:	e015      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	211a      	movs	r1, #26
 80065ba:	fb01 f303 	mul.w	r3, r1, r3
 80065be:	4413      	add	r3, r2
 80065c0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	211a      	movs	r1, #26
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	211a      	movs	r1, #26
 80065e6:	fb01 f303 	mul.w	r3, r1, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b25b      	sxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da16      	bge.n	8006626 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	211a      	movs	r1, #26
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	211a      	movs	r1, #26
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	835a      	strh	r2, [r3, #26]
 8006624:	e015      	b.n	8006652 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	211a      	movs	r1, #26
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	4413      	add	r3, r2
 8006632:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	211a      	movs	r1, #26
 8006642:	fb01 f303 	mul.w	r3, r1, r3
 8006646:	4413      	add	r3, r2
 8006648:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800664c:	881a      	ldrh	r2, [r3, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	7b9b      	ldrb	r3, [r3, #14]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fe74 	bl	8008346 <USBH_AllocPipe>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	7bdb      	ldrb	r3, [r3, #15]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fe6a 	bl	8008346 <USBH_AllocPipe>
 8006672:	4603      	mov	r3, r0
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	7b59      	ldrb	r1, [r3, #13]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	7b98      	ldrb	r0, [r3, #14]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	8b12      	ldrh	r2, [r2, #24]
 8006692:	9202      	str	r2, [sp, #8]
 8006694:	2202      	movs	r2, #2
 8006696:	9201      	str	r2, [sp, #4]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	4623      	mov	r3, r4
 800669c:	4602      	mov	r2, r0
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fe22 	bl	80082e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	7b19      	ldrb	r1, [r3, #12]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	7bd8      	ldrb	r0, [r3, #15]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	8b52      	ldrh	r2, [r2, #26]
 80066bc:	9202      	str	r2, [sp, #8]
 80066be:	2202      	movs	r2, #2
 80066c0:	9201      	str	r2, [sp, #4]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	4623      	mov	r3, r4
 80066c6:	4602      	mov	r2, r0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 fe0d 	bl	80082e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	7b5b      	ldrb	r3, [r3, #13]
 80066da:	2200      	movs	r2, #0
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f002 f917 	bl	8008912 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	7b1b      	ldrb	r3, [r3, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f002 f910 	bl	8008912 <USBH_LL_SetToggle>

  return USBH_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd90      	pop	{r4, r7, pc}

080066fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fe02 	bl	8008326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fe2d 	bl	8008388 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	7b1b      	ldrb	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00e      	beq.n	800675a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	7b1b      	ldrb	r3, [r3, #12]
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fdef 	bl	8008326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	7b1b      	ldrb	r3, [r3, #12]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 fe1a 	bl	8008388 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	7b5b      	ldrb	r3, [r3, #13]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	7b5b      	ldrb	r3, [r3, #13]
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 fddc 	bl	8008326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	7b5b      	ldrb	r3, [r3, #13]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 fe07 	bl	8008388 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	4618      	mov	r0, r3
 8006796:	f002 f92b 	bl	80089f0 <free>
    phost->pActiveClass->pData = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067a0:	2200      	movs	r2, #0
 80067a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3340      	adds	r3, #64	@ 0x40
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f8b1 	bl	800692e <GetLineCoding>
 80067cc:	4603      	mov	r3, r0
 80067ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80067d0:	7afb      	ldrb	r3, [r7, #11]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d105      	bne.n	80067e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80067dc:	2102      	movs	r1, #2
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80067e2:	7afb      	ldrb	r3, [r7, #11]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800680c:	2b04      	cmp	r3, #4
 800680e:	d877      	bhi.n	8006900 <USBH_CDC_Process+0x114>
 8006810:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <USBH_CDC_Process+0x2c>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800682d 	.word	0x0800682d
 800681c:	08006833 	.word	0x08006833
 8006820:	08006863 	.word	0x08006863
 8006824:	080068d7 	.word	0x080068d7
 8006828:	080068e5 	.word	0x080068e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	e06d      	b.n	800690e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f897 	bl	800696c <SetLineCoding>
 800683e:	4603      	mov	r3, r0
 8006840:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006850:	e058      	b.n	8006904 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d055      	beq.n	8006904 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2204      	movs	r2, #4
 800685c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006860:	e050      	b.n	8006904 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	3340      	adds	r3, #64	@ 0x40
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f860 	bl	800692e <GetLineCoding>
 800686e:	4603      	mov	r3, r0
 8006870:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d126      	bne.n	80068c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800688a:	791b      	ldrb	r3, [r3, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d13b      	bne.n	8006908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800689c:	429a      	cmp	r2, r3
 800689e:	d133      	bne.n	8006908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d12b      	bne.n	8006908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d124      	bne.n	8006908 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f958 	bl	8006b74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068c4:	e020      	b.n	8006908 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d01d      	beq.n	8006908 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2204      	movs	r2, #4
 80068d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80068d4:	e018      	b.n	8006908 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f867 	bl	80069aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8da 	bl	8006a96 <CDC_ProcessReception>
      break;
 80068e2:	e014      	b.n	800690e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80068e4:	2100      	movs	r1, #0
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 ffe7 	bl	80078ba <USBH_ClrFeature>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80068fe:	e005      	b.n	800690c <USBH_CDC_Process+0x120>

    default:
      break;
 8006900:	bf00      	nop
 8006902:	e004      	b.n	800690e <USBH_CDC_Process+0x122>
      break;
 8006904:	bf00      	nop
 8006906:	e002      	b.n	800690e <USBH_CDC_Process+0x122>
      break;
 8006908:	bf00      	nop
 800690a:	e000      	b.n	800690e <USBH_CDC_Process+0x122>
      break;
 800690c:	bf00      	nop

  }

  return status;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	22a1      	movs	r2, #161	@ 0xa1
 800693c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2221      	movs	r2, #33	@ 0x21
 8006942:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2207      	movs	r2, #7
 8006954:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2207      	movs	r2, #7
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fa72 	bl	8007e46 <USBH_CtlReq>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2221      	movs	r2, #33	@ 0x21
 800697a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2207      	movs	r2, #7
 8006992:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2207      	movs	r2, #7
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fa53 	bl	8007e46 <USBH_CtlReq>
 80069a0:	4603      	mov	r3, r0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b086      	sub	sp, #24
 80069ae:	af02      	add	r7, sp, #8
 80069b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069bc:	2300      	movs	r3, #0
 80069be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d002      	beq.n	80069d0 <CDC_ProcessTransmission+0x26>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d023      	beq.n	8006a16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80069ce:	e05e      	b.n	8006a8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	8b12      	ldrh	r2, [r2, #24]
 80069d8:	4293      	cmp	r3, r2
 80069da:	d90b      	bls.n	80069f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	69d9      	ldr	r1, [r3, #28]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8b1a      	ldrh	r2, [r3, #24]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	7b5b      	ldrb	r3, [r3, #13]
 80069e8:	2001      	movs	r0, #1
 80069ea:	9000      	str	r0, [sp, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 fc38 	bl	8008262 <USBH_BulkSendData>
 80069f2:	e00b      	b.n	8006a0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	7b5b      	ldrb	r3, [r3, #13]
 8006a02:	2001      	movs	r0, #1
 8006a04:	9000      	str	r0, [sp, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fc2b 	bl	8008262 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006a14:	e03b      	b.n	8006a8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	7b5b      	ldrb	r3, [r3, #13]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 ff57 	bl	80088d0 <USBH_LL_GetURBState>
 8006a22:	4603      	mov	r3, r0
 8006a24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d128      	bne.n	8006a7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	8b12      	ldrh	r2, [r2, #24]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d90e      	bls.n	8006a56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	8b12      	ldrh	r2, [r2, #24]
 8006a40:	1a9a      	subs	r2, r3, r2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	8b12      	ldrh	r2, [r2, #24]
 8006a4e:	441a      	add	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	61da      	str	r2, [r3, #28]
 8006a54:	e002      	b.n	8006a5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006a6c:	e00e      	b.n	8006a8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f868 	bl	8006b4c <USBH_CDC_TransmitCallback>
      break;
 8006a7c:	e006      	b.n	8006a8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006a7e:	7afb      	ldrb	r3, [r7, #11]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d103      	bne.n	8006a8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006a8c:	bf00      	nop
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b086      	sub	sp, #24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d002      	beq.n	8006abc <CDC_ProcessReception+0x26>
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d00e      	beq.n	8006ad8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006aba:	e043      	b.n	8006b44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	6a19      	ldr	r1, [r3, #32]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	8b5a      	ldrh	r2, [r3, #26]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	7b1b      	ldrb	r3, [r3, #12]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 fbef 	bl	80082ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2204      	movs	r2, #4
 8006ad2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006ad6:	e035      	b.n	8006b44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fef6 	bl	80088d0 <USBH_LL_GetURBState>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ae8:	7cfb      	ldrb	r3, [r7, #19]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d129      	bne.n	8006b42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	7b1b      	ldrb	r3, [r3, #12]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fe59 	bl	80087ac <USBH_LL_GetLastXferSize>
 8006afa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d016      	beq.n	8006b34 <CDC_ProcessReception+0x9e>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	8b5b      	ldrh	r3, [r3, #26]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d910      	bls.n	8006b34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad2      	subs	r2, r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6a1a      	ldr	r2, [r3, #32]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	441a      	add	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006b32:	e006      	b.n	8006b42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f80f 	bl	8006b60 <USBH_CDC_ReceiveCallback>
      break;
 8006b42:	bf00      	nop
  }
}
 8006b44:	bf00      	nop
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e029      	b.n	8006bf4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	79fa      	ldrb	r2, [r7, #7]
 8006ba4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f81f 	bl	8006bfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f001 fd29 	bl	8008644 <USBH_LL_Init>

  return USBH_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e009      	b.n	8006c22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	33e0      	adds	r3, #224	@ 0xe0
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	2200      	movs	r2, #0
 8006c1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b0f      	cmp	r3, #15
 8006c26:	d9f2      	bls.n	8006c0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e009      	b.n	8006c42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c48:	d3f1      	bcc.n	8006c2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2240      	movs	r2, #64	@ 0x40
 8006c6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d016      	beq.n	8006ce6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10e      	bne.n	8006ce0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006cc8:	1c59      	adds	r1, r3, #1
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	33de      	adds	r3, #222	@ 0xde
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e004      	b.n	8006cea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	e001      	b.n	8006cea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d204      	bcs.n	8006d1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006d1c:	e001      	b.n	8006d22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	70fb      	strb	r3, [r7, #3]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70bb      	strb	r3, [r7, #2]
 8006d46:	4613      	mov	r3, r2
 8006d48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006d58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d5a:	e025      	b.n	8006da8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	221a      	movs	r2, #26
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	3308      	adds	r3, #8
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	795b      	ldrb	r3, [r3, #5]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d002      	beq.n	8006d7e <USBH_FindInterface+0x4e>
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2bff      	cmp	r3, #255	@ 0xff
 8006d7c:	d111      	bne.n	8006da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d82:	78ba      	ldrb	r2, [r7, #2]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d002      	beq.n	8006d8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d88:	78bb      	ldrb	r3, [r7, #2]
 8006d8a:	2bff      	cmp	r3, #255	@ 0xff
 8006d8c:	d109      	bne.n	8006da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d92:	787a      	ldrb	r2, [r7, #1]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d002      	beq.n	8006d9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d98:	787b      	ldrb	r3, [r7, #1]
 8006d9a:	2bff      	cmp	r3, #255	@ 0xff
 8006d9c:	d101      	bne.n	8006da2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	e006      	b.n	8006db0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	3301      	adds	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d9d6      	bls.n	8006d5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006dae:	23ff      	movs	r3, #255	@ 0xff
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fc79 	bl	80086bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006dca:	2101      	movs	r1, #1
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fd92 	bl	80088f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af04      	add	r7, sp, #16
 8006de2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d102      	bne.n	8006dfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b0b      	cmp	r3, #11
 8006e06:	f200 81bb 	bhi.w	8007180 <USBH_Process+0x3a4>
 8006e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <USBH_Process+0x34>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e41 	.word	0x08006e41
 8006e14:	08006e73 	.word	0x08006e73
 8006e18:	08006edb 	.word	0x08006edb
 8006e1c:	0800711b 	.word	0x0800711b
 8006e20:	08007181 	.word	0x08007181
 8006e24:	08006f7b 	.word	0x08006f7b
 8006e28:	080070c1 	.word	0x080070c1
 8006e2c:	08006fb1 	.word	0x08006fb1
 8006e30:	08006fd1 	.word	0x08006fd1
 8006e34:	08006fef 	.word	0x08006fef
 8006e38:	08007033 	.word	0x08007033
 8006e3c:	08007103 	.word	0x08007103
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 819b 	beq.w	8007184 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006e54:	20c8      	movs	r0, #200	@ 0xc8
 8006e56:	f001 fd8c 	bl	8008972 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fc8b 	bl	8008776 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e70:	e188      	b.n	8007184 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d107      	bne.n	8006e8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e8a:	e18a      	b.n	80071a2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e96:	d914      	bls.n	8006ec2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d903      	bls.n	8006eba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	220d      	movs	r2, #13
 8006eb6:	701a      	strb	r2, [r3, #0]
      break;
 8006eb8:	e173      	b.n	80071a2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e16f      	b.n	80071a2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006ec8:	f103 020a 	add.w	r2, r3, #10
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006ed2:	200a      	movs	r0, #10
 8006ed4:	f001 fd4d 	bl	8008972 <USBH_Delay>
      break;
 8006ed8:	e163      	b.n	80071a2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eea:	2104      	movs	r1, #4
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ef0:	2064      	movs	r0, #100	@ 0x64
 8006ef2:	f001 fd3e 	bl	8008972 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fc16 	bl	8008728 <USBH_LL_GetSpeed>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2205      	movs	r2, #5
 8006f0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fa19 	bl	8008346 <USBH_AllocPipe>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f1c:	2180      	movs	r1, #128	@ 0x80
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 fa11 	bl	8008346 <USBH_AllocPipe>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7919      	ldrb	r1, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f40:	9202      	str	r2, [sp, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	9201      	str	r2, [sp, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2280      	movs	r2, #128	@ 0x80
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f9cb 	bl	80082e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7959      	ldrb	r1, [r3, #5]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f66:	9202      	str	r2, [sp, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	9201      	str	r2, [sp, #4]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2200      	movs	r2, #0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 f9b8 	bl	80082e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f78:	e113      	b.n	80071a2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f916 	bl	80071ac <USBH_HandleEnum>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 80fd 	bne.w	8007188 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d103      	bne.n	8006fa8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fa6:	e0ef      	b.n	8007188 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2207      	movs	r2, #7
 8006fac:	701a      	strb	r2, [r3, #0]
      break;
 8006fae:	e0eb      	b.n	8007188 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80e8 	beq.w	800718c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2208      	movs	r2, #8
 8006fcc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006fce:	e0dd      	b.n	800718c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc27 	bl	800782c <USBH_SetCfg>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 80d5 	bne.w	8007190 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2209      	movs	r2, #9
 8006fea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fec:	e0d0      	b.n	8007190 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006ff4:	f003 0320 	and.w	r3, r3, #32
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fc37 	bl	8007872 <USBH_SetFeature>
 8007004:	4603      	mov	r3, r0
 8007006:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	220a      	movs	r2, #10
 8007014:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007016:	e0bd      	b.n	8007194 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b03      	cmp	r3, #3
 800701e:	f040 80b9 	bne.w	8007194 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	220a      	movs	r2, #10
 8007026:	701a      	strb	r2, [r3, #0]
      break;
 8007028:	e0b4      	b.n	8007194 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	220a      	movs	r2, #10
 800702e:	701a      	strb	r2, [r3, #0]
      break;
 8007030:	e0b0      	b.n	8007194 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80ad 	beq.w	8007198 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e016      	b.n	800707a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800704c:	7bfa      	ldrb	r2, [r7, #15]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32de      	adds	r2, #222	@ 0xde
 8007052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007056:	791a      	ldrb	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800705e:	429a      	cmp	r2, r3
 8007060:	d108      	bne.n	8007074 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007062:	7bfa      	ldrb	r2, [r7, #15]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	32de      	adds	r2, #222	@ 0xde
 8007068:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007072:	e005      	b.n	8007080 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	3301      	adds	r3, #1
 8007078:	73fb      	strb	r3, [r7, #15]
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0e5      	beq.n	800704c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2206      	movs	r2, #6
 80070a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070a8:	2103      	movs	r1, #3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070ae:	e073      	b.n	8007198 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	220d      	movs	r2, #13
 80070b4:	701a      	strb	r2, [r3, #0]
      break;
 80070b6:	e06f      	b.n	8007198 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	220d      	movs	r2, #13
 80070bc:	701a      	strb	r2, [r3, #0]
      break;
 80070be:	e06b      	b.n	8007198 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d017      	beq.n	80070fa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d103      	bne.n	80070ea <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	220b      	movs	r2, #11
 80070e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070e8:	e058      	b.n	800719c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d154      	bne.n	800719c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	220d      	movs	r2, #13
 80070f6:	701a      	strb	r2, [r3, #0]
      break;
 80070f8:	e050      	b.n	800719c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	220d      	movs	r2, #13
 80070fe:	701a      	strb	r2, [r3, #0]
      break;
 8007100:	e04c      	b.n	800719c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d049      	beq.n	80071a0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
      }
      break;
 8007118:	e042      	b.n	80071a0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff fd6a 	bl	8006bfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007156:	2105      	movs	r1, #5
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d107      	bne.n	8007178 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fe23 	bl	8006dbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007176:	e014      	b.n	80071a2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fa9f 	bl	80086bc <USBH_LL_Start>
      break;
 800717e:	e010      	b.n	80071a2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007180:	bf00      	nop
 8007182:	e00e      	b.n	80071a2 <USBH_Process+0x3c6>
      break;
 8007184:	bf00      	nop
 8007186:	e00c      	b.n	80071a2 <USBH_Process+0x3c6>
      break;
 8007188:	bf00      	nop
 800718a:	e00a      	b.n	80071a2 <USBH_Process+0x3c6>
    break;
 800718c:	bf00      	nop
 800718e:	e008      	b.n	80071a2 <USBH_Process+0x3c6>
      break;
 8007190:	bf00      	nop
 8007192:	e006      	b.n	80071a2 <USBH_Process+0x3c6>
      break;
 8007194:	bf00      	nop
 8007196:	e004      	b.n	80071a2 <USBH_Process+0x3c6>
      break;
 8007198:	bf00      	nop
 800719a:	e002      	b.n	80071a2 <USBH_Process+0x3c6>
      break;
 800719c:	bf00      	nop
 800719e:	e000      	b.n	80071a2 <USBH_Process+0x3c6>
      break;
 80071a0:	bf00      	nop
  }
  return USBH_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af04      	add	r7, sp, #16
 80071b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	2b07      	cmp	r3, #7
 80071c2:	f200 81bd 	bhi.w	8007540 <USBH_HandleEnum+0x394>
 80071c6:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <USBH_HandleEnum+0x20>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	080071ed 	.word	0x080071ed
 80071d0:	080072a7 	.word	0x080072a7
 80071d4:	08007311 	.word	0x08007311
 80071d8:	0800739b 	.word	0x0800739b
 80071dc:	08007405 	.word	0x08007405
 80071e0:	08007475 	.word	0x08007475
 80071e4:	080074bb 	.word	0x080074bb
 80071e8:	08007501 	.word	0x08007501
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80071ec:	2108      	movs	r1, #8
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa4c 	bl	800768c <USBH_Get_DevDesc>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d12e      	bne.n	800725c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7919      	ldrb	r1, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007222:	9202      	str	r2, [sp, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	9201      	str	r2, [sp, #4]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4603      	mov	r3, r0
 800722c:	2280      	movs	r2, #128	@ 0x80
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 f85a 	bl	80082e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7959      	ldrb	r1, [r3, #5]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007248:	9202      	str	r2, [sp, #8]
 800724a:	2200      	movs	r2, #0
 800724c:	9201      	str	r2, [sp, #4]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4603      	mov	r3, r0
 8007252:	2200      	movs	r2, #0
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f847 	bl	80082e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800725a:	e173      	b.n	8007544 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b03      	cmp	r3, #3
 8007260:	f040 8170 	bne.w	8007544 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800726a:	3301      	adds	r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800727a:	2b03      	cmp	r3, #3
 800727c:	d903      	bls.n	8007286 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	220d      	movs	r2, #13
 8007282:	701a      	strb	r2, [r3, #0]
      break;
 8007284:	e15e      	b.n	8007544 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f87b 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	791b      	ldrb	r3, [r3, #4]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f875 	bl	8008388 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
      break;
 80072a4:	e14e      	b.n	8007544 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80072a6:	2112      	movs	r1, #18
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9ef 	bl	800768c <USBH_Get_DevDesc>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072be:	e143      	b.n	8007548 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	f040 8140 	bne.w	8007548 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072ce:	3301      	adds	r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d903      	bls.n	80072ea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	220d      	movs	r2, #13
 80072e6:	701a      	strb	r2, [r3, #0]
      break;
 80072e8:	e12e      	b.n	8007548 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	795b      	ldrb	r3, [r3, #5]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 f849 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	791b      	ldrb	r3, [r3, #4]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f843 	bl	8008388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
      break;
 800730e:	e11b      	b.n	8007548 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007310:	2101      	movs	r1, #1
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa66 	bl	80077e4 <USBH_SetAddress>
 8007318:	4603      	mov	r3, r0
 800731a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d130      	bne.n	8007384 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007322:	2002      	movs	r0, #2
 8007324:	f001 fb25 	bl	8008972 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2203      	movs	r2, #3
 8007334:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7919      	ldrb	r1, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800734a:	9202      	str	r2, [sp, #8]
 800734c:	2200      	movs	r2, #0
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4603      	mov	r3, r0
 8007354:	2280      	movs	r2, #128	@ 0x80
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 ffc6 	bl	80082e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	7959      	ldrb	r1, [r3, #5]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007370:	9202      	str	r2, [sp, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	9201      	str	r2, [sp, #4]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4603      	mov	r3, r0
 800737a:	2200      	movs	r2, #0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 ffb3 	bl	80082e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007382:	e0e3      	b.n	800754c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	2b03      	cmp	r3, #3
 8007388:	f040 80e0 	bne.w	800754c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	220d      	movs	r2, #13
 8007390:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	705a      	strb	r2, [r3, #1]
      break;
 8007398:	e0d8      	b.n	800754c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800739a:	2109      	movs	r1, #9
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f99d 	bl	80076dc <USBH_Get_CfgDesc>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2204      	movs	r2, #4
 80073b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073b2:	e0cd      	b.n	8007550 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	f040 80ca 	bne.w	8007550 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80073c2:	3301      	adds	r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d903      	bls.n	80073de <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	220d      	movs	r2, #13
 80073da:	701a      	strb	r2, [r3, #0]
      break;
 80073dc:	e0b8      	b.n	8007550 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	795b      	ldrb	r3, [r3, #5]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 ffcf 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	791b      	ldrb	r3, [r3, #4]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 ffc9 	bl	8008388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	e0a5      	b.n	8007550 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f965 	bl	80076dc <USBH_Get_CfgDesc>
 8007412:	4603      	mov	r3, r0
 8007414:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2205      	movs	r2, #5
 8007420:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007422:	e097      	b.n	8007554 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b03      	cmp	r3, #3
 8007428:	f040 8094 	bne.w	8007554 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007432:	3301      	adds	r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007442:	2b03      	cmp	r3, #3
 8007444:	d903      	bls.n	800744e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	220d      	movs	r2, #13
 800744a:	701a      	strb	r2, [r3, #0]
      break;
 800744c:	e082      	b.n	8007554 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 ff97 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	791b      	ldrb	r3, [r3, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 ff91 	bl	8008388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
      break;
 8007472:	e06f      	b.n	8007554 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800747a:	2b00      	cmp	r3, #0
 800747c:	d019      	beq.n	80074b2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800748a:	23ff      	movs	r3, #255	@ 0xff
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f949 	bl	8007724 <USBH_Get_StringDesc>
 8007492:	4603      	mov	r3, r0
 8007494:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d103      	bne.n	80074a4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2206      	movs	r2, #6
 80074a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074a2:	e059      	b.n	8007558 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d156      	bne.n	8007558 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2206      	movs	r2, #6
 80074ae:	705a      	strb	r2, [r3, #1]
      break;
 80074b0:	e052      	b.n	8007558 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2206      	movs	r2, #6
 80074b6:	705a      	strb	r2, [r3, #1]
      break;
 80074b8:	e04e      	b.n	8007558 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d019      	beq.n	80074f8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074d0:	23ff      	movs	r3, #255	@ 0xff
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f926 	bl	8007724 <USBH_Get_StringDesc>
 80074d8:	4603      	mov	r3, r0
 80074da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2207      	movs	r2, #7
 80074e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074e8:	e038      	b.n	800755c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d135      	bne.n	800755c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2207      	movs	r2, #7
 80074f4:	705a      	strb	r2, [r3, #1]
      break;
 80074f6:	e031      	b.n	800755c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2207      	movs	r2, #7
 80074fc:	705a      	strb	r2, [r3, #1]
      break;
 80074fe:	e02d      	b.n	800755c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007506:	2b00      	cmp	r3, #0
 8007508:	d017      	beq.n	800753a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007516:	23ff      	movs	r3, #255	@ 0xff
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f903 	bl	8007724 <USBH_Get_StringDesc>
 800751e:	4603      	mov	r3, r0
 8007520:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800752c:	e018      	b.n	8007560 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d115      	bne.n	8007560 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
      break;
 8007538:	e012      	b.n	8007560 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
      break;
 800753e:	e00f      	b.n	8007560 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007540:	bf00      	nop
 8007542:	e00e      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 8007544:	bf00      	nop
 8007546:	e00c      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 8007548:	bf00      	nop
 800754a:	e00a      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 800754c:	bf00      	nop
 800754e:	e008      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 8007550:	bf00      	nop
 8007552:	e006      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 8007554:	bf00      	nop
 8007556:	e004      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 8007558:	bf00      	nop
 800755a:	e002      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <USBH_HandleEnum+0x3b6>
      break;
 8007560:	bf00      	nop
  }
  return Status;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f804 	bl	80075ae <USBH_HandleSof>
}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b0b      	cmp	r3, #11
 80075be:	d10a      	bne.n	80075d6 <USBH_HandleSof+0x28>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
  }
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80075ee:	bf00      	nop
}
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800760a:	bf00      	nop
}
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f844 	bl	80086f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	791b      	ldrb	r3, [r3, #4]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fe89 	bl	8008388 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	795b      	ldrb	r3, [r3, #5]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fe83 	bl	8008388 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af02      	add	r7, sp, #8
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4613      	mov	r3, r2
 80076a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076aa:	2100      	movs	r1, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f864 	bl	800777a <USBH_GetDescriptor>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f203 3026 	addw	r0, r3, #806	@ 0x326
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80076c8:	78fa      	ldrb	r2, [r7, #3]
 80076ca:	b292      	uxth	r2, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	f000 f919 	bl	8007904 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	331c      	adds	r3, #28
 80076ec:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80076ee:	887b      	ldrh	r3, [r7, #2]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f83d 	bl	800777a <USBH_GetDescriptor>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d107      	bne.n	800771a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800770a:	887b      	ldrh	r3, [r7, #2]
 800770c:	461a      	mov	r2, r3
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f985 	bl	8007a20 <USBH_ParseCfgDesc>
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	461a      	mov	r2, r3
 8007730:	460b      	mov	r3, r1
 8007732:	72fb      	strb	r3, [r7, #11]
 8007734:	4613      	mov	r3, r2
 8007736:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007740:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007748:	893b      	ldrh	r3, [r7, #8]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	460b      	mov	r3, r1
 800774e:	2100      	movs	r1, #0
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f812 	bl	800777a <USBH_GetDescriptor>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d107      	bne.n	8007770 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007766:	893a      	ldrh	r2, [r7, #8]
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fb1e 	bl	8007dac <USBH_ParseStringDesc>
  }

  return status;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	72fb      	strb	r3, [r7, #11]
 8007788:	4613      	mov	r3, r2
 800778a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	789b      	ldrb	r3, [r3, #2]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d11c      	bne.n	80077ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2206      	movs	r2, #6
 80077a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	893a      	ldrh	r2, [r7, #8]
 80077aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80077ac:	893b      	ldrh	r3, [r7, #8]
 80077ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80077b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b6:	d104      	bne.n	80077c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f240 4209 	movw	r2, #1033	@ 0x409
 80077be:	829a      	strh	r2, [r3, #20]
 80077c0:	e002      	b.n	80077c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8b3a      	ldrh	r2, [r7, #24]
 80077cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80077ce:	8b3b      	ldrh	r3, [r7, #24]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fb36 	bl	8007e46 <USBH_CtlReq>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	789b      	ldrb	r3, [r3, #2]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d10f      	bne.n	8007818 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2205      	movs	r2, #5
 8007802:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	b29a      	uxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007818:	2200      	movs	r2, #0
 800781a:	2100      	movs	r1, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb12 	bl	8007e46 <USBH_CtlReq>
 8007822:	4603      	mov	r3, r0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	789b      	ldrb	r3, [r3, #2]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10e      	bne.n	800785e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2209      	movs	r2, #9
 800784a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	887a      	ldrh	r2, [r7, #2]
 8007850:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800785e:	2200      	movs	r2, #0
 8007860:	2100      	movs	r1, #0
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 faef 	bl	8007e46 <USBH_CtlReq>
 8007868:	4603      	mov	r3, r0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	789b      	ldrb	r3, [r3, #2]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d10f      	bne.n	80078a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2203      	movs	r2, #3
 8007890:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 facb 	bl	8007e46 <USBH_CtlReq>
 80078b0:	4603      	mov	r3, r0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	789b      	ldrb	r3, [r3, #2]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d10f      	bne.n	80078ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 faa7 	bl	8007e46 <USBH_CtlReq>
 80078f8:	4603      	mov	r3, r0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	785a      	ldrb	r2, [r3, #1]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	3302      	adds	r3, #2
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3303      	adds	r3, #3
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	b29b      	uxth	r3, r3
 8007934:	4313      	orrs	r3, r2
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	791a      	ldrb	r2, [r3, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	795a      	ldrb	r2, [r3, #5]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	799a      	ldrb	r2, [r3, #6]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	79da      	ldrb	r2, [r3, #7]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	79db      	ldrb	r3, [r3, #7]
 8007960:	2b20      	cmp	r3, #32
 8007962:	dc0f      	bgt.n	8007984 <USBH_ParseDevDesc+0x80>
 8007964:	2b08      	cmp	r3, #8
 8007966:	db14      	blt.n	8007992 <USBH_ParseDevDesc+0x8e>
 8007968:	3b08      	subs	r3, #8
 800796a:	4a2c      	ldr	r2, [pc, #176]	@ (8007a1c <USBH_ParseDevDesc+0x118>)
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	bf14      	ite	ne
 8007978:	2301      	movne	r3, #1
 800797a:	2300      	moveq	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d102      	bne.n	8007988 <USBH_ParseDevDesc+0x84>
 8007982:	e006      	b.n	8007992 <USBH_ParseDevDesc+0x8e>
 8007984:	2b40      	cmp	r3, #64	@ 0x40
 8007986:	d104      	bne.n	8007992 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	79da      	ldrb	r2, [r3, #7]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	71da      	strb	r2, [r3, #7]
      break;
 8007990:	e003      	b.n	800799a <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2240      	movs	r2, #64	@ 0x40
 8007996:	71da      	strb	r2, [r3, #7]
      break;
 8007998:	bf00      	nop
  }

  if (length > 8U)
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	2b08      	cmp	r3, #8
 800799e:	d936      	bls.n	8007a0e <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	3308      	adds	r3, #8
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	3309      	adds	r3, #9
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4313      	orrs	r3, r2
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	330a      	adds	r3, #10
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	330b      	adds	r3, #11
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	330c      	adds	r3, #12
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	330d      	adds	r3, #13
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4313      	orrs	r3, r2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	7b9a      	ldrb	r2, [r3, #14]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	7bda      	ldrb	r2, [r3, #15]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	7c1a      	ldrb	r2, [r3, #16]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	7c5a      	ldrb	r2, [r3, #17]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	745a      	strb	r2, [r3, #17]
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	01000101 	.word	0x01000101

08007a20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08c      	sub	sp, #48	@ 0x30
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007a34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	781a      	ldrb	r2, [r3, #0]
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	785a      	ldrb	r2, [r3, #1]
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	3302      	adds	r3, #2
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	3303      	adds	r3, #3
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7a:	bf28      	it	cs
 8007a7c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	791a      	ldrb	r2, [r3, #4]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	795a      	ldrb	r2, [r3, #5]
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	799a      	ldrb	r2, [r3, #6]
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	79da      	ldrb	r2, [r3, #7]
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	7a1a      	ldrb	r2, [r3, #8]
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b09      	cmp	r3, #9
 8007ab4:	d002      	beq.n	8007abc <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	2209      	movs	r2, #9
 8007aba:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	f240 809d 	bls.w	8007bfe <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ac4:	2309      	movs	r3, #9
 8007ac6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007acc:	e081      	b.n	8007bd2 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ace:	f107 0316 	add.w	r3, r7, #22
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ad6:	f000 f99c 	bl	8007e12 <USBH_GetNextDesc>
 8007ada:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d176      	bne.n	8007bd2 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b09      	cmp	r3, #9
 8007aea:	d002      	beq.n	8007af2 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	2209      	movs	r2, #9
 8007af0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007af2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007af6:	221a      	movs	r2, #26
 8007af8:	fb02 f303 	mul.w	r3, r2, r3
 8007afc:	3308      	adds	r3, #8
 8007afe:	6a3a      	ldr	r2, [r7, #32]
 8007b00:	4413      	add	r3, r2
 8007b02:	3302      	adds	r3, #2
 8007b04:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b08:	69f8      	ldr	r0, [r7, #28]
 8007b0a:	f000 f87e 	bl	8007c0a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b18:	e043      	b.n	8007ba2 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b1a:	f107 0316 	add.w	r3, r7, #22
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b22:	f000 f976 	bl	8007e12 <USBH_GetNextDesc>
 8007b26:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	d138      	bne.n	8007ba2 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	795b      	ldrb	r3, [r3, #5]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d10f      	bne.n	8007b58 <USBH_ParseCfgDesc+0x138>
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	799b      	ldrb	r3, [r3, #6]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d10b      	bne.n	8007b58 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	79db      	ldrb	r3, [r3, #7]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10f      	bne.n	8007b68 <USBH_ParseCfgDesc+0x148>
 8007b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b09      	cmp	r3, #9
 8007b4e:	d00b      	beq.n	8007b68 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	2209      	movs	r2, #9
 8007b54:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b56:	e007      	b.n	8007b68 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b07      	cmp	r3, #7
 8007b5e:	d004      	beq.n	8007b6a <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b62:	2207      	movs	r2, #7
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e000      	b.n	8007b6a <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b68:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b6e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007b72:	3201      	adds	r2, #1
 8007b74:	00d2      	lsls	r2, r2, #3
 8007b76:	211a      	movs	r1, #26
 8007b78:	fb01 f303 	mul.w	r3, r1, r3
 8007b7c:	4413      	add	r3, r2
 8007b7e:	3308      	adds	r3, #8
 8007b80:	6a3a      	ldr	r2, [r7, #32]
 8007b82:	4413      	add	r3, r2
 8007b84:	3304      	adds	r3, #4
 8007b86:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007b88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b8a:	69b9      	ldr	r1, [r7, #24]
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 f86b 	bl	8007c68 <USBH_ParseEPDesc>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007b98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	791b      	ldrb	r3, [r3, #4]
 8007ba6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d204      	bcs.n	8007bb8 <USBH_ParseCfgDesc+0x198>
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	885a      	ldrh	r2, [r3, #2]
 8007bb2:	8afb      	ldrh	r3, [r7, #22]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d8b0      	bhi.n	8007b1a <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	791b      	ldrb	r3, [r3, #4]
 8007bbc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d201      	bcs.n	8007bc8 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e01c      	b.n	8007c02 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8007bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bcc:	3301      	adds	r3, #1
 8007bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d805      	bhi.n	8007be6 <USBH_ParseCfgDesc+0x1c6>
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	885a      	ldrh	r2, [r3, #2]
 8007bde:	8afb      	ldrh	r3, [r7, #22]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	f63f af74 	bhi.w	8007ace <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	791b      	ldrb	r3, [r3, #4]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	bf28      	it	cs
 8007bee:	2302      	movcs	r3, #2
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d201      	bcs.n	8007bfe <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e001      	b.n	8007c02 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8007bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3730      	adds	r7, #48	@ 0x30
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	785a      	ldrb	r2, [r3, #1]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	789a      	ldrb	r2, [r3, #2]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	78da      	ldrb	r2, [r3, #3]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	791a      	ldrb	r2, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	795a      	ldrb	r2, [r3, #5]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	799a      	ldrb	r2, [r3, #6]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	79da      	ldrb	r2, [r3, #7]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	7a1a      	ldrb	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	721a      	strb	r2, [r3, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	781a      	ldrb	r2, [r3, #0]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	785a      	ldrb	r2, [r3, #1]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	789a      	ldrb	r2, [r3, #2]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	78da      	ldrb	r2, [r3, #3]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3305      	adds	r3, #5
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	4313      	orrs	r3, r2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	799a      	ldrb	r2, [r3, #6]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	889b      	ldrh	r3, [r3, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d102      	bne.n	8007cc8 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	75fb      	strb	r3, [r7, #23]
 8007cc6:	e031      	b.n	8007d2c <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	889b      	ldrh	r3, [r3, #4]
 8007ccc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	889b      	ldrh	r3, [r3, #4]
 8007cde:	b21a      	sxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3305      	adds	r3, #5
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10f      	bne.n	8007d1e <USBH_ParseEPDesc+0xb6>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3304      	adds	r3, #4
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3305      	adds	r3, #5
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	430b      	orrs	r3, r1
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	b21b      	sxth	r3, r3
 8007d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d1a:	b21b      	sxth	r3, r3
 8007d1c:	e001      	b.n	8007d22 <USBH_ParseEPDesc+0xba>
 8007d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d22:	4313      	orrs	r3, r2
 8007d24:	b21b      	sxth	r3, r3
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d116      	bne.n	8007d64 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	78db      	ldrb	r3, [r3, #3]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d005      	beq.n	8007d4e <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	78db      	ldrb	r3, [r3, #3]
 8007d46:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d127      	bne.n	8007d9e <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	799b      	ldrb	r3, [r3, #6]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <USBH_ParseEPDesc+0xf6>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	799b      	ldrb	r3, [r3, #6]
 8007d5a:	2b10      	cmp	r3, #16
 8007d5c:	d91f      	bls.n	8007d9e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	75fb      	strb	r3, [r7, #23]
 8007d62:	e01c      	b.n	8007d9e <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	78db      	ldrb	r3, [r3, #3]
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d10a      	bne.n	8007d86 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	799b      	ldrb	r3, [r3, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <USBH_ParseEPDesc+0x118>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	799b      	ldrb	r3, [r3, #6]
 8007d7c:	2b10      	cmp	r3, #16
 8007d7e:	d90e      	bls.n	8007d9e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007d80:	2303      	movs	r3, #3
 8007d82:	75fb      	strb	r3, [r7, #23]
 8007d84:	e00b      	b.n	8007d9e <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	78db      	ldrb	r3, [r3, #3]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d105      	bne.n	8007d9e <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	799b      	ldrb	r3, [r3, #6]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d120      	bne.n	8007e06 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	1e9a      	subs	r2, r3, #2
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bf28      	it	cs
 8007dd0:	4613      	movcs	r3, r2
 8007dd2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	82fb      	strh	r3, [r7, #22]
 8007dde:	e00b      	b.n	8007df8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007de0:	8afb      	ldrh	r3, [r7, #22]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4413      	add	r3, r2
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007df2:	8afb      	ldrh	r3, [r7, #22]
 8007df4:	3302      	adds	r3, #2
 8007df6:	82fb      	strh	r3, [r7, #22]
 8007df8:	8afa      	ldrh	r2, [r7, #22]
 8007dfa:	8abb      	ldrh	r3, [r7, #20]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3ef      	bcc.n	8007de0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
  }
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7812      	ldrb	r2, [r2, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e38:	68fb      	ldr	r3, [r7, #12]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e54:	2301      	movs	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	789b      	ldrb	r3, [r3, #2]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d002      	beq.n	8007e66 <USBH_CtlReq+0x20>
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d00f      	beq.n	8007e84 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e64:	e027      	b.n	8007eb6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	88fa      	ldrh	r2, [r7, #6]
 8007e70:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	75fb      	strb	r3, [r7, #23]
      break;
 8007e82:	e018      	b.n	8007eb6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f81b 	bl	8007ec0 <USBH_HandleControl>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <USBH_CtlReq+0x54>
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d106      	bne.n	8007ea8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	761a      	strb	r2, [r3, #24]
      break;
 8007ea6:	e005      	b.n	8007eb4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d102      	bne.n	8007eb4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	709a      	strb	r2, [r3, #2]
      break;
 8007eb4:	bf00      	nop
  }
  return status;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7e1b      	ldrb	r3, [r3, #24]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	2b0a      	cmp	r3, #10
 8007ed8:	f200 8156 	bhi.w	8008188 <USBH_HandleControl+0x2c8>
 8007edc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee4 <USBH_HandleControl+0x24>)
 8007ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee2:	bf00      	nop
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	08007f2b 	.word	0x08007f2b
 8007eec:	08007f95 	.word	0x08007f95
 8007ef0:	08007fbb 	.word	0x08007fbb
 8007ef4:	08007ff3 	.word	0x08007ff3
 8007ef8:	0800801d 	.word	0x0800801d
 8007efc:	0800806f 	.word	0x0800806f
 8007f00:	08008091 	.word	0x08008091
 8007f04:	080080cd 	.word	0x080080cd
 8007f08:	080080f3 	.word	0x080080f3
 8007f0c:	08008131 	.word	0x08008131
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f103 0110 	add.w	r1, r3, #16
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	795b      	ldrb	r3, [r3, #5]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f943 	bl	80081a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2202      	movs	r2, #2
 8007f26:	761a      	strb	r2, [r3, #24]
      break;
 8007f28:	e139      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	795b      	ldrb	r3, [r3, #5]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fccd 	bl	80088d0 <USBH_LL_GetURBState>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d11e      	bne.n	8007f7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7c1b      	ldrb	r3, [r3, #16]
 8007f44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	8adb      	ldrh	r3, [r3, #22]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f52:	7b7b      	ldrb	r3, [r7, #13]
 8007f54:	2b80      	cmp	r3, #128	@ 0x80
 8007f56:	d103      	bne.n	8007f60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f5e:	e115      	b.n	800818c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2205      	movs	r2, #5
 8007f64:	761a      	strb	r2, [r3, #24]
      break;
 8007f66:	e111      	b.n	800818c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f68:	7b7b      	ldrb	r3, [r7, #13]
 8007f6a:	2b80      	cmp	r3, #128	@ 0x80
 8007f6c:	d103      	bne.n	8007f76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2209      	movs	r2, #9
 8007f72:	761a      	strb	r2, [r3, #24]
      break;
 8007f74:	e10a      	b.n	800818c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2207      	movs	r2, #7
 8007f7a:	761a      	strb	r2, [r3, #24]
      break;
 8007f7c:	e106      	b.n	800818c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d003      	beq.n	8007f8c <USBH_HandleControl+0xcc>
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	f040 8100 	bne.w	800818c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	220b      	movs	r2, #11
 8007f90:	761a      	strb	r2, [r3, #24]
      break;
 8007f92:	e0fb      	b.n	800818c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6899      	ldr	r1, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	899a      	ldrh	r2, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	791b      	ldrb	r3, [r3, #4]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f93a 	bl	8008226 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	761a      	strb	r2, [r3, #24]
      break;
 8007fb8:	e0f1      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fc85 	bl	80088d0 <USBH_LL_GetURBState>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d102      	bne.n	8007fd6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2209      	movs	r2, #9
 8007fd4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d102      	bne.n	8007fe2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fe0:	e0d6      	b.n	8008190 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	f040 80d3 	bne.w	8008190 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	220b      	movs	r2, #11
 8007fee:	761a      	strb	r2, [r3, #24]
      break;
 8007ff0:	e0ce      	b.n	8008190 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6899      	ldr	r1, [r3, #8]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	899a      	ldrh	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	795b      	ldrb	r3, [r3, #5]
 8007ffe:	2001      	movs	r0, #1
 8008000:	9000      	str	r0, [sp, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f8ea 	bl	80081dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800800e:	b29a      	uxth	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2206      	movs	r2, #6
 8008018:	761a      	strb	r2, [r3, #24]
      break;
 800801a:	e0c0      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	795b      	ldrb	r3, [r3, #5]
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fc54 	bl	80088d0 <USBH_LL_GetURBState>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d103      	bne.n	800803a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2207      	movs	r2, #7
 8008036:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008038:	e0ac      	b.n	8008194 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b05      	cmp	r3, #5
 800803e:	d105      	bne.n	800804c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	220c      	movs	r2, #12
 8008044:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008046:	2303      	movs	r3, #3
 8008048:	73fb      	strb	r3, [r7, #15]
      break;
 800804a:	e0a3      	b.n	8008194 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d103      	bne.n	800805a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2205      	movs	r2, #5
 8008056:	761a      	strb	r2, [r3, #24]
      break;
 8008058:	e09c      	b.n	8008194 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b04      	cmp	r3, #4
 800805e:	f040 8099 	bne.w	8008194 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	220b      	movs	r2, #11
 8008066:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008068:	2302      	movs	r3, #2
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e092      	b.n	8008194 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8d5 	bl	8008226 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008082:	b29a      	uxth	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2208      	movs	r2, #8
 800808c:	761a      	strb	r2, [r3, #24]

      break;
 800808e:	e086      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fc1a 	bl	80088d0 <USBH_LL_GetURBState>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d105      	bne.n	80080b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	220d      	movs	r2, #13
 80080aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080b0:	e072      	b.n	8008198 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d103      	bne.n	80080c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	220b      	movs	r2, #11
 80080bc:	761a      	strb	r2, [r3, #24]
      break;
 80080be:	e06b      	b.n	8008198 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	d168      	bne.n	8008198 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80080c6:	2303      	movs	r3, #3
 80080c8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ca:	e065      	b.n	8008198 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	795b      	ldrb	r3, [r3, #5]
 80080d0:	2201      	movs	r2, #1
 80080d2:	9200      	str	r2, [sp, #0]
 80080d4:	2200      	movs	r2, #0
 80080d6:	2100      	movs	r1, #0
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f87f 	bl	80081dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	220a      	movs	r2, #10
 80080ee:	761a      	strb	r2, [r3, #24]
      break;
 80080f0:	e055      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	795b      	ldrb	r3, [r3, #5]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fbe9 	bl	80088d0 <USBH_LL_GetURBState>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d105      	bne.n	8008114 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	220d      	movs	r2, #13
 8008110:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008112:	e043      	b.n	800819c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d103      	bne.n	8008122 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2209      	movs	r2, #9
 800811e:	761a      	strb	r2, [r3, #24]
      break;
 8008120:	e03c      	b.n	800819c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b04      	cmp	r3, #4
 8008126:	d139      	bne.n	800819c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	220b      	movs	r2, #11
 800812c:	761a      	strb	r2, [r3, #24]
      break;
 800812e:	e035      	b.n	800819c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7e5b      	ldrb	r3, [r3, #25]
 8008134:	3301      	adds	r3, #1
 8008136:	b2da      	uxtb	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	765a      	strb	r2, [r3, #25]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7e5b      	ldrb	r3, [r3, #25]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d806      	bhi.n	8008152 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008150:	e025      	b.n	800819e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008158:	2106      	movs	r1, #6
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	795b      	ldrb	r3, [r3, #5]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f90c 	bl	8008388 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	791b      	ldrb	r3, [r3, #4]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f906 	bl	8008388 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008182:	2302      	movs	r3, #2
 8008184:	73fb      	strb	r3, [r7, #15]
      break;
 8008186:	e00a      	b.n	800819e <USBH_HandleControl+0x2de>

    default:
      break;
 8008188:	bf00      	nop
 800818a:	e008      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 800818c:	bf00      	nop
 800818e:	e006      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 8008190:	bf00      	nop
 8008192:	e004      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 8008194:	bf00      	nop
 8008196:	e002      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 800819c:	bf00      	nop
  }

  return status;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af04      	add	r7, sp, #16
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081b6:	79f9      	ldrb	r1, [r7, #7]
 80081b8:	2300      	movs	r3, #0
 80081ba:	9303      	str	r3, [sp, #12]
 80081bc:	2308      	movs	r3, #8
 80081be:	9302      	str	r3, [sp, #8]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	2300      	movs	r3, #0
 80081ca:	2200      	movs	r2, #0
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fb4e 	bl	800886e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4611      	mov	r1, r2
 80081e8:	461a      	mov	r2, r3
 80081ea:	460b      	mov	r3, r1
 80081ec:	80fb      	strh	r3, [r7, #6]
 80081ee:	4613      	mov	r3, r2
 80081f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008200:	7979      	ldrb	r1, [r7, #5]
 8008202:	7e3b      	ldrb	r3, [r7, #24]
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	9302      	str	r3, [sp, #8]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	2301      	movs	r3, #1
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fb29 	bl	800886e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	af04      	add	r7, sp, #16
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	4611      	mov	r1, r2
 8008232:	461a      	mov	r2, r3
 8008234:	460b      	mov	r3, r1
 8008236:	80fb      	strh	r3, [r7, #6]
 8008238:	4613      	mov	r3, r2
 800823a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800823c:	7979      	ldrb	r1, [r7, #5]
 800823e:	2300      	movs	r3, #0
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	9302      	str	r3, [sp, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	2301      	movs	r3, #1
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	2300      	movs	r3, #0
 8008250:	2201      	movs	r2, #1
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fb0b 	bl	800886e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008258:	2300      	movs	r3, #0

}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b088      	sub	sp, #32
 8008266:	af04      	add	r7, sp, #16
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	4611      	mov	r1, r2
 800826e:	461a      	mov	r2, r3
 8008270:	460b      	mov	r3, r1
 8008272:	80fb      	strh	r3, [r7, #6]
 8008274:	4613      	mov	r3, r2
 8008276:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008286:	7979      	ldrb	r1, [r7, #5]
 8008288:	7e3b      	ldrb	r3, [r7, #24]
 800828a:	9303      	str	r3, [sp, #12]
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	2301      	movs	r3, #1
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	2302      	movs	r3, #2
 800829a:	2200      	movs	r2, #0
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fae6 	bl	800886e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af04      	add	r7, sp, #16
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4611      	mov	r1, r2
 80082b8:	461a      	mov	r2, r3
 80082ba:	460b      	mov	r3, r1
 80082bc:	80fb      	strh	r3, [r7, #6]
 80082be:	4613      	mov	r3, r2
 80082c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082c2:	7979      	ldrb	r1, [r7, #5]
 80082c4:	2300      	movs	r3, #0
 80082c6:	9303      	str	r3, [sp, #12]
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	2301      	movs	r3, #1
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	2302      	movs	r3, #2
 80082d6:	2201      	movs	r2, #1
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fac8 	bl	800886e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af04      	add	r7, sp, #16
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	461a      	mov	r2, r3
 80082f6:	4603      	mov	r3, r0
 80082f8:	70fb      	strb	r3, [r7, #3]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70bb      	strb	r3, [r7, #2]
 80082fe:	4613      	mov	r3, r2
 8008300:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008302:	7878      	ldrb	r0, [r7, #1]
 8008304:	78ba      	ldrb	r2, [r7, #2]
 8008306:	78f9      	ldrb	r1, [r7, #3]
 8008308:	8b3b      	ldrh	r3, [r7, #24]
 800830a:	9302      	str	r3, [sp, #8]
 800830c:	7d3b      	ldrb	r3, [r7, #20]
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	7c3b      	ldrb	r3, [r7, #16]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4603      	mov	r3, r0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa5b 	bl	80087d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa7a 	bl	8008830 <USBH_LL_ClosePipe>

  return USBH_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f836 	bl	80083c4 <USBH_GetFreePipe>
 8008358:	4603      	mov	r3, r0
 800835a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800835c:	89fb      	ldrh	r3, [r7, #14]
 800835e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008362:	4293      	cmp	r3, r2
 8008364:	d00a      	beq.n	800837c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	33e0      	adds	r3, #224	@ 0xe0
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	b2db      	uxtb	r3, r3
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	2b0f      	cmp	r3, #15
 8008398:	d80d      	bhi.n	80083b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	33e0      	adds	r3, #224	@ 0xe0
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	33e0      	adds	r3, #224	@ 0xe0
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	440b      	add	r3, r1
 80083b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]
 80083d4:	e00f      	b.n	80083f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	33e0      	adds	r3, #224	@ 0xe0
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	e007      	b.n	8008400 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	3301      	adds	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b0f      	cmp	r3, #15
 80083fa:	d9ec      	bls.n	80083d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80083fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008410:	2201      	movs	r2, #1
 8008412:	490e      	ldr	r1, [pc, #56]	@ (800844c <MX_USB_HOST_Init+0x40>)
 8008414:	480e      	ldr	r0, [pc, #56]	@ (8008450 <MX_USB_HOST_Init+0x44>)
 8008416:	f7fe fbb7 	bl	8006b88 <USBH_Init>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008420:	f7f8 fc46 	bl	8000cb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008424:	490b      	ldr	r1, [pc, #44]	@ (8008454 <MX_USB_HOST_Init+0x48>)
 8008426:	480a      	ldr	r0, [pc, #40]	@ (8008450 <MX_USB_HOST_Init+0x44>)
 8008428:	f7fe fc3c 	bl	8006ca4 <USBH_RegisterClass>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008432:	f7f8 fc3d 	bl	8000cb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008436:	4806      	ldr	r0, [pc, #24]	@ (8008450 <MX_USB_HOST_Init+0x44>)
 8008438:	f7fe fcc0 	bl	8006dbc <USBH_Start>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008442:	f7f8 fc35 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008446:	bf00      	nop
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	0800846d 	.word	0x0800846d
 8008450:	20000268 	.word	0x20000268
 8008454:	2000000c 	.word	0x2000000c

08008458 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800845c:	4802      	ldr	r0, [pc, #8]	@ (8008468 <MX_USB_HOST_Process+0x10>)
 800845e:	f7fe fcbd 	bl	8006ddc <USBH_Process>
}
 8008462:	bf00      	nop
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000268 	.word	0x20000268

0800846c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	3b01      	subs	r3, #1
 800847c:	2b04      	cmp	r3, #4
 800847e:	d819      	bhi.n	80084b4 <USBH_UserProcess+0x48>
 8008480:	a201      	add	r2, pc, #4	@ (adr r2, 8008488 <USBH_UserProcess+0x1c>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084b5 	.word	0x080084b5
 800848c:	080084a5 	.word	0x080084a5
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084ad 	.word	0x080084ad
 8008498:	0800849d 	.word	0x0800849d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800849c:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <USBH_UserProcess+0x58>)
 800849e:	2203      	movs	r2, #3
 80084a0:	701a      	strb	r2, [r3, #0]
  break;
 80084a2:	e008      	b.n	80084b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80084a4:	4b07      	ldr	r3, [pc, #28]	@ (80084c4 <USBH_UserProcess+0x58>)
 80084a6:	2202      	movs	r2, #2
 80084a8:	701a      	strb	r2, [r3, #0]
  break;
 80084aa:	e004      	b.n	80084b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80084ac:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <USBH_UserProcess+0x58>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
  break;
 80084b2:	e000      	b.n	80084b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80084b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000640 	.word	0x20000640

080084c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b0a0      	sub	sp, #128	@ 0x80
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084e0:	f107 0310 	add.w	r3, r7, #16
 80084e4:	225c      	movs	r2, #92	@ 0x5c
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fb37 	bl	8008b5c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084f6:	d149      	bne.n	800858c <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80084f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80084fe:	2300      	movs	r3, #0
 8008500:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008502:	f107 0310 	add.w	r3, r7, #16
 8008506:	4618      	mov	r0, r3
 8008508:	f7fa fff0 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 8008512:	f7f8 fbcd 	bl	8000cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	4b1e      	ldr	r3, [pc, #120]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 800851c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851e:	4a1d      	ldr	r2, [pc, #116]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	6313      	str	r3, [r2, #48]	@ 0x30
 8008526:	4b1b      	ldr	r3, [pc, #108]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 8008528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008532:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008536:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008538:	2302      	movs	r3, #2
 800853a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853c:	2300      	movs	r3, #0
 800853e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008540:	2303      	movs	r3, #3
 8008542:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008544:	230a      	movs	r3, #10
 8008546:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008548:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800854c:	4619      	mov	r1, r3
 800854e:	4812      	ldr	r0, [pc, #72]	@ (8008598 <HAL_HCD_MspInit+0xd0>)
 8008550:	f7f8 ff52 	bl	80013f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008554:	4b0f      	ldr	r3, [pc, #60]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 8008556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008558:	4a0e      	ldr	r2, [pc, #56]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 800855a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800855e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 8008566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008568:	4a0a      	ldr	r2, [pc, #40]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 800856a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800856e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008570:	4b08      	ldr	r3, [pc, #32]	@ (8008594 <HAL_HCD_MspInit+0xcc>)
 8008572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800857c:	2200      	movs	r2, #0
 800857e:	2100      	movs	r1, #0
 8008580:	2043      	movs	r0, #67	@ 0x43
 8008582:	f7f8 ff0f 	bl	80013a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008586:	2043      	movs	r0, #67	@ 0x43
 8008588:	f7f8 ff28 	bl	80013dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800858c:	bf00      	nop
 800858e:	3780      	adds	r7, #128	@ 0x80
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40023800 	.word	0x40023800
 8008598:	40020000 	.word	0x40020000

0800859c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe ffed 	bl	800758a <USBH_LL_IncTimer>
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff f825 	bl	8007616 <USBH_LL_Connect>
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff f82e 	bl	8007644 <USBH_LL_Disconnect>
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
 80085fc:	4613      	mov	r3, r2
 80085fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe ffdf 	bl	80075de <USBH_LL_PortEnabled>
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe ffdf 	bl	80075fa <USBH_LL_PortDisabled>
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008652:	2b01      	cmp	r3, #1
 8008654:	d12a      	bne.n	80086ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008656:	4a18      	ldr	r2, [pc, #96]	@ (80086b8 <USBH_LL_Init+0x74>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a15      	ldr	r2, [pc, #84]	@ (80086b8 <USBH_LL_Init+0x74>)
 8008662:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008666:	4b14      	ldr	r3, [pc, #80]	@ (80086b8 <USBH_LL_Init+0x74>)
 8008668:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800866c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <USBH_LL_Init+0x74>)
 8008670:	220c      	movs	r2, #12
 8008672:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008674:	4b10      	ldr	r3, [pc, #64]	@ (80086b8 <USBH_LL_Init+0x74>)
 8008676:	2201      	movs	r2, #1
 8008678:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800867a:	4b0f      	ldr	r3, [pc, #60]	@ (80086b8 <USBH_LL_Init+0x74>)
 800867c:	2200      	movs	r2, #0
 800867e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008680:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <USBH_LL_Init+0x74>)
 8008682:	2202      	movs	r2, #2
 8008684:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008686:	4b0c      	ldr	r3, [pc, #48]	@ (80086b8 <USBH_LL_Init+0x74>)
 8008688:	2200      	movs	r2, #0
 800868a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800868c:	480a      	ldr	r0, [pc, #40]	@ (80086b8 <USBH_LL_Init+0x74>)
 800868e:	f7f9 f893 	bl	80017b8 <HAL_HCD_Init>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008698:	f7f8 fb0a 	bl	8000cb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800869c:	4806      	ldr	r0, [pc, #24]	@ (80086b8 <USBH_LL_Init+0x74>)
 800869e:	f7f9 fc76 	bl	8001f8e <HAL_HCD_GetCurrentFrame>
 80086a2:	4603      	mov	r3, r0
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7fe ff60 	bl	800756c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000644 	.word	0x20000644

080086bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f9 fbe5 	bl	8001ea2 <HAL_HCD_Start>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 f952 	bl	8008988 <USBH_Get_USB_Status>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008708:	4618      	mov	r0, r3
 800870a:	f7f9 fbed 	bl	8001ee8 <HAL_HCD_Stop>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f937 	bl	8008988 <USBH_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800873a:	4618      	mov	r0, r3
 800873c:	f7f9 fc35 	bl	8001faa <HAL_HCD_GetCurrentSpeed>
 8008740:	4603      	mov	r3, r0
 8008742:	2b02      	cmp	r3, #2
 8008744:	d00c      	beq.n	8008760 <USBH_LL_GetSpeed+0x38>
 8008746:	2b02      	cmp	r3, #2
 8008748:	d80d      	bhi.n	8008766 <USBH_LL_GetSpeed+0x3e>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <USBH_LL_GetSpeed+0x2c>
 800874e:	2b01      	cmp	r3, #1
 8008750:	d003      	beq.n	800875a <USBH_LL_GetSpeed+0x32>
 8008752:	e008      	b.n	8008766 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
    break;
 8008758:	e008      	b.n	800876c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800875a:	2301      	movs	r3, #1
 800875c:	73fb      	strb	r3, [r7, #15]
    break;
 800875e:	e005      	b.n	800876c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008760:	2302      	movs	r3, #2
 8008762:	73fb      	strb	r3, [r7, #15]
    break;
 8008764:	e002      	b.n	800876c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008766:	2301      	movs	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
    break;
 800876a:	bf00      	nop
  }
  return  speed;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800878c:	4618      	mov	r0, r3
 800878e:	f7f9 fbc8 	bl	8001f22 <HAL_HCD_ResetPort>
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 f8f5 	bl	8008988 <USBH_Get_USB_Status>
 800879e:	4603      	mov	r3, r0
 80087a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f9 fbcf 	bl	8001f66 <HAL_HCD_HC_GetXferCount>
 80087c8:	4603      	mov	r3, r0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087d2:	b590      	push	{r4, r7, lr}
 80087d4:	b089      	sub	sp, #36	@ 0x24
 80087d6:	af04      	add	r7, sp, #16
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	461a      	mov	r2, r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	70fb      	strb	r3, [r7, #3]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70bb      	strb	r3, [r7, #2]
 80087e8:	4613      	mov	r3, r2
 80087ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80087fa:	787c      	ldrb	r4, [r7, #1]
 80087fc:	78ba      	ldrb	r2, [r7, #2]
 80087fe:	78f9      	ldrb	r1, [r7, #3]
 8008800:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4623      	mov	r3, r4
 8008812:	f7f9 f833 	bl	800187c <HAL_HCD_HC_Init>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f8b3 	bl	8008988 <USBH_Get_USB_Status>
 8008822:	4603      	mov	r3, r0
 8008824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008826:	7bbb      	ldrb	r3, [r7, #14]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	bd90      	pop	{r4, r7, pc}

08008830 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800884a:	78fa      	ldrb	r2, [r7, #3]
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f7f9 f8a3 	bl	800199a <HAL_HCD_HC_Halt>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f894 	bl	8008988 <USBH_Get_USB_Status>
 8008860:	4603      	mov	r3, r0
 8008862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008864:	7bbb      	ldrb	r3, [r7, #14]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800886e:	b590      	push	{r4, r7, lr}
 8008870:	b089      	sub	sp, #36	@ 0x24
 8008872:	af04      	add	r7, sp, #16
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	461a      	mov	r2, r3
 800887c:	4603      	mov	r3, r0
 800887e:	70fb      	strb	r3, [r7, #3]
 8008880:	460b      	mov	r3, r1
 8008882:	70bb      	strb	r3, [r7, #2]
 8008884:	4613      	mov	r3, r2
 8008886:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008896:	787c      	ldrb	r4, [r7, #1]
 8008898:	78ba      	ldrb	r2, [r7, #2]
 800889a:	78f9      	ldrb	r1, [r7, #3]
 800889c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80088a0:	9303      	str	r3, [sp, #12]
 80088a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80088a4:	9302      	str	r3, [sp, #8]
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	4623      	mov	r3, r4
 80088b2:	f7f9 f895 	bl	80019e0 <HAL_HCD_HC_SubmitRequest>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 f863 	bl	8008988 <USBH_Get_USB_Status>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd90      	pop	{r4, r7, pc}

080088d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7f9 fb29 	bl	8001f3e <HAL_HCD_HC_GetURBState>
 80088ec:	4603      	mov	r3, r0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008902:	20c8      	movs	r0, #200	@ 0xc8
 8008904:	f7f8 fc72 	bl	80011ec <HAL_Delay>
  return USBH_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	70fb      	strb	r3, [r7, #3]
 800891e:	4613      	mov	r3, r2
 8008920:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008928:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	212c      	movs	r1, #44	@ 0x2c
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	4413      	add	r3, r2
 8008936:	333b      	adds	r3, #59	@ 0x3b
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	212c      	movs	r1, #44	@ 0x2c
 8008944:	fb01 f303 	mul.w	r3, r1, r3
 8008948:	4413      	add	r3, r2
 800894a:	3354      	adds	r3, #84	@ 0x54
 800894c:	78ba      	ldrb	r2, [r7, #2]
 800894e:	701a      	strb	r2, [r3, #0]
 8008950:	e008      	b.n	8008964 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	212c      	movs	r1, #44	@ 0x2c
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	4413      	add	r3, r2
 800895e:	3355      	adds	r3, #85	@ 0x55
 8008960:	78ba      	ldrb	r2, [r7, #2]
 8008962:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7f8 fc36 	bl	80011ec <HAL_Delay>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	2b03      	cmp	r3, #3
 800899a:	d817      	bhi.n	80089cc <USBH_Get_USB_Status+0x44>
 800899c:	a201      	add	r2, pc, #4	@ (adr r2, 80089a4 <USBH_Get_USB_Status+0x1c>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	080089b5 	.word	0x080089b5
 80089a8:	080089bb 	.word	0x080089bb
 80089ac:	080089c1 	.word	0x080089c1
 80089b0:	080089c7 	.word	0x080089c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
    break;
 80089b8:	e00b      	b.n	80089d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089ba:	2302      	movs	r3, #2
 80089bc:	73fb      	strb	r3, [r7, #15]
    break;
 80089be:	e008      	b.n	80089d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
    break;
 80089c4:	e005      	b.n	80089d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80089c6:	2302      	movs	r3, #2
 80089c8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ca:	e002      	b.n	80089d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089cc:	2302      	movs	r3, #2
 80089ce:	73fb      	strb	r3, [r7, #15]
    break;
 80089d0:	bf00      	nop
  }
  return usb_status;
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <malloc>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	@ (80089ec <malloc+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f000 b82d 	b.w	8008a44 <_malloc_r>
 80089ea:	bf00      	nop
 80089ec:	2000002c 	.word	0x2000002c

080089f0 <free>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	@ (80089fc <free+0xc>)
 80089f2:	4601      	mov	r1, r0
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f000 b8f5 	b.w	8008be4 <_free_r>
 80089fa:	bf00      	nop
 80089fc:	2000002c 	.word	0x2000002c

08008a00 <sbrk_aligned>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	4e0f      	ldr	r6, [pc, #60]	@ (8008a40 <sbrk_aligned+0x40>)
 8008a04:	460c      	mov	r4, r1
 8008a06:	6831      	ldr	r1, [r6, #0]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	b911      	cbnz	r1, 8008a12 <sbrk_aligned+0x12>
 8008a0c:	f000 f8ae 	bl	8008b6c <_sbrk_r>
 8008a10:	6030      	str	r0, [r6, #0]
 8008a12:	4621      	mov	r1, r4
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 f8a9 	bl	8008b6c <_sbrk_r>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d103      	bne.n	8008a26 <sbrk_aligned+0x26>
 8008a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a22:	4620      	mov	r0, r4
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	1cc4      	adds	r4, r0, #3
 8008a28:	f024 0403 	bic.w	r4, r4, #3
 8008a2c:	42a0      	cmp	r0, r4
 8008a2e:	d0f8      	beq.n	8008a22 <sbrk_aligned+0x22>
 8008a30:	1a21      	subs	r1, r4, r0
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 f89a 	bl	8008b6c <_sbrk_r>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d1f2      	bne.n	8008a22 <sbrk_aligned+0x22>
 8008a3c:	e7ef      	b.n	8008a1e <sbrk_aligned+0x1e>
 8008a3e:	bf00      	nop
 8008a40:	20000948 	.word	0x20000948

08008a44 <_malloc_r>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	1ccd      	adds	r5, r1, #3
 8008a4a:	f025 0503 	bic.w	r5, r5, #3
 8008a4e:	3508      	adds	r5, #8
 8008a50:	2d0c      	cmp	r5, #12
 8008a52:	bf38      	it	cc
 8008a54:	250c      	movcc	r5, #12
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	4606      	mov	r6, r0
 8008a5a:	db01      	blt.n	8008a60 <_malloc_r+0x1c>
 8008a5c:	42a9      	cmp	r1, r5
 8008a5e:	d904      	bls.n	8008a6a <_malloc_r+0x26>
 8008a60:	230c      	movs	r3, #12
 8008a62:	6033      	str	r3, [r6, #0]
 8008a64:	2000      	movs	r0, #0
 8008a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b40 <_malloc_r+0xfc>
 8008a6e:	f000 f869 	bl	8008b44 <__malloc_lock>
 8008a72:	f8d8 3000 	ldr.w	r3, [r8]
 8008a76:	461c      	mov	r4, r3
 8008a78:	bb44      	cbnz	r4, 8008acc <_malloc_r+0x88>
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff ffbf 	bl	8008a00 <sbrk_aligned>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	4604      	mov	r4, r0
 8008a86:	d158      	bne.n	8008b3a <_malloc_r+0xf6>
 8008a88:	f8d8 4000 	ldr.w	r4, [r8]
 8008a8c:	4627      	mov	r7, r4
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	d143      	bne.n	8008b1a <_malloc_r+0xd6>
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	d04b      	beq.n	8008b2e <_malloc_r+0xea>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	eb04 0903 	add.w	r9, r4, r3
 8008aa0:	f000 f864 	bl	8008b6c <_sbrk_r>
 8008aa4:	4581      	cmp	r9, r0
 8008aa6:	d142      	bne.n	8008b2e <_malloc_r+0xea>
 8008aa8:	6821      	ldr	r1, [r4, #0]
 8008aaa:	1a6d      	subs	r5, r5, r1
 8008aac:	4629      	mov	r1, r5
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ffa6 	bl	8008a00 <sbrk_aligned>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d03a      	beq.n	8008b2e <_malloc_r+0xea>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	442b      	add	r3, r5
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	bb62      	cbnz	r2, 8008b20 <_malloc_r+0xdc>
 8008ac6:	f8c8 7000 	str.w	r7, [r8]
 8008aca:	e00f      	b.n	8008aec <_malloc_r+0xa8>
 8008acc:	6822      	ldr	r2, [r4, #0]
 8008ace:	1b52      	subs	r2, r2, r5
 8008ad0:	d420      	bmi.n	8008b14 <_malloc_r+0xd0>
 8008ad2:	2a0b      	cmp	r2, #11
 8008ad4:	d917      	bls.n	8008b06 <_malloc_r+0xc2>
 8008ad6:	1961      	adds	r1, r4, r5
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	6025      	str	r5, [r4, #0]
 8008adc:	bf18      	it	ne
 8008ade:	6059      	strne	r1, [r3, #4]
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	bf08      	it	eq
 8008ae4:	f8c8 1000 	streq.w	r1, [r8]
 8008ae8:	5162      	str	r2, [r4, r5]
 8008aea:	604b      	str	r3, [r1, #4]
 8008aec:	4630      	mov	r0, r6
 8008aee:	f000 f82f 	bl	8008b50 <__malloc_unlock>
 8008af2:	f104 000b 	add.w	r0, r4, #11
 8008af6:	1d23      	adds	r3, r4, #4
 8008af8:	f020 0007 	bic.w	r0, r0, #7
 8008afc:	1ac2      	subs	r2, r0, r3
 8008afe:	bf1c      	itt	ne
 8008b00:	1a1b      	subne	r3, r3, r0
 8008b02:	50a3      	strne	r3, [r4, r2]
 8008b04:	e7af      	b.n	8008a66 <_malloc_r+0x22>
 8008b06:	6862      	ldr	r2, [r4, #4]
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	bf0c      	ite	eq
 8008b0c:	f8c8 2000 	streq.w	r2, [r8]
 8008b10:	605a      	strne	r2, [r3, #4]
 8008b12:	e7eb      	b.n	8008aec <_malloc_r+0xa8>
 8008b14:	4623      	mov	r3, r4
 8008b16:	6864      	ldr	r4, [r4, #4]
 8008b18:	e7ae      	b.n	8008a78 <_malloc_r+0x34>
 8008b1a:	463c      	mov	r4, r7
 8008b1c:	687f      	ldr	r7, [r7, #4]
 8008b1e:	e7b6      	b.n	8008a8e <_malloc_r+0x4a>
 8008b20:	461a      	mov	r2, r3
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	d1fb      	bne.n	8008b20 <_malloc_r+0xdc>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	6053      	str	r3, [r2, #4]
 8008b2c:	e7de      	b.n	8008aec <_malloc_r+0xa8>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	6033      	str	r3, [r6, #0]
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 f80c 	bl	8008b50 <__malloc_unlock>
 8008b38:	e794      	b.n	8008a64 <_malloc_r+0x20>
 8008b3a:	6005      	str	r5, [r0, #0]
 8008b3c:	e7d6      	b.n	8008aec <_malloc_r+0xa8>
 8008b3e:	bf00      	nop
 8008b40:	2000094c 	.word	0x2000094c

08008b44 <__malloc_lock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	@ (8008b4c <__malloc_lock+0x8>)
 8008b46:	f000 b84b 	b.w	8008be0 <__retarget_lock_acquire_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	20000a8c 	.word	0x20000a8c

08008b50 <__malloc_unlock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	@ (8008b58 <__malloc_unlock+0x8>)
 8008b52:	f000 b846 	b.w	8008be2 <__retarget_lock_release_recursive>
 8008b56:	bf00      	nop
 8008b58:	20000a8c 	.word	0x20000a8c

08008b5c <memset>:
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d100      	bne.n	8008b66 <memset+0xa>
 8008b64:	4770      	bx	lr
 8008b66:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6a:	e7f9      	b.n	8008b60 <memset+0x4>

08008b6c <_sbrk_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d06      	ldr	r5, [pc, #24]	@ (8008b88 <_sbrk_r+0x1c>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	f7f8 fa12 	bl	8000fa0 <_sbrk>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_sbrk_r+0x1a>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_sbrk_r+0x1a>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	20000a88 	.word	0x20000a88

08008b8c <__errno>:
 8008b8c:	4b01      	ldr	r3, [pc, #4]	@ (8008b94 <__errno+0x8>)
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2000002c 	.word	0x2000002c

08008b98 <__libc_init_array>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8008bd0 <__libc_init_array+0x38>)
 8008b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8008bd4 <__libc_init_array+0x3c>)
 8008b9e:	1b64      	subs	r4, r4, r5
 8008ba0:	10a4      	asrs	r4, r4, #2
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	42a6      	cmp	r6, r4
 8008ba6:	d109      	bne.n	8008bbc <__libc_init_array+0x24>
 8008ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8008bd8 <__libc_init_array+0x40>)
 8008baa:	4c0c      	ldr	r4, [pc, #48]	@ (8008bdc <__libc_init_array+0x44>)
 8008bac:	f000 f864 	bl	8008c78 <_init>
 8008bb0:	1b64      	subs	r4, r4, r5
 8008bb2:	10a4      	asrs	r4, r4, #2
 8008bb4:	2600      	movs	r6, #0
 8008bb6:	42a6      	cmp	r6, r4
 8008bb8:	d105      	bne.n	8008bc6 <__libc_init_array+0x2e>
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc0:	4798      	blx	r3
 8008bc2:	3601      	adds	r6, #1
 8008bc4:	e7ee      	b.n	8008ba4 <__libc_init_array+0xc>
 8008bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bca:	4798      	blx	r3
 8008bcc:	3601      	adds	r6, #1
 8008bce:	e7f2      	b.n	8008bb6 <__libc_init_array+0x1e>
 8008bd0:	08008cb4 	.word	0x08008cb4
 8008bd4:	08008cb4 	.word	0x08008cb4
 8008bd8:	08008cb4 	.word	0x08008cb4
 8008bdc:	08008cb8 	.word	0x08008cb8

08008be0 <__retarget_lock_acquire_recursive>:
 8008be0:	4770      	bx	lr

08008be2 <__retarget_lock_release_recursive>:
 8008be2:	4770      	bx	lr

08008be4 <_free_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4605      	mov	r5, r0
 8008be8:	2900      	cmp	r1, #0
 8008bea:	d041      	beq.n	8008c70 <_free_r+0x8c>
 8008bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf0:	1f0c      	subs	r4, r1, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfb8      	it	lt
 8008bf6:	18e4      	addlt	r4, r4, r3
 8008bf8:	f7ff ffa4 	bl	8008b44 <__malloc_lock>
 8008bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8008c74 <_free_r+0x90>)
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	b933      	cbnz	r3, 8008c10 <_free_r+0x2c>
 8008c02:	6063      	str	r3, [r4, #4]
 8008c04:	6014      	str	r4, [r2, #0]
 8008c06:	4628      	mov	r0, r5
 8008c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0c:	f7ff bfa0 	b.w	8008b50 <__malloc_unlock>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d908      	bls.n	8008c26 <_free_r+0x42>
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	1821      	adds	r1, r4, r0
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf01      	itttt	eq
 8008c1c:	6819      	ldreq	r1, [r3, #0]
 8008c1e:	685b      	ldreq	r3, [r3, #4]
 8008c20:	1809      	addeq	r1, r1, r0
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	e7ed      	b.n	8008c02 <_free_r+0x1e>
 8008c26:	461a      	mov	r2, r3
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b10b      	cbz	r3, 8008c30 <_free_r+0x4c>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d9fa      	bls.n	8008c26 <_free_r+0x42>
 8008c30:	6811      	ldr	r1, [r2, #0]
 8008c32:	1850      	adds	r0, r2, r1
 8008c34:	42a0      	cmp	r0, r4
 8008c36:	d10b      	bne.n	8008c50 <_free_r+0x6c>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	4401      	add	r1, r0
 8008c3c:	1850      	adds	r0, r2, r1
 8008c3e:	4283      	cmp	r3, r0
 8008c40:	6011      	str	r1, [r2, #0]
 8008c42:	d1e0      	bne.n	8008c06 <_free_r+0x22>
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	6053      	str	r3, [r2, #4]
 8008c4a:	4408      	add	r0, r1
 8008c4c:	6010      	str	r0, [r2, #0]
 8008c4e:	e7da      	b.n	8008c06 <_free_r+0x22>
 8008c50:	d902      	bls.n	8008c58 <_free_r+0x74>
 8008c52:	230c      	movs	r3, #12
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	e7d6      	b.n	8008c06 <_free_r+0x22>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	1821      	adds	r1, r4, r0
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf04      	itt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	bf04      	itt	eq
 8008c68:	1809      	addeq	r1, r1, r0
 8008c6a:	6021      	streq	r1, [r4, #0]
 8008c6c:	6054      	str	r4, [r2, #4]
 8008c6e:	e7ca      	b.n	8008c06 <_free_r+0x22>
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	2000094c 	.word	0x2000094c

08008c78 <_init>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr

08008c84 <_fini>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr
