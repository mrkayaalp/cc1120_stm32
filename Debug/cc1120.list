
cc1120.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008434  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008614  08008614  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008614  08008614  00018614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800861c  0800861c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  2000007c  080086a0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  080086a0  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190bd  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ce  00000000  00000000  000391ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  0003d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e86  00000000  00000000  0003e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e88  00000000  00000000  0003f606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b632  00000000  00000000  0006448e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2af9  00000000  00000000  0007fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050f8  00000000  00000000  001525bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001576b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080085e0 	.word	0x080085e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	080085e0 	.word	0x080085e0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <rfRunRx>:
/*-------------------------------RX--------------------------*/

/*!
* @brief This API sets the CC1120 radio for RX mode.
*/
RfChipStatus_t rfRunRx() {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  RfChipStatus_t chipstatus;
  // Strobe RX to receive packet
  chipstatus = trxSpiCmdStrobe(CC112X_SRX);
 8000506:	2034      	movs	r0, #52	; 0x34
 8000508:	f000 f9f4 	bl	80008f4 <trxSpiCmdStrobe>
 800050c:	4603      	mov	r3, r0
 800050e:	71fb      	strb	r3, [r7, #7]
}
 8000510:	bf00      	nop
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <rfRecieveRxPacket>:

/*!
* @brief This API recieve the  RX buffer.
*/
RfChipStatus_t rfRecieveRxPacket() {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  RfChipStatus_t chipstatus;
  chipstatus = cc112xSpiReadReg(CC112X_NUM_RXBYTES, &rxBytes, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	491c      	ldr	r1, [pc, #112]	; (8000598 <rfRecieveRxPacket+0x7c>)
 8000526:	f642 70d7 	movw	r0, #12247	; 0x2fd7
 800052a:	f000 f86d 	bl	8000608 <cc112xSpiReadReg>
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]

  // Check that we have bytes in FIFO
  if (rxBytes != 0) {
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <rfRecieveRxPacket+0x7c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d029      	beq.n	800058e <rfRecieveRxPacket+0x72>

    // Read MARCSTATE to check for RX FIFO error
    chipstatus = cc112xSpiReadReg(CC1120_MARCSTATE, &marcState, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	4917      	ldr	r1, [pc, #92]	; (800059c <rfRecieveRxPacket+0x80>)
 800053e:	f642 7073 	movw	r0, #12147	; 0x2f73
 8000542:	f000 f861 	bl	8000608 <cc112xSpiReadReg>
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]

    // Mask out MARCSTATE bits and check if we have a RX FIFO error
    if ((marcState & 0x1F) == RX_FIFO_ERROR) {
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <rfRecieveRxPacket+0x80>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	f003 031f 	and.w	r3, r3, #31
 8000552:	2b11      	cmp	r3, #17
 8000554:	d105      	bne.n	8000562 <rfRecieveRxPacket+0x46>

      // Flush RX FIFO
      chipstatus = trxSpiCmdStrobe(CC112X_SFRX);
 8000556:	203a      	movs	r0, #58	; 0x3a
 8000558:	f000 f9cc 	bl	80008f4 <trxSpiCmdStrobe>
 800055c:	4603      	mov	r3, r0
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	e015      	b.n	800058e <rfRecieveRxPacket+0x72>
    }
    else {

      // Read n bytes from RX FIFO
      chipstatus = cc112xSpiReadRxFifo(rxBuffer, rxBytes);
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <rfRecieveRxPacket+0x7c>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <rfRecieveRxPacket+0x84>)
 800056a:	f000 f882 	bl	8000672 <cc112xSpiReadRxFifo>
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]

      // Check CRC ok (CRC_OK: bit7 in second status byte)
      // This assumes status bytes are appended in RX_FIFO
      // (PKT_CFG1.APPEND_STATUS = 1)
      // If CRC is disabled the CRC_OK field will read 1
      if (rxBuffer[rxBytes - 1] & 0x80) {
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <rfRecieveRxPacket+0x7c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <rfRecieveRxPacket+0x84>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	b25b      	sxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	da05      	bge.n	800058e <rfRecieveRxPacket+0x72>

        // Update packet counter
        rxPacketCounter++;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <rfRecieveRxPacket+0x88>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <rfRecieveRxPacket+0x88>)
 800058c:	801a      	strh	r2, [r3, #0]
      }
    }
  }
  return chipstatus;
 800058e:	79fb      	ldrb	r3, [r7, #7]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000011c 	.word	0x2000011c
 800059c:	2000011d 	.word	0x2000011d
 80005a0:	2000009c 	.word	0x2000009c
 80005a4:	20000098 	.word	0x20000098

080005a8 <cc1120SpiTRx>:

/*!
 * @brief spi communication func. for CC1120
 */
RfSerialStatus_t cc1120SpiTRx(uint8_t *txbuffer, uint8_t *rxbuffer)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  RfSerialStatus_t status = RF_SERIAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]


      status = HAL_SPI_TransmitReceive(&hspi1, txbuffer, rxbuffer, 1, 250);
 80005b6:	23fa      	movs	r3, #250	; 0xfa
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <cc1120SpiTRx+0x2c>)
 80005c2:	f003 fede 	bl	8004382 <HAL_SPI_TransmitReceive>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]


  return status;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000174 	.word	0x20000174

080005d8 <cc1120_startTransaction>:

/*!
 * @brief Sets CS High
 */
void cc1120_startTransaction()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CC1120_CS_GPIO_Port, CC1120_CS_Pin, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <cc1120_startTransaction+0x14>)
 80005e2:	f001 f839 	bl	8001658 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020000 	.word	0x40020000

080005f0 <cc1120_endTransaction>:

/*!
 * @brief Sets CS Low
 */
void cc1120_endTransaction()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CC1120_CS_GPIO_Port, CC1120_CS_Pin, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2110      	movs	r1, #16
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <cc1120_endTransaction+0x14>)
 80005fa:	f001 f82d 	bl	8001658 <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000

08000608 <cc112xSpiReadReg>:
 * output parameters
 *
 * @return      RfChipStatus_t
 */
RfChipStatus_t cc112xSpiReadReg(uint16 addr, uint8 *pData, uint8 len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	717b      	strb	r3, [r7, #5]
  uint8 tempExt = (uint8)(addr >> 8);
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b29b      	uxth	r3, r3
 800061e:	73bb      	strb	r3, [r7, #14]
  uint8 tempAddr = (uint8)(addr & 0x00FF);
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	737b      	strb	r3, [r7, #13]
  RfChipStatus_t chipstatus;

  /* Checking if this is a FIFO access -> returns chip not ready  */
  if ((CC112X_SINGLE_TXFIFO <= tempAddr) && (tempExt == 0))
 8000624:	7b7b      	ldrb	r3, [r7, #13]
 8000626:	2b3e      	cmp	r3, #62	; 0x3e
 8000628:	d904      	bls.n	8000634 <cc112xSpiReadReg+0x2c>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <cc112xSpiReadReg+0x2c>
    return STATUS_CHIP_RDYn_BM;
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	e01a      	b.n	800066a <cc112xSpiReadReg+0x62>

  /* Decide what register space is accessed */
  if (!tempExt)
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <cc112xSpiReadReg+0x46>
  {
    chipstatus = trx8BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempAddr, pData, len);
 800063a:	797b      	ldrb	r3, [r7, #5]
 800063c:	b29b      	uxth	r3, r3
 800063e:	7b79      	ldrb	r1, [r7, #13]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	20c0      	movs	r0, #192	; 0xc0
 8000644:	f000 f8d6 	bl	80007f4 <trx8BitRegAccess>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e00c      	b.n	8000668 <cc112xSpiReadReg+0x60>
  }
  else if (tempExt == 0x2F) // extended register space command
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	2b2f      	cmp	r3, #47	; 0x2f
 8000652:	d109      	bne.n	8000668 <cc112xSpiReadReg+0x60>
  {
    chipstatus = trx16BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempExt, tempAddr, pData, len);
 8000654:	7b7a      	ldrb	r2, [r7, #13]
 8000656:	7bb9      	ldrb	r1, [r7, #14]
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	20c0      	movs	r0, #192	; 0xc0
 8000660:	f000 f900 	bl	8000864 <trx16BitRegAccess>
 8000664:	4603      	mov	r3, r0
 8000666:	73fb      	strb	r3, [r7, #15]
  }
  return (chipstatus);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <cc112xSpiReadRxFifo>:
 * output parameters
 *
 * @return      RfChipStatus_t
 */
RfChipStatus_t cc112xSpiReadRxFifo(uint8 *pData, uint8 len)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	70fb      	strb	r3, [r7, #3]
  RfChipStatus_t chipstatus;
  chipstatus = trx8BitRegAccess(0x00, CC112X_BURST_RXFIFO, pData, len);
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	b29b      	uxth	r3, r3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	21ff      	movs	r1, #255	; 0xff
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f8b4 	bl	80007f4 <trx8BitRegAccess>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
  return (chipstatus);
 8000690:	7bfb      	ldrb	r3, [r7, #15]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a4a      	ldr	r2, [pc, #296]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b48      	ldr	r3, [pc, #288]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a43      	ldr	r2, [pc, #268]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a3c      	ldr	r2, [pc, #240]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <MX_GPIO_Init+0x148>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <MX_GPIO_Init+0x148>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a35      	ldr	r2, [pc, #212]	; (80007e4 <MX_GPIO_Init+0x148>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <MX_GPIO_Init+0x148>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	4830      	ldr	r0, [pc, #192]	; (80007e8 <MX_GPIO_Init+0x14c>)
 8000728:	f000 ff96 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HGM_CC1190_Pin|LNA_EN_CC1190_Pin|USERLED2_Pin|USERLED_Pin
 800072c:	2200      	movs	r2, #0
 800072e:	f24c 0138 	movw	r1, #49208	; 0xc038
 8000732:	482e      	ldr	r0, [pc, #184]	; (80007ec <MX_GPIO_Init+0x150>)
 8000734:	f000 ff90 	bl	8001658 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA_EN_CC11190_GPIO_Port, PA_EN_CC11190_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	482c      	ldr	r0, [pc, #176]	; (80007f0 <MX_GPIO_Init+0x154>)
 800073e:	f000 ff8b 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000742:	2310      	movs	r3, #16
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4823      	ldr	r0, [pc, #140]	; (80007e8 <MX_GPIO_Init+0x14c>)
 800075a:	f000 fde9 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HGM_CC1190_Pin|LNA_EN_CC1190_Pin|USERLED2_Pin|USERLED_Pin
 800075e:	f24c 0338 	movw	r3, #49208	; 0xc038
 8000762:	617b      	str	r3, [r7, #20]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <MX_GPIO_Init+0x150>)
 8000778:	f000 fdda 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA_EN_CC11190_Pin;
 800077c:	2340      	movs	r3, #64	; 0x40
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PA_EN_CC11190_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <MX_GPIO_Init+0x154>)
 8000794:	f000 fdcc 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO3_CC1120_Pin;
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO3_CC1120_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0x154>)
 80007ac:	f000 fdc0 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO2_CC1120_EXTI_Pin|GPIO0_CC1120_EXTI_Pin;
 80007b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480a      	ldr	r0, [pc, #40]	; (80007f0 <MX_GPIO_Init+0x154>)
 80007c8:	f000 fdb2 	bl	8001330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2017      	movs	r0, #23
 80007d2:	f000 fd76 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007d6:	2017      	movs	r0, #23
 80007d8:	f000 fd8f 	bl	80012fa <HAL_NVIC_EnableIRQ>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40020800 	.word	0x40020800

080007f4 <trx8BitRegAccess>:
  * output parameters
  *
  * @return      chip status
  */
RfChipStatus_t trx8BitRegAccess(uint8 accessType, uint8 addrByte, uint8* pData, uint16 len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	603a      	str	r2, [r7, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	460b      	mov	r3, r1
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	4613      	mov	r3, r2
 8000808:	80bb      	strh	r3, [r7, #4]
  RfChipStatus_t chipstatus;
  RfSerialStatus_t serailstatus;
  uint8_t txbuffer = accessType | addrByte;
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	4313      	orrs	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	737b      	strb	r3, [r7, #13]

  /* Pull CS_N low and wait for SO to go low before communication starts */

  cc1120_startTransaction();
 8000814:	f7ff fee0 	bl	80005d8 <cc1120_startTransaction>
  /*TRXEM_SPI_TX(accessType|addrByte);
  TRXEM_SPI_WAIT_DONE();
  */


  serailstatus = cc1120SpiTRx(&txbuffer, &chipstatus); //rx will be chip status
 8000818:	f107 020e 	add.w	r2, r7, #14
 800081c:	f107 030d 	add.w	r3, r7, #13
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fec0 	bl	80005a8 <cc1120SpiTRx>
 8000828:	4603      	mov	r3, r0
 800082a:	73fb      	strb	r3, [r7, #15]
  while (hspi1.State != HAL_SPI_STATE_READY);
 800082c:	bf00      	nop
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <trx8BitRegAccess+0x6c>)
 8000830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b01      	cmp	r3, #1
 8000838:	d1f9      	bne.n	800082e <trx8BitRegAccess+0x3a>

  /* Storing chip status */
  serailstatus = trxReadWriteBurstSingle(accessType | addrByte, pData, len);
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	4313      	orrs	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	88ba      	ldrh	r2, [r7, #4]
 8000844:	6839      	ldr	r1, [r7, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f87e 	bl	8000948 <trxReadWriteBurstSingle>
 800084c:	4603      	mov	r3, r0
 800084e:	73fb      	strb	r3, [r7, #15]
  cc1120_endTransaction();
 8000850:	f7ff fece 	bl	80005f0 <cc1120_endTransaction>
  /* return the status byte value */
  return(chipstatus);
 8000854:	7bbb      	ldrb	r3, [r7, #14]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000174 	.word	0x20000174

08000864 <trx16BitRegAccess>:
 * output parameters
 *
 * @return      RfChipStatus_t
 */
RfChipStatus_t trx16BitRegAccess(uint8 accessType, uint8 extAddr, uint8 regAddr, uint8* pData, uint8 len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	460b      	mov	r3, r1
 8000872:	71bb      	strb	r3, [r7, #6]
 8000874:	4613      	mov	r3, r2
 8000876:	717b      	strb	r3, [r7, #5]
  RfChipStatus_t chipstatus;
  RfSerialStatus_t serailstatus;
  uint8_t rxbuffer;
  uint8_t txbuffer = accessType | extAddr;
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	4313      	orrs	r3, r2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	733b      	strb	r3, [r7, #12]

  cc1120_startTransaction();
 8000882:	f7ff fea9 	bl	80005d8 <cc1120_startTransaction>
  //TRXEM_SPI_BEGIN();
  //while(TRXEM_PORT_IN & TRXEM_SPI_MISO_PIN);

  /* send extended address byte with access type bits set */
  serailstatus = cc1120SpiTRx(&txbuffer, &chipstatus); //rxbuffer will be chip status
 8000886:	f107 020e 	add.w	r2, r7, #14
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fe89 	bl	80005a8 <cc1120SpiTRx>
 8000896:	4603      	mov	r3, r0
 8000898:	73fb      	strb	r3, [r7, #15]
  // extended command
  while (hspi1.State != HAL_SPI_STATE_READY);
 800089a:	bf00      	nop
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <trx16BitRegAccess+0x8c>)
 800089e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d1f9      	bne.n	800089c <trx16BitRegAccess+0x38>
  /* Storing chip status */
  //readValue = TRXEM_SPI_RX();
  //TRXEM_SPI_TX(regAddr);
  //TRXEM_SPI_WAIT_DONE();
  serailstatus = cc1120SpiTRx(&regAddr, &rxbuffer);
 80008a8:	f107 020d 	add.w	r2, r7, #13
 80008ac:	1d7b      	adds	r3, r7, #5
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe79 	bl	80005a8 <cc1120SpiTRx>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]
  while (hspi1.State != HAL_SPI_STATE_READY);
 80008ba:	bf00      	nop
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <trx16BitRegAccess+0x8c>)
 80008be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d1f9      	bne.n	80008bc <trx16BitRegAccess+0x58>

  /* Communicate len number of bytes */
  serailstatus = trxReadWriteBurstSingle(accessType | extAddr, pData, len);
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	7e3a      	ldrb	r2, [r7, #24]
 80008d2:	b292      	uxth	r2, r2
 80008d4:	6839      	ldr	r1, [r7, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f836 	bl	8000948 <trxReadWriteBurstSingle>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
  //TRXEM_SPI_END();
  cc1120_endTransaction();
 80008e0:	f7ff fe86 	bl	80005f0 <cc1120_endTransaction>
  /* return the status byte value */
  return(chipstatus);
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000174 	.word	0x20000174

080008f4 <trxSpiCmdStrobe>:
 * output parameters
 *
 * @return      status byte
 */
RfChipStatus_t trxSpiCmdStrobe(uint8 cmd)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  RfChipStatus_t chipstatus;
  RfSerialStatus_t serailstatus;
  uint8_t txbuffer = cmd;
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	737b      	strb	r3, [r7, #13]

  cc1120_startTransaction();
 8000902:	f7ff fe69 	bl	80005d8 <cc1120_startTransaction>
  while (hspi1.State != HAL_SPI_STATE_READY);
 8000906:	bf00      	nop
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <trxSpiCmdStrobe+0x50>)
 800090a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b01      	cmp	r3, #1
 8000912:	d1f9      	bne.n	8000908 <trxSpiCmdStrobe+0x14>
  //TRXEM_SPI_BEGIN();
  //while(TRXEM_PORT_IN & TRXEM_SPI_MISO_PIN);
  serailstatus = cc1120SpiTRx(&txbuffer, &chipstatus);
 8000914:	f107 020e 	add.w	r2, r7, #14
 8000918:	f107 030d 	add.w	r3, r7, #13
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe42 	bl	80005a8 <cc1120SpiTRx>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
  while (hspi1.State != HAL_SPI_STATE_READY);
 8000928:	bf00      	nop
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <trxSpiCmdStrobe+0x50>)
 800092c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b01      	cmp	r3, #1
 8000934:	d1f9      	bne.n	800092a <trxSpiCmdStrobe+0x36>
  //TRXEM_SPI_TX(cmd);
  //TRXEM_SPI_WAIT_DONE();
  //rc = TRXEM_SPI_RX();
  //TRXEM_SPI_END();
  cc1120_endTransaction();
 8000936:	f7ff fe5b 	bl	80005f0 <cc1120_endTransaction>

  return(chipstatus);
 800093a:	7bbb      	ldrb	r3, [r7, #14]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000174 	.word	0x20000174

08000948 <trxReadWriteBurstSingle>:
 * output parameters
 *
 * @return      RfSerialStatus_t
 */
static RfSerialStatus_t trxReadWriteBurstSingle(uint8 addr, uint8* pData, uint16 len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	80bb      	strh	r3, [r7, #4]
  uint16 i;
  uint8_t buffer = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	733b      	strb	r3, [r7, #12]


  RfSerialStatus_t serailstatus;
  /* Communicate len number of bytes: if RX - the procedure sends 0x00 to push bytes from slave*/
  if (addr & RADIO_READ_ACCESS)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da2f      	bge.n	80009c4 <trxReadWriteBurstSingle+0x7c>
  {
    if (addr & RADIO_BURST_ACCESS)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096a:	2b00      	cmp	r3, #0
 800096c:	d01b      	beq.n	80009a6 <trxReadWriteBurstSingle+0x5e>
    {
      for (i = 0; i < len; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	81fb      	strh	r3, [r7, #14]
 8000972:	e013      	b.n	800099c <trxReadWriteBurstSingle+0x54>
      {
        //TRXEM_SPI_TX(0);            /* Possible to combining read and write as one access type */
        //TRXEM_SPI_WAIT_DONE();
        //*pData = TRXEM_SPI_RX();     /* Store pData from last pData RX */
        serailstatus = cc1120SpiTRx(buffer, pData);
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	6839      	ldr	r1, [r7, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fe15 	bl	80005a8 <cc1120SpiTRx>
 800097e:	4603      	mov	r3, r0
 8000980:	737b      	strb	r3, [r7, #13]
        while (hspi1.State != HAL_SPI_STATE_READY);
 8000982:	bf00      	nop
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <trxReadWriteBurstSingle+0xe4>)
 8000986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b01      	cmp	r3, #1
 800098e:	d1f9      	bne.n	8000984 <trxReadWriteBurstSingle+0x3c>
        pData++;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	603b      	str	r3, [r7, #0]
      for (i = 0; i < len; i++)
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	81fb      	strh	r3, [r7, #14]
 800099c:	89fa      	ldrh	r2, [r7, #14]
 800099e:	88bb      	ldrh	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d3e7      	bcc.n	8000974 <trxReadWriteBurstSingle+0x2c>
 80009a4:	e03d      	b.n	8000a22 <trxReadWriteBurstSingle+0xda>
      }
    }
    else
    {
      serailstatus = cc1120SpiTRx(buffer, pData);
 80009a6:	7b3b      	ldrb	r3, [r7, #12]
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fdfc 	bl	80005a8 <cc1120SpiTRx>
 80009b0:	4603      	mov	r3, r0
 80009b2:	737b      	strb	r3, [r7, #13]
      while (hspi1.State != HAL_SPI_STATE_READY);
 80009b4:	bf00      	nop
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <trxReadWriteBurstSingle+0xe4>)
 80009b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d1f9      	bne.n	80009b6 <trxReadWriteBurstSingle+0x6e>
 80009c2:	e02e      	b.n	8000a22 <trxReadWriteBurstSingle+0xda>
    }
  }
  else
  {
    if (addr & RADIO_BURST_ACCESS)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d01b      	beq.n	8000a06 <trxReadWriteBurstSingle+0xbe>
    {
      /* Communicate len number of bytes: if TX - the procedure doesn't overwrite pData */
      for (i = 0; i < len; i++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	81fb      	strh	r3, [r7, #14]
 80009d2:	e013      	b.n	80009fc <trxReadWriteBurstSingle+0xb4>
      {
        serailstatus = cc1120SpiTRx(pData, buffer);
 80009d4:	7b3b      	ldrb	r3, [r7, #12]
 80009d6:	4619      	mov	r1, r3
 80009d8:	6838      	ldr	r0, [r7, #0]
 80009da:	f7ff fde5 	bl	80005a8 <cc1120SpiTRx>
 80009de:	4603      	mov	r3, r0
 80009e0:	737b      	strb	r3, [r7, #13]
        while (hspi1.State != HAL_SPI_STATE_READY);
 80009e2:	bf00      	nop
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <trxReadWriteBurstSingle+0xe4>)
 80009e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d1f9      	bne.n	80009e4 <trxReadWriteBurstSingle+0x9c>
        pData++;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	603b      	str	r3, [r7, #0]
      for (i = 0; i < len; i++)
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	3301      	adds	r3, #1
 80009fa:	81fb      	strh	r3, [r7, #14]
 80009fc:	89fa      	ldrh	r2, [r7, #14]
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3e7      	bcc.n	80009d4 <trxReadWriteBurstSingle+0x8c>
 8000a04:	e00d      	b.n	8000a22 <trxReadWriteBurstSingle+0xda>
      }
    }
    else
    {
      serailstatus = cc1120SpiTRx(pData, buffer); // txbuffer'ı öylesine koydum buraya
 8000a06:	7b3b      	ldrb	r3, [r7, #12]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6838      	ldr	r0, [r7, #0]
 8000a0c:	f7ff fdcc 	bl	80005a8 <cc1120SpiTRx>
 8000a10:	4603      	mov	r3, r0
 8000a12:	737b      	strb	r3, [r7, #13]
      while (hspi1.State != HAL_SPI_STATE_READY);
 8000a14:	bf00      	nop
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <trxReadWriteBurstSingle+0xe4>)
 8000a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d1f9      	bne.n	8000a16 <trxReadWriteBurstSingle+0xce>
    }
  }
  return serailstatus;
 8000a22:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000174 	.word	0x20000174

08000a30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a36:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <MX_I2C1_Init+0x54>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x58>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a6e:	f002 fa2f 	bl	8002ed0 <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 f8e2 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000120 	.word	0x20000120
 8000a84:	40005400 	.word	0x40005400
 8000a88:	000186a0 	.word	0x000186a0

08000a8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_I2C_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12b      	bne.n	8000b06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aca:	23c0      	movs	r3, #192	; 0xc0
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <HAL_I2C_MspInit+0x8c>)
 8000ae6:	f000 fc23 	bl	8001330 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020400 	.word	0x40020400

08000b1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO2_CC1120_EXTI_Pin) {
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b2c:	d103      	bne.n	8000b36 <HAL_GPIO_EXTI_Callback+0x1a>

    //CRC_OK Recieve Handler
    rfRecieveRxPacket();
 8000b2e:	f7ff fcf5 	bl	800051c <rfRecieveRxPacket>
    rfRunRx();
 8000b32:	f7ff fce5 	bl	8000500 <rfRunRx>
  }
    if (GPIO_Pin == GPIO0_CC1120_EXTI_Pin) {
      //RXFIFO_THR Handler
    }
  }
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <main>:
  /**
    * @brief  The application entry point.
    * @retval int
    */
  int main(void)
  {
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000b42:	f000 fa4d 	bl	8000fe0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000b46:	f000 f80d 	bl	8000b64 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000b4a:	f7ff fda7 	bl	800069c <MX_GPIO_Init>
    MX_SPI1_Init();
 8000b4e:	f000 f87d 	bl	8000c4c <MX_SPI1_Init>
    MX_I2C1_Init();
 8000b52:	f7ff ff6d 	bl	8000a30 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000b56:	f000 f9a7 	bl	8000ea8 <MX_USART1_UART_Init>
    MX_USB_HOST_Init();
 8000b5a:	f007 f90b 	bl	8007d74 <MX_USB_HOST_Init>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
      /* USER CODE END WHILE */
      MX_USB_HOST_Process();
 8000b5e:	f007 f92f 	bl	8007dc0 <MX_USB_HOST_Process>
 8000b62:	e7fc      	b.n	8000b5e <main+0x20>

08000b64 <SystemClock_Config>:
  /**
    * @brief System Clock Configuration
    * @retval None
    */
  void SystemClock_Config(void)
  {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2234      	movs	r2, #52	; 0x34
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 fca4 	bl	80084c0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <SystemClock_Config+0xd4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <SystemClock_Config+0xd4>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <SystemClock_Config+0xd4>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <SystemClock_Config+0xd8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb0:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <SystemClock_Config+0xd8>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <SystemClock_Config+0xd8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 15;
 8000bd8:	230f      	movs	r3, #15
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 144;
 8000bdc:	2390      	movs	r3, #144	; 0x90
 8000bde:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8000be4:	2305      	movs	r3, #5
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f89f 	bl	8003d34 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x9c>
    {
      Error_Handler();
 8000bfc:	f000 f820 	bl	8000c40 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	60bb      	str	r3, [r7, #8]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c10:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fa9a 	bl	8003158 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xca>
    {
      Error_Handler();
 8000c2a:	f000 f809 	bl	8000c40 <Error_Handler>
    }
  }
 8000c2e:	bf00      	nop
 8000c30:	3750      	adds	r7, #80	; 0x50
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000

08000c40 <Error_Handler>:
  /**
    * @brief  This function is executed in case of error occurrence.
    * @retval None
    */
  void Error_Handler(void)
  {
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MX_SPI1_Init+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c80:	2220      	movs	r2, #32
 8000c82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c98:	220a      	movs	r2, #10
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c9e:	f003 fae7 	bl	8004270 <HAL_SPI_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca8:	f7ff ffca 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000174 	.word	0x20000174
 8000cb4:	40013000 	.word	0x40013000

08000cb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_SPI_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12b      	bne.n	8000d32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23e0      	movs	r3, #224	; 0xe0
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d22:	2305      	movs	r3, #5
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_SPI_MspInit+0x8c>)
 8000d2e:	f000 faff 	bl	8001330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40013000 	.word	0x40013000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f94e 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO2_CC1120_EXTI_Pin);
 8000df0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000df4:	f000 fc4a 	bl	800168c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO0_CC1120_EXTI_Pin);
 8000df8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dfc:	f000 fc46 	bl	800168c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <OTG_FS_IRQHandler+0x10>)
 8000e0a:	f000 fec1 	bl	8001b90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200005f4 	.word	0x200005f4

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f007 fb52 	bl	80084f0 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200001cc 	.word	0x200001cc
 8000e80:	20000a40 	.word	0x20000a40

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART1_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	f003 fcbc 	bl	800485c <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f7ff fea9 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200001d0 	.word	0x200001d0
 8000ef8:	40011000 	.word	0x40011000

08000efc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12c      	bne.n	8000f78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_UART_MspInit+0x8c>)
 8000f74:	f000 f9dc 	bl	8001330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ff65 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f007 fa9f 	bl	80084fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fdbe 	bl	8000b3e <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fd0:	08008624 	.word	0x08008624
  ldr r2, =_sbss
 8000fd4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fd8:	20000a40 	.word	0x20000a40

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_Init+0x40>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_Init+0x40>)
 8000ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x40>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f94f 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	200f      	movs	r0, #15
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fe98 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f967 	bl	8001316 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f92f 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000214 	.word	0x20000214

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000214 	.word	0x20000214

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff3e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e165      	b.n	8001618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8154 	bne.w	8001612 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80ae 	beq.w	8001612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <HAL_GPIO_Init+0x300>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a5c      	ldr	r2, [pc, #368]	; (8001630 <HAL_GPIO_Init+0x300>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b5a      	ldr	r3, [pc, #360]	; (8001630 <HAL_GPIO_Init+0x300>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_GPIO_Init+0x304>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4f      	ldr	r2, [pc, #316]	; (8001638 <HAL_GPIO_Init+0x308>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d025      	beq.n	800154a <HAL_GPIO_Init+0x21a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_GPIO_Init+0x30c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x216>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4d      	ldr	r2, [pc, #308]	; (8001640 <HAL_GPIO_Init+0x310>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x212>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_GPIO_Init+0x314>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x20e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4b      	ldr	r2, [pc, #300]	; (8001648 <HAL_GPIO_Init+0x318>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x20a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4a      	ldr	r2, [pc, #296]	; (800164c <HAL_GPIO_Init+0x31c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x206>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_GPIO_Init+0x320>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x202>
 800152e:	2306      	movs	r3, #6
 8001530:	e00c      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001532:	2307      	movs	r3, #7
 8001534:	e00a      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001536:	2305      	movs	r3, #5
 8001538:	e008      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800153a:	2304      	movs	r3, #4
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800153e:	2303      	movs	r3, #3
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800154a:	2300      	movs	r3, #0
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155c:	4935      	ldr	r1, [pc, #212]	; (8001634 <HAL_GPIO_Init+0x304>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156a:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <HAL_GPIO_Init+0x324>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <HAL_GPIO_Init+0x324>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_GPIO_Init+0x324>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_GPIO_Init+0x324>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	f67f ae96 	bls.w	800134c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40013800 	.word	0x40013800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020800 	.word	0x40020800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40021000 	.word	0x40021000
 800164c:	40021400 	.word	0x40021400
 8001650:	40021800 	.word	0x40021800
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fa36 	bl	8000b1c <HAL_GPIO_EXTI_Callback>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	b08f      	sub	sp, #60	; 0x3c
 80016c0:	af0a      	add	r7, sp, #40	; 0x28
 80016c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e054      	b.n	8001778 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d106      	bne.n	80016ee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f006 fba1 	bl	8007e30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fbd9 	bl	8004ec4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	687e      	ldr	r6, [r7, #4]
 800171a:	466d      	mov	r5, sp
 800171c:	f106 0410 	add.w	r4, r6, #16
 8001720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800172c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001730:	1d33      	adds	r3, r6, #4
 8001732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f003 fb53 	bl	8004de0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fbd0 	bl	8004ee6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	687e      	ldr	r6, [r7, #4]
 800174e:	466d      	mov	r5, sp
 8001750:	f106 0410 	add.w	r4, r6, #16
 8001754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001760:	e885 0003 	stmia.w	r5, {r0, r1}
 8001764:	1d33      	adds	r3, r6, #4
 8001766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f003 fd59 	bl	8005220 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001780 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	70fb      	strb	r3, [r7, #3]
 8001792:	460b      	mov	r3, r1
 8001794:	70bb      	strb	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_HCD_HC_Init+0x28>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e076      	b.n	8001896 <HAL_HCD_HC_Init+0x116>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	333d      	adds	r3, #61	; 0x3d
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3338      	adds	r3, #56	; 0x38
 80017d0:	787a      	ldrb	r2, [r7, #1]
 80017d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3340      	adds	r3, #64	; 0x40
 80017e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017e4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	3339      	adds	r3, #57	; 0x39
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	212c      	movs	r1, #44	; 0x2c
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	333f      	adds	r3, #63	; 0x3f
 8001806:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	78ba      	ldrb	r2, [r7, #2]
 8001810:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001814:	b2d0      	uxtb	r0, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	333a      	adds	r3, #58	; 0x3a
 8001822:	4602      	mov	r2, r0
 8001824:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001826:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800182a:	2b00      	cmp	r3, #0
 800182c:	da09      	bge.n	8001842 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	333b      	adds	r3, #59	; 0x3b
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e008      	b.n	8001854 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333b      	adds	r3, #59	; 0x3b
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	333c      	adds	r3, #60	; 0x3c
 8001862:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001866:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	787c      	ldrb	r4, [r7, #1]
 800186e:	78ba      	ldrb	r2, [r7, #2]
 8001870:	78f9      	ldrb	r1, [r7, #3]
 8001872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	4623      	mov	r3, r4
 8001884:	f003 fe46 	bl	8005514 <USB_HC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}

0800189e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_HCD_HC_Halt+0x1e>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e00f      	b.n	80018dc <HAL_HCD_HC_Halt+0x3e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f004 f896 	bl	80059fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	70fb      	strb	r3, [r7, #3]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70bb      	strb	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	212c      	movs	r1, #44	; 0x2c
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	333b      	adds	r3, #59	; 0x3b
 800190c:	78ba      	ldrb	r2, [r7, #2]
 800190e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	333f      	adds	r3, #63	; 0x3f
 800191e:	787a      	ldrb	r2, [r7, #1]
 8001920:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001922:	7c3b      	ldrb	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d112      	bne.n	800194e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2203      	movs	r2, #3
 8001938:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	333d      	adds	r3, #61	; 0x3d
 8001948:	7f3a      	ldrb	r2, [r7, #28]
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e008      	b.n	8001960 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2202      	movs	r2, #2
 800195e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b03      	cmp	r3, #3
 8001964:	f200 80c6 	bhi.w	8001af4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	08001ae1 	.word	0x08001ae1
 8001978:	080019e5 	.word	0x080019e5
 800197c:	08001a63 	.word	0x08001a63
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001980:	7c3b      	ldrb	r3, [r7, #16]
 8001982:	2b01      	cmp	r3, #1
 8001984:	f040 80b8 	bne.w	8001af8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001988:	78bb      	ldrb	r3, [r7, #2]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80b4 	bne.w	8001af8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001990:	8b3b      	ldrh	r3, [r7, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3355      	adds	r3, #85	; 0x55
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3355      	adds	r3, #85	; 0x55
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3342      	adds	r3, #66	; 0x42
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ce:	e093      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e089      	b.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019e4:	78bb      	ldrb	r3, [r7, #2]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d11d      	bne.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3355      	adds	r3, #85	; 0x55
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	212c      	movs	r1, #44	; 0x2c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3342      	adds	r3, #66	; 0x42
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a10:	e073      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3342      	adds	r3, #66	; 0x42
 8001a20:	2202      	movs	r2, #2
 8001a22:	701a      	strb	r2, [r3, #0]
      break;
 8001a24:	e069      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3354      	adds	r3, #84	; 0x54
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3342      	adds	r3, #66	; 0x42
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
      break;
 8001a4c:	e055      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	212c      	movs	r1, #44	; 0x2c
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	3342      	adds	r3, #66	; 0x42
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	701a      	strb	r2, [r3, #0]
      break;
 8001a60:	e04b      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a62:	78bb      	ldrb	r3, [r7, #2]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11d      	bne.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3355      	adds	r3, #85	; 0x55
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3342      	adds	r3, #66	; 0x42
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a8e:	e034      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3342      	adds	r3, #66	; 0x42
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
      break;
 8001aa2:	e02a      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3354      	adds	r3, #84	; 0x54
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3342      	adds	r3, #66	; 0x42
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
      break;
 8001aca:	e016      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	212c      	movs	r1, #44	; 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3342      	adds	r3, #66	; 0x42
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e00c      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3342      	adds	r3, #66	; 0x42
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
      break;
 8001af2:	e002      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001af4:	bf00      	nop
 8001af6:	e000      	b.n	8001afa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001af8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3344      	adds	r3, #68	; 0x44
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	8b3a      	ldrh	r2, [r7, #24]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	202c      	movs	r0, #44	; 0x2c
 8001b14:	fb00 f303 	mul.w	r3, r0, r3
 8001b18:	440b      	add	r3, r1
 8001b1a:	334c      	adds	r3, #76	; 0x4c
 8001b1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3360      	adds	r3, #96	; 0x60
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3350      	adds	r3, #80	; 0x50
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3339      	adds	r3, #57	; 0x39
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3361      	adds	r3, #97	; 0x61
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	222c      	movs	r2, #44	; 0x2c
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	3338      	adds	r3, #56	; 0x38
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	18d1      	adds	r1, r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f003 fdea 	bl	8005758 <USB_HC_StartXfer>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop

08001b90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 faf7 	bl	800519a <USB_GetMode>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	f040 80f6 	bne.w	8001da0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fadb 	bl	8005174 <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80ec 	beq.w	8001d9e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fad2 	bl	8005174 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bda:	d104      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001be4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fac2 	bl	8005174 <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bfa:	d104      	bne.n	8001c06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fab2 	bl	8005174 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c1a:	d104      	bne.n	8001c26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 faa2 	bl	8005174 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d103      	bne.n	8001c42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fa94 	bl	8005174 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c56:	d11c      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c60:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c72:	2110      	movs	r1, #16
 8001c74:	6938      	ldr	r0, [r7, #16]
 8001c76:	f003 f983 	bl	8004f80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c7a:	6938      	ldr	r0, [r7, #16]
 8001c7c:	f003 f9b4 	bl	8004fe8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fb7e 	bl	8005388 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f006 f955 	bl	8007f3c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fa6c 	bl	8005174 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca6:	d102      	bne.n	8001cae <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f001 f89e 	bl	8002dea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fa5e 	bl	8005174 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d106      	bne.n	8001cd0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f006 f91e 	bl	8007f04 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fa4d 	bl	8005174 <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d101      	bne.n	8001ce8 <HAL_HCD_IRQHandler+0x158>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_HCD_IRQHandler+0x15a>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0210 	bic.w	r2, r2, #16
 8001cfc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 ffa1 	bl	8002c46 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0210 	orr.w	r2, r2, #16
 8001d12:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fa2b 	bl	8005174 <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d28:	d13a      	bne.n	8001da0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fe54 	bl	80059dc <USB_HC_ReadInterrupt>
 8001d34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e025      	b.n	8001d88 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d018      	beq.n	8001d82 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d66:	d106      	bne.n	8001d76 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8ab 	bl	8001eca <HCD_HC_IN_IRQHandler>
 8001d74:	e005      	b.n	8001d82 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fbf9 	bl	8002574 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3d4      	bcc.n	8001d3c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	e000      	b.n	8001da0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d9e:	bf00      	nop
    }
  }
}
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_HCD_Start+0x16>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e013      	b.n	8001de4 <HAL_HCD_Start+0x3e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fb40 	bl	8005450 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 f864 	bl	8004ea2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_HCD_Stop+0x16>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e00d      	b.n	8001e1e <HAL_HCD_Stop+0x32>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 ff2e 	bl	8005c70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fae2 	bl	80053fc <USB_ResetPort>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3360      	adds	r3, #96	; 0x60
 8001e5c:	781b      	ldrb	r3, [r3, #0]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3350      	adds	r3, #80	; 0x50
 8001e84:	681b      	ldr	r3, [r3, #0]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fb26 	bl	80054f0 <USB_GetCurrentFrame>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fb01 	bl	80054c2 <USB_GetHostSpeed>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d11a      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	461a      	mov	r2, r3
 8001f08:	2304      	movs	r3, #4
 8001f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3361      	adds	r3, #97	; 0x61
 8001f1a:	2206      	movs	r2, #6
 8001f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fd68 	bl	80059fe <USB_HC_Halt>
 8001f2e:	e0af      	b.n	8002090 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f46:	d11b      	bne.n	8001f80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	212c      	movs	r1, #44	; 0x2c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	3361      	adds	r3, #97	; 0x61
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fd40 	bl	80059fe <USB_HC_Halt>
 8001f7e:	e087      	b.n	8002090 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d109      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	6093      	str	r3, [r2, #8]
 8001fa8:	e072      	b.n	8002090 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d11a      	bne.n	8001ff6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2308      	movs	r3, #8
 8001fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3361      	adds	r3, #97	; 0x61
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fd05 	bl	80059fe <USB_HC_Halt>
 8001ff4:	e04c      	b.n	8002090 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200c:	d11b      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	461a      	mov	r2, r3
 800201c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002020:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3361      	adds	r3, #97	; 0x61
 8002030:	2208      	movs	r2, #8
 8002032:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fcdd 	bl	80059fe <USB_HC_Halt>
 8002044:	e024      	b.n	8002090 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d119      	bne.n	8002090 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	461a      	mov	r2, r3
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3361      	adds	r3, #97	; 0x61
 800207c:	2206      	movs	r2, #6
 800207e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fcb7 	bl	80059fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a6:	d112      	bne.n	80020ce <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fca3 	bl	80059fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	461a      	mov	r2, r3
 80020c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020cc:	e24e      	b.n	800256c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	f040 80df 	bne.w	80022a4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3348      	adds	r3, #72	; 0x48
 80020fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0159      	lsls	r1, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	440b      	add	r3, r1
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002110:	1ad2      	subs	r2, r2, r3
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	202c      	movs	r0, #44	; 0x2c
 8002118:	fb00 f303 	mul.w	r3, r0, r3
 800211c:	440b      	add	r3, r1
 800211e:	3350      	adds	r3, #80	; 0x50
 8002120:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3361      	adds	r3, #97	; 0x61
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	335c      	adds	r3, #92	; 0x5c
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	461a      	mov	r2, r3
 8002154:	2301      	movs	r3, #1
 8002156:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	333f      	adds	r3, #63	; 0x3f
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	333f      	adds	r3, #63	; 0x3f
 800217a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800217c:	2b02      	cmp	r3, #2
 800217e:	d111      	bne.n	80021a4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fc37 	bl	80059fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	2310      	movs	r3, #16
 80021a0:	6093      	str	r3, [r2, #8]
 80021a2:	e03a      	b.n	800221a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	333f      	adds	r3, #63	; 0x3f
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d009      	beq.n	80021cc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	333f      	adds	r3, #63	; 0x3f
 80021c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d126      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	0151      	lsls	r1, r2, #5
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	440a      	add	r2, r1
 80021e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	b2d9      	uxtb	r1, r3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	202c      	movs	r0, #44	; 0x2c
 8002208:	fb00 f303 	mul.w	r3, r0, r3
 800220c:	4413      	add	r3, r2
 800220e:	3360      	adds	r3, #96	; 0x60
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f005 fe9f 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d12b      	bne.n	800227a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	3348      	adds	r3, #72	; 0x48
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	202c      	movs	r0, #44	; 0x2c
 8002238:	fb00 f202 	mul.w	r2, r0, r2
 800223c:	440a      	add	r2, r1
 800223e:	3240      	adds	r2, #64	; 0x40
 8002240:	8812      	ldrh	r2, [r2, #0]
 8002242:	fbb3 f3f2 	udiv	r3, r3, r2
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 818e 	beq.w	800256c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3354      	adds	r3, #84	; 0x54
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2d8      	uxtb	r0, r3
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3354      	adds	r3, #84	; 0x54
 8002274:	4602      	mov	r2, r0
 8002276:	701a      	strb	r2, [r3, #0]
}
 8002278:	e178      	b.n	800256c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3354      	adds	r3, #84	; 0x54
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f083 0301 	eor.w	r3, r3, #1
 800228e:	b2d8      	uxtb	r0, r3
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3354      	adds	r3, #84	; 0x54
 800229e:	4602      	mov	r2, r0
 80022a0:	701a      	strb	r2, [r3, #0]
}
 80022a2:	e163      	b.n	800256c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	f040 80f6 	bne.w	80024a8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3361      	adds	r3, #97	; 0x61
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d109      	bne.n	80022e4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	3360      	adds	r3, #96	; 0x60
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e0c9      	b.n	8002478 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3361      	adds	r3, #97	; 0x61
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d109      	bne.n	800230c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3360      	adds	r3, #96	; 0x60
 8002306:	2205      	movs	r2, #5
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e0b5      	b.n	8002478 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3361      	adds	r3, #97	; 0x61
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d009      	beq.n	8002334 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3361      	adds	r3, #97	; 0x61
 800232e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002330:	2b08      	cmp	r3, #8
 8002332:	d150      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	335c      	adds	r3, #92	; 0x5c
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	202c      	movs	r0, #44	; 0x2c
 800234c:	fb00 f303 	mul.w	r3, r0, r3
 8002350:	440b      	add	r3, r1
 8002352:	335c      	adds	r3, #92	; 0x5c
 8002354:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	335c      	adds	r3, #92	; 0x5c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d912      	bls.n	8002390 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	335c      	adds	r3, #92	; 0x5c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3360      	adds	r3, #96	; 0x60
 800238a:	2204      	movs	r2, #4
 800238c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800238e:	e073      	b.n	8002478 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	2202      	movs	r2, #2
 80023a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023c0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023d4:	e050      	b.n	8002478 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3361      	adds	r3, #97	; 0x61
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d122      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3360      	adds	r3, #96	; 0x60
 80023f8:	2202      	movs	r2, #2
 80023fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002412:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800241a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e023      	b.n	8002478 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3361      	adds	r3, #97	; 0x61
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d119      	bne.n	8002478 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	335c      	adds	r3, #92	; 0x5c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	202c      	movs	r0, #44	; 0x2c
 800245c:	fb00 f303 	mul.w	r3, r0, r3
 8002460:	440b      	add	r3, r1
 8002462:	335c      	adds	r3, #92	; 0x5c
 8002464:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3360      	adds	r3, #96	; 0x60
 8002474:	2204      	movs	r2, #4
 8002476:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2302      	movs	r3, #2
 8002488:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	b2d9      	uxtb	r1, r3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	202c      	movs	r0, #44	; 0x2c
 8002494:	fb00 f303 	mul.w	r3, r0, r3
 8002498:	4413      	add	r3, r2
 800249a:	3360      	adds	r3, #96	; 0x60
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f005 fd59 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024a6:	e061      	b.n	800256c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d156      	bne.n	800256c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333f      	adds	r3, #63	; 0x3f
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d111      	bne.n	80024f6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	335c      	adds	r3, #92	; 0x5c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fa85 	bl	80059fe <USB_HC_Halt>
 80024f4:	e031      	b.n	800255a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	333f      	adds	r3, #63	; 0x3f
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	333f      	adds	r3, #63	; 0x3f
 8002518:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800251a:	2b02      	cmp	r3, #2
 800251c:	d11d      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d110      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3361      	adds	r3, #97	; 0x61
 8002546:	2203      	movs	r2, #3
 8002548:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fa52 	bl	80059fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	2310      	movs	r3, #16
 800256a:	6093      	str	r3, [r2, #8]
}
 800256c:	bf00      	nop
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d11a      	bne.n	80025da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	461a      	mov	r2, r3
 80025b2:	2304      	movs	r3, #4
 80025b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3361      	adds	r3, #97	; 0x61
 80025c4:	2206      	movs	r2, #6
 80025c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fa13 	bl	80059fe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80025d8:	e331      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d12e      	bne.n	800264e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	2320      	movs	r3, #32
 8002600:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	333d      	adds	r3, #61	; 0x3d
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	f040 8313 	bne.w	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	333d      	adds	r3, #61	; 0x3d
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f003 f9d9 	bl	80059fe <USB_HC_Halt>
}
 800264c:	e2f7      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002664:	d112      	bne.n	800268c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002678:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f003 f9ba 	bl	80059fe <USB_HC_Halt>
}
 800268a:	e2d8      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d140      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	335c      	adds	r3, #92	; 0x5c
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d111      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	333d      	adds	r3, #61	; 0x3d
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	461a      	mov	r2, r3
 80026ea:	2340      	movs	r3, #64	; 0x40
 80026ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	461a      	mov	r2, r3
 80026fc:	2301      	movs	r3, #1
 80026fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3361      	adds	r3, #97	; 0x61
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f003 f96e 	bl	80059fe <USB_HC_Halt>
}
 8002722:	e28c      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d12c      	bne.n	8002794 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3361      	adds	r3, #97	; 0x61
 8002748:	2204      	movs	r2, #4
 800274a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	333d      	adds	r3, #61	; 0x3d
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f003 f93f 	bl	80059fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2340      	movs	r3, #64	; 0x40
 8002790:	6093      	str	r3, [r2, #8]
}
 8002792:	e254      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11a      	bne.n	80027e0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	2308      	movs	r3, #8
 80027ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3361      	adds	r3, #97	; 0x61
 80027ca:	2205      	movs	r2, #5
 80027cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 f910 	bl	80059fe <USB_HC_Halt>
}
 80027de:	e22e      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d140      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	335c      	adds	r3, #92	; 0x5c
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	3361      	adds	r3, #97	; 0x61
 8002816:	2203      	movs	r2, #3
 8002818:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	333d      	adds	r3, #61	; 0x3d
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d112      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	333c      	adds	r3, #60	; 0x3c
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d108      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	333d      	adds	r3, #61	; 0x3d
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f003 f8cd 	bl	80059fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	2310      	movs	r3, #16
 8002874:	6093      	str	r3, [r2, #8]
}
 8002876:	e1e2      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d164      	bne.n	8002958 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d111      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3361      	adds	r3, #97	; 0x61
 80028a4:	2206      	movs	r2, #6
 80028a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 f8a3 	bl	80059fe <USB_HC_Halt>
 80028b8:	e044      	b.n	8002944 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	335c      	adds	r3, #92	; 0x5c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	202c      	movs	r0, #44	; 0x2c
 80028d2:	fb00 f303 	mul.w	r3, r0, r3
 80028d6:	440b      	add	r3, r1
 80028d8:	335c      	adds	r3, #92	; 0x5c
 80028da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	335c      	adds	r3, #92	; 0x5c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d920      	bls.n	8002932 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	335c      	adds	r3, #92	; 0x5c
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3360      	adds	r3, #96	; 0x60
 8002910:	2204      	movs	r2, #4
 8002912:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	b2d9      	uxtb	r1, r3
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	202c      	movs	r0, #44	; 0x2c
 800291e:	fb00 f303 	mul.w	r3, r0, r3
 8002922:	4413      	add	r3, r2
 8002924:	3360      	adds	r3, #96	; 0x60
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f005 fb14 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002930:	e008      	b.n	8002944 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3360      	adds	r3, #96	; 0x60
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	6093      	str	r3, [r2, #8]
}
 8002956:	e172      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296e:	d11b      	bne.n	80029a8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3361      	adds	r3, #97	; 0x61
 800297e:	2208      	movs	r2, #8
 8002980:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f836 	bl	80059fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a4:	6093      	str	r3, [r2, #8]
}
 80029a6:	e14a      	b.n	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	f040 813f 	bne.w	8002c3e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3361      	adds	r3, #97	; 0x61
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d17d      	bne.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3360      	adds	r3, #96	; 0x60
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	333f      	adds	r3, #63	; 0x3f
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d00a      	beq.n	8002a10 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	333f      	adds	r3, #63	; 0x3f
 8002a08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	f040 8100 	bne.w	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d113      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3355      	adds	r3, #85	; 0x55
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	f083 0301 	eor.w	r3, r3, #1
 8002a2c:	b2d8      	uxtb	r0, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3355      	adds	r3, #85	; 0x55
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 80e3 	bne.w	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	334c      	adds	r3, #76	; 0x4c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80d8 	beq.w	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	334c      	adds	r3, #76	; 0x4c
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	202c      	movs	r0, #44	; 0x2c
 8002a76:	fb00 f202 	mul.w	r2, r0, r2
 8002a7a:	440a      	add	r2, r1
 8002a7c:	3240      	adds	r2, #64	; 0x40
 8002a7e:	8812      	ldrh	r2, [r2, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	202c      	movs	r0, #44	; 0x2c
 8002a8a:	fb00 f202 	mul.w	r2, r0, r2
 8002a8e:	440a      	add	r2, r1
 8002a90:	3240      	adds	r2, #64	; 0x40
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80b5 	beq.w	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3355      	adds	r3, #85	; 0x55
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f083 0301 	eor.w	r3, r3, #1
 8002aba:	b2d8      	uxtb	r0, r3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3355      	adds	r3, #85	; 0x55
 8002aca:	4602      	mov	r2, r0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e09f      	b.n	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3361      	adds	r3, #97	; 0x61
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d109      	bne.n	8002af8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e08b      	b.n	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	3361      	adds	r3, #97	; 0x61
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d109      	bne.n	8002b20 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e077      	b.n	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d109      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3360      	adds	r3, #96	; 0x60
 8002b42:	2205      	movs	r2, #5
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e063      	b.n	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3361      	adds	r3, #97	; 0x61
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d009      	beq.n	8002b70 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3361      	adds	r3, #97	; 0x61
 8002b6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d14f      	bne.n	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	335c      	adds	r3, #92	; 0x5c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	202c      	movs	r0, #44	; 0x2c
 8002b88:	fb00 f303 	mul.w	r3, r0, r3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	335c      	adds	r3, #92	; 0x5c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d912      	bls.n	8002bcc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	335c      	adds	r3, #92	; 0x5c
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e021      	b.n	8002c10 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3360      	adds	r3, #96	; 0x60
 8002bda:	2202      	movs	r2, #2
 8002bdc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bf4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bfc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2302      	movs	r3, #2
 8002c20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	b2d9      	uxtb	r1, r3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	202c      	movs	r0, #44	; 0x2c
 8002c2c:	fb00 f303 	mul.w	r3, r0, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3360      	adds	r3, #96	; 0x60
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f005 f98d 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c3e:	bf00      	nop
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b08a      	sub	sp, #40	; 0x28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	0c5b      	lsrs	r3, r3, #17
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c7a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d004      	beq.n	8002c8c <HCD_RXQLVL_IRQHandler+0x46>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	f000 80a9 	beq.w	8002ddc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c8a:	e0aa      	b.n	8002de2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a6 	beq.w	8002de0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3344      	adds	r3, #68	; 0x44
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 809b 	beq.w	8002de0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3350      	adds	r3, #80	; 0x50
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	441a      	add	r2, r3
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	202c      	movs	r0, #44	; 0x2c
 8002cc4:	fb00 f303 	mul.w	r3, r0, r3
 8002cc8:	440b      	add	r3, r1
 8002cca:	334c      	adds	r3, #76	; 0x4c
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d87a      	bhi.n	8002dc8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3344      	adds	r3, #68	; 0x44
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	f002 f9ea 	bl	80050c4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3344      	adds	r3, #68	; 0x44
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	441a      	add	r2, r3
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	202c      	movs	r0, #44	; 0x2c
 8002d0a:	fb00 f303 	mul.w	r3, r0, r3
 8002d0e:	440b      	add	r3, r1
 8002d10:	3344      	adds	r3, #68	; 0x44
 8002d12:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3350      	adds	r3, #80	; 0x50
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	441a      	add	r2, r3
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	202c      	movs	r0, #44	; 0x2c
 8002d2e:	fb00 f303 	mul.w	r3, r0, r3
 8002d32:	440b      	add	r3, r1
 8002d34:	3350      	adds	r3, #80	; 0x50
 8002d36:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	0cdb      	lsrs	r3, r3, #19
 8002d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3340      	adds	r3, #64	; 0x40
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d13c      	bne.n	8002de0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d039      	beq.n	8002de0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d82:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d8a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3354      	adds	r3, #84	; 0x54
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2d8      	uxtb	r0, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3354      	adds	r3, #84	; 0x54
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	701a      	strb	r2, [r3, #0]
      break;
 8002dc6:	e00b      	b.n	8002de0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3360      	adds	r3, #96	; 0x60
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e001      	b.n	8002de0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ddc:	bf00      	nop
 8002dde:	e000      	b.n	8002de2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002de0:	bf00      	nop
  }
}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e16:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d10b      	bne.n	8002e3a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f005 f877 	bl	8007f20 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d132      	bne.n	8002eaa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d126      	bne.n	8002ea4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d113      	bne.n	8002e86 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e68:	d106      	bne.n	8002e78 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2102      	movs	r1, #2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 fa89 	bl	8005388 <USB_InitFSLSPClkSel>
 8002e76:	e011      	b.n	8002e9c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fa82 	bl	8005388 <USB_InitFSLSPClkSel>
 8002e84:	e00a      	b.n	8002e9c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d106      	bne.n	8002e9c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e94:	461a      	mov	r2, r3
 8002e96:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e9a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f005 f869 	bl	8007f74 <HAL_HCD_PortEnabled_Callback>
 8002ea2:	e002      	b.n	8002eaa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f005 f873 	bl	8007f90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d103      	bne.n	8002ebc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f043 0320 	orr.w	r3, r3, #32
 8002eba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e12b      	b.n	800313a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fdc8 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	; 0x24
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f34:	f000 fa02 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a81      	ldr	r2, [pc, #516]	; (8003144 <HAL_I2C_Init+0x274>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d807      	bhi.n	8002f54 <HAL_I2C_Init+0x84>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a80      	ldr	r2, [pc, #512]	; (8003148 <HAL_I2C_Init+0x278>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf94      	ite	ls
 8002f4c:	2301      	movls	r3, #1
 8002f4e:	2300      	movhi	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e006      	b.n	8002f62 <HAL_I2C_Init+0x92>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a7d      	ldr	r2, [pc, #500]	; (800314c <HAL_I2C_Init+0x27c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0e7      	b.n	800313a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a78      	ldr	r2, [pc, #480]	; (8003150 <HAL_I2C_Init+0x280>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0c9b      	lsrs	r3, r3, #18
 8002f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <HAL_I2C_Init+0x274>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d802      	bhi.n	8002fa4 <HAL_I2C_Init+0xd4>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	e009      	b.n	8002fb8 <HAL_I2C_Init+0xe8>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a69      	ldr	r2, [pc, #420]	; (8003154 <HAL_I2C_Init+0x284>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	495c      	ldr	r1, [pc, #368]	; (8003144 <HAL_I2C_Init+0x274>)
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	d819      	bhi.n	800300c <HAL_I2C_Init+0x13c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e59      	subs	r1, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fec:	400b      	ands	r3, r1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_I2C_Init+0x138>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e59      	subs	r1, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003006:	e051      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003008:	2304      	movs	r3, #4
 800300a:	e04f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <HAL_I2C_Init+0x168>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e012      	b.n	800305e <HAL_I2C_Init+0x18e>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x196>
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <HAL_I2C_Init+0x1bc>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e58      	subs	r0, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	440b      	add	r3, r1
 800307c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	0099      	lsls	r1, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6911      	ldr	r1, [r2, #16]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	000186a0 	.word	0x000186a0
 8003148:	001e847f 	.word	0x001e847f
 800314c:	003d08ff 	.word	0x003d08ff
 8003150:	431bde83 	.word	0x431bde83
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0cc      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d90c      	bls.n	8003194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d044      	beq.n	8003278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d119      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d003      	beq.n	8003216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	2b03      	cmp	r3, #3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e067      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4934      	ldr	r1, [pc, #208]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003248:	f7fd ff30 	bl	80010ac <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fd ff2c 	bl	80010ac <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e04f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d20c      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032de:	f000 fb7f 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	490a      	ldr	r1, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fe90 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00
 8003314:	40023800 	.word	0x40023800
 8003318:	080085fc 	.word	0x080085fc
 800331c:	20000000 	.word	0x20000000
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_RCC_GetHCLKFreq+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000000 	.word	0x20000000

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003340:	f7ff fff0 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	0800860c 	.word	0x0800860c

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003368:	f7ff ffdc 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0b5b      	lsrs	r3, r3, #13
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	0800860c 	.word	0x0800860c

0800338c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	; 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	496c      	ldr	r1, [pc, #432]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80033e2:	2301      	movs	r3, #1
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80033f2:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	4960      	ldr	r1, [pc, #384]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003410:	2301      	movs	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d017      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003420:	4b58      	ldr	r3, [pc, #352]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4955      	ldr	r1, [pc, #340]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343e:	d101      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003440:	2301      	movs	r3, #1
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800344c:	2301      	movs	r3, #1
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800345c:	4b49      	ldr	r3, [pc, #292]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800345e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003462:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	4946      	ldr	r1, [pc, #280]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347a:	d101      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800347c:	2301      	movs	r3, #1
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 808a 	beq.w	80035ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034b6:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a33      	ldr	r2, [pc, #204]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034c2:	f7fd fdf3 	bl	80010ac <HAL_GetTick>
 80034c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fd fdef 	bl	80010ac <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e278      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034dc:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034e8:	4b26      	ldr	r3, [pc, #152]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003500:	6a3a      	ldr	r2, [r7, #32]
 8003502:	429a      	cmp	r2, r3
 8003504:	d028      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d114      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800352e:	f7fd fdbd 	bl	80010ac <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fdb9 	bl	80010ac <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e240      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ee      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003564:	d114      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	4902      	ldr	r1, [pc, #8]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]
 8003580:	e00c      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000
 800358c:	42470e40 	.word	0x42470e40
 8003590:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a49      	ldr	r2, [pc, #292]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800359a:	6093      	str	r3, [r2, #8]
 800359c:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800359e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a8:	4944      	ldr	r1, [pc, #272]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80035c0:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80035c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	4937      	ldr	r1, [pc, #220]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035f2:	4b32      	ldr	r3, [pc, #200]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003600:	492e      	ldr	r1, [pc, #184]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d011      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	4926      	ldr	r1, [pc, #152]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003632:	d101      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003634:	2301      	movs	r3, #1
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	491a      	ldr	r1, [pc, #104]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003662:	2b00      	cmp	r3, #0
 8003664:	d011      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	4911      	ldr	r1, [pc, #68]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003686:	2301      	movs	r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d005      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003698:	f040 80ff 	bne.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036a2:	f7fd fd03 	bl	80010ac <HAL_GetTick>
 80036a6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036a8:	e00e      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036aa:	f7fd fcff 	bl	80010ac <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d907      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e188      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80036bc:	40023800 	.word	0x40023800
 80036c0:	424711e0 	.word	0x424711e0
 80036c4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c8:	4b7e      	ldr	r3, [pc, #504]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ea      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d028      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d124      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036fc:	4b71      	ldr	r3, [pc, #452]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	3301      	adds	r3, #1
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800370e:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003714:	0e1b      	lsrs	r3, r3, #24
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	431a      	orrs	r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	3b01      	subs	r3, #1
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	431a      	orrs	r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	061b      	lsls	r3, r3, #24
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	071b      	lsls	r3, r3, #28
 800373e:	4961      	ldr	r1, [pc, #388]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003764:	2b00      	cmp	r3, #0
 8003766:	d035      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003770:	d130      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003772:	4b54      	ldr	r3, [pc, #336]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	3301      	adds	r3, #1
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003784:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378a:	0f1b      	lsrs	r3, r3, #28
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	019b      	lsls	r3, r3, #6
 800379c:	431a      	orrs	r2, r3
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	431a      	orrs	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	071b      	lsls	r3, r3, #28
 80037b4:	4943      	ldr	r1, [pc, #268]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c2:	f023 021f 	bic.w	r2, r3, #31
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	493d      	ldr	r1, [pc, #244]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d029      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e8:	d124      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037ea:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	3301      	adds	r3, #1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003802:	0f1b      	lsrs	r3, r3, #28
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	019b      	lsls	r3, r3, #6
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	071b      	lsls	r3, r3, #28
 800382c:	4925      	ldr	r1, [pc, #148]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383c:	2b00      	cmp	r3, #0
 800383e:	d016      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	071b      	lsls	r3, r3, #28
 8003866:	4917      	ldr	r1, [pc, #92]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003874:	f7fd fc1a 	bl	80010ac <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800387c:	f7fd fc16 	bl	80010ac <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e09f      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	2b01      	cmp	r3, #1
 800389e:	f040 8095 	bne.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038a8:	f7fd fc00 	bl	80010ac <HAL_GetTick>
 80038ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038ae:	e00f      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038b0:	f7fd fbfc 	bl	80010ac <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d908      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e085      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	42470068 	.word	0x42470068
 80038cc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d0:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038dc:	d0e8      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02b      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	2b00      	cmp	r3, #0
 8003904:	d127      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	3301      	adds	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	431a      	orrs	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	3b01      	subs	r3, #1
 800392a:	041b      	lsls	r3, r3, #16
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	061b      	lsls	r3, r3, #24
 8003934:	4928      	ldr	r1, [pc, #160]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800393e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003942:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	3b01      	subs	r3, #1
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	4922      	ldr	r1, [pc, #136]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01d      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d118      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	0e1b      	lsrs	r3, r3, #24
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	019b      	lsls	r3, r3, #6
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	061b      	lsls	r3, r3, #24
 8003996:	4910      	ldr	r1, [pc, #64]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fd fb82 	bl	80010ac <HAL_GetTick>
 80039a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80039ac:	f7fd fb7e 	bl	80010ac <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e007      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ca:	d1ef      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3730      	adds	r7, #48	; 0x30
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	42470070 	.word	0x42470070

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b0a6      	sub	sp, #152	; 0x98
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a06:	4bc8      	ldr	r3, [pc, #800]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	f200 817e 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x330>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003d11 	.word	0x08003d11
 8003a24:	08003d11 	.word	0x08003d11
 8003a28:	08003d11 	.word	0x08003d11
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003d11 	.word	0x08003d11
 8003a34:	08003d11 	.word	0x08003d11
 8003a38:	08003d11 	.word	0x08003d11
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003d11 	.word	0x08003d11
 8003a44:	08003d11 	.word	0x08003d11
 8003a48:	08003d11 	.word	0x08003d11
 8003a4c:	08003bcb 	.word	0x08003bcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4bb6      	ldr	r3, [pc, #728]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003a56:	e15f      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4bb5      	ldr	r3, [pc, #724]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003a5e:	e15b      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a60:	4bb1      	ldr	r3, [pc, #708]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6c:	4bae      	ldr	r3, [pc, #696]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d031      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a78:	4bab      	ldr	r3, [pc, #684]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	2200      	movs	r2, #0
 8003a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a90:	4ba7      	ldr	r3, [pc, #668]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a92:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a96:	462a      	mov	r2, r5
 8003a98:	fb03 f202 	mul.w	r2, r3, r2
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4aa2      	ldr	r2, [pc, #648]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x350>)
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	fba1 1202 	umull	r1, r2, r1, r2
 8003aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	67ba      	str	r2, [r7, #120]	; 0x78
 8003ab4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ab6:	4413      	add	r3, r2
 8003ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003abe:	2200      	movs	r2, #0
 8003ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ac4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ac8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003acc:	f7fc fb9a 	bl	8000204 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ada:	e064      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003adc:	4b92      	ldr	r3, [pc, #584]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae6:	657a      	str	r2, [r7, #84]	; 0x54
 8003ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af0:	2300      	movs	r3, #0
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003af8:	4622      	mov	r2, r4
 8003afa:	462b      	mov	r3, r5
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	0159      	lsls	r1, r3, #5
 8003b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0a:	0150      	lsls	r0, r2, #5
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4621      	mov	r1, r4
 8003b12:	1a51      	subs	r1, r2, r1
 8003b14:	6139      	str	r1, [r7, #16]
 8003b16:	4629      	mov	r1, r5
 8003b18:	eb63 0301 	sbc.w	r3, r3, r1
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	018b      	lsls	r3, r1, #6
 8003b2e:	4651      	mov	r1, sl
 8003b30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b34:	4651      	mov	r1, sl
 8003b36:	018a      	lsls	r2, r1, #6
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ebb2 0801 	subs.w	r8, r2, r1
 8003b3e:	4659      	mov	r1, fp
 8003b40:	eb63 0901 	sbc.w	r9, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b58:	4690      	mov	r8, r2
 8003b5a:	4699      	mov	r9, r3
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	eb18 0303 	adds.w	r3, r8, r3
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	462b      	mov	r3, r5
 8003b66:	eb49 0303 	adc.w	r3, r9, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b78:	4629      	mov	r1, r5
 8003b7a:	028b      	lsls	r3, r1, #10
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b82:	4621      	mov	r1, r4
 8003b84:	028a      	lsls	r2, r1, #10
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b8e:	2200      	movs	r2, #0
 8003b90:	643b      	str	r3, [r7, #64]	; 0x40
 8003b92:	647a      	str	r2, [r7, #68]	; 0x44
 8003b94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b98:	f7fc fb34 	bl	8000204 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba6:	4b60      	ldr	r3, [pc, #384]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003bb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003bc8:	e0a6      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bca:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd6:	4b54      	ldr	r3, [pc, #336]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d02a      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	2200      	movs	r2, #0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bf8:	fb03 f201 	mul.w	r2, r3, r1
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	fb00 f303 	mul.w	r3, r0, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	4a4a      	ldr	r2, [pc, #296]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c06:	fba0 1202 	umull	r1, r2, r0, r2
 8003c0a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	673a      	str	r2, [r7, #112]	; 0x70
 8003c10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c12:	4413      	add	r3, r2
 8003c14:	677b      	str	r3, [r7, #116]	; 0x74
 8003c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c28:	f7fc faec 	bl	8000204 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4613      	mov	r3, r2
 8003c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c36:	e05b      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c38:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	2200      	movs	r2, #0
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	f04f 0000 	mov.w	r0, #0
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	0159      	lsls	r1, r3, #5
 8003c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c66:	0150      	lsls	r0, r2, #5
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c72:	4649      	mov	r1, r9
 8003c74:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c8c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c90:	eb63 050b 	sbc.w	r5, r3, fp
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	00eb      	lsls	r3, r5, #3
 8003c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca2:	00e2      	lsls	r2, r4, #3
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	4643      	mov	r3, r8
 8003caa:	18e3      	adds	r3, r4, r3
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	464b      	mov	r3, r9
 8003cb0:	eb45 0303 	adc.w	r3, r5, r3
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	028b      	lsls	r3, r1, #10
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ccc:	4621      	mov	r1, r4
 8003cce:	028a      	lsls	r2, r1, #10
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd8:	2200      	movs	r2, #0
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	61fa      	str	r2, [r7, #28]
 8003cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce2:	f7fc fa8f 	bl	8000204 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4613      	mov	r3, r2
 8003cec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	0f1b      	lsrs	r3, r3, #28
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003d0e:	e003      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3798      	adds	r7, #152	; 0x98
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	017d7840 	.word	0x017d7840

08003d34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e28d      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8083 	beq.w	8003e5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d54:	4b94      	ldr	r3, [pc, #592]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d019      	beq.n	8003d94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d60:	4b91      	ldr	r3, [pc, #580]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d6c:	4b8e      	ldr	r3, [pc, #568]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d78:	d00c      	beq.n	8003d94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d92:	d10b      	bne.n	8003dac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	4b84      	ldr	r3, [pc, #528]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x124>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d157      	bne.n	8003e58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e25a      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x90>
 8003db6:	4b7c      	ldr	r3, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7b      	ldr	r2, [pc, #492]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xcc>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0xb4>
 8003dce:	4b76      	ldr	r3, [pc, #472]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a75      	ldr	r2, [pc, #468]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xcc>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6b      	ldr	r2, [pc, #428]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd f950 	bl	80010ac <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd f94c 	bl	80010ac <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e21f      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xdc>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd f93c 	bl	80010ac <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fd f938 	bl	80010ac <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e20b      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b57      	ldr	r3, [pc, #348]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x104>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d06f      	beq.n	8003f46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e66:	4b50      	ldr	r3, [pc, #320]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d017      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e72:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8a:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e96:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d116      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_RCC_OscConfig+0x186>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1d3      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4937      	ldr	r1, [pc, #220]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	e03a      	b.n	8003f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed8:	4b34      	ldr	r3, [pc, #208]	; (8003fac <HAL_RCC_OscConfig+0x278>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd f8e5 	bl	80010ac <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fd f8e1 	bl	80010ac <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1b4      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b28      	ldr	r3, [pc, #160]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4925      	ldr	r1, [pc, #148]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_OscConfig+0x278>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd f8c4 	bl	80010ac <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f28:	f7fd f8c0 	bl	80010ac <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e193      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d036      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd f8a4 	bl	80010ac <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd f8a0 	bl	80010ac <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e173      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x234>
 8003f86:	e01b      	b.n	8003fc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fd f88d 	bl	80010ac <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	e00e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fd f889 	bl	80010ac <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d907      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e15c      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	42470000 	.word	0x42470000
 8003fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	4b8a      	ldr	r3, [pc, #552]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ea      	bne.n	8003f96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8097 	beq.w	80040fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b83      	ldr	r3, [pc, #524]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	4b79      	ldr	r3, [pc, #484]	; (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d118      	bne.n	800403c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400a:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a75      	ldr	r2, [pc, #468]	; (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004016:	f7fd f849 	bl	80010ac <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd f845 	bl	80010ac <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e118      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x31e>
 8004044:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	e01c      	b.n	800408c <HAL_RCC_OscConfig+0x358>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x340>
 800405a:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a60      	ldr	r2, [pc, #384]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6713      	str	r3, [r2, #112]	; 0x70
 8004066:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6713      	str	r3, [r2, #112]	; 0x70
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0x358>
 8004074:	4b5a      	ldr	r3, [pc, #360]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a59      	ldr	r2, [pc, #356]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	4b57      	ldr	r3, [pc, #348]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a56      	ldr	r2, [pc, #344]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd f80a 	bl	80010ac <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd f806 	bl	80010ac <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0d7      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b2:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ee      	beq.n	800409c <HAL_RCC_OscConfig+0x368>
 80040be:	e014      	b.n	80040ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc fff4 	bl	80010ac <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fc fff0 	bl	80010ac <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0c1      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040de:	4b40      	ldr	r3, [pc, #256]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ee      	bne.n	80040c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f0:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	4a3a      	ldr	r2, [pc, #232]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80ad 	beq.w	8004260 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004106:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b08      	cmp	r3, #8
 8004110:	d060      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d145      	bne.n	80041a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fc ffc4 	bl	80010ac <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fc ffc0 	bl	80010ac <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e093      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	3b01      	subs	r3, #1
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	491b      	ldr	r1, [pc, #108]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fc ff95 	bl	80010ac <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004186:	f7fc ff91 	bl	80010ac <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e064      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x452>
 80041a4:	e05c      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fc ff7e 	bl	80010ac <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fc ff7a 	bl	80010ac <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e04d      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x480>
 80041d2:	e045      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e040      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000
 80041e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ec:	4b1f      	ldr	r3, [pc, #124]	; (800426c <HAL_RCC_OscConfig+0x538>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d030      	beq.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d129      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d122      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004224:	4293      	cmp	r3, r2
 8004226:	d119      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	3b01      	subs	r3, #1
 8004236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d10f      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e07b      	b.n	800437a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004292:	d009      	beq.n	80042a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	61da      	str	r2, [r3, #28]
 800429a:	e005      	b.n	80042a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fcf8 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	ea42 0103 	orr.w	r1, r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0104 	and.w	r1, r3, #4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0210 	and.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b08c      	sub	sp, #48	; 0x30
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004390:	2301      	movs	r3, #1
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x26>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e18a      	b.n	80046be <HAL_SPI_TransmitReceive+0x33c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043b0:	f7fc fe7c 	bl	80010ac <HAL_GetTick>
 80043b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d00f      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x70>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d8:	d107      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x68>
 80043e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d003      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
 80043ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043f0:	e15b      	b.n	80046aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_SPI_TransmitReceive+0x82>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_SPI_TransmitReceive+0x82>
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800440a:	e14e      	b.n	80046aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b04      	cmp	r3, #4
 8004416:	d003      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2205      	movs	r2, #5
 800441c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	887a      	ldrh	r2, [r7, #2]
 8004436:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	887a      	ldrh	r2, [r7, #2]
 8004442:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d007      	beq.n	8004474 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447c:	d178      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_TransmitReceive+0x10a>
 8004486:	8b7b      	ldrh	r3, [r7, #26]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d166      	bne.n	800455a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b0:	e053      	b.n	800455a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d11b      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x176>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x176>
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d113      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	1c9a      	adds	r2, r3, #2
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d119      	bne.n	800453a <HAL_SPI_TransmitReceive+0x1b8>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d014      	beq.n	800453a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	b292      	uxth	r2, r2
 800451c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	1c9a      	adds	r2, r3, #2
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004536:	2301      	movs	r3, #1
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800453a:	f7fc fdb7 	bl	80010ac <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004546:	429a      	cmp	r2, r3
 8004548:	d807      	bhi.n	800455a <HAL_SPI_TransmitReceive+0x1d8>
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d003      	beq.n	800455a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004558:	e0a7      	b.n	80046aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1a6      	bne.n	80044b2 <HAL_SPI_TransmitReceive+0x130>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1a1      	bne.n	80044b2 <HAL_SPI_TransmitReceive+0x130>
 800456e:	e07c      	b.n	800466a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_SPI_TransmitReceive+0x1fc>
 8004578:	8b7b      	ldrh	r3, [r7, #26]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d16b      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a4:	e057      	b.n	8004656 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d11c      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x26c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d017      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x26c>
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d114      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	7812      	ldrb	r2, [r2, #0]
 80045d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d119      	bne.n	8004630 <HAL_SPI_TransmitReceive+0x2ae>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d014      	beq.n	8004630 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800462c:	2301      	movs	r3, #1
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004630:	f7fc fd3c 	bl	80010ac <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800463c:	429a      	cmp	r2, r3
 800463e:	d803      	bhi.n	8004648 <HAL_SPI_TransmitReceive+0x2c6>
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d102      	bne.n	800464e <HAL_SPI_TransmitReceive+0x2cc>
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004654:	e029      	b.n	80046aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1a2      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x224>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d19d      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8b2 	bl	80047d8 <SPI_EndRxTxTransaction>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004686:	e010      	b.n	80046aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	e000      	b.n	80046aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3730      	adds	r7, #48	; 0x30
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d8:	f7fc fce8 	bl	80010ac <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e8:	f7fc fce0 	bl	80010ac <HAL_GetTick>
 80046ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	015b      	lsls	r3, r3, #5
 80046f4:	0d1b      	lsrs	r3, r3, #20
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fe:	e054      	b.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d050      	beq.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004708:	f7fc fcd0 	bl	80010ac <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	429a      	cmp	r2, r3
 8004716:	d902      	bls.n	800471e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d13d      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800472c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d111      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d004      	beq.n	800474c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d107      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004764:	d10f      	bne.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e017      	b.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d19b      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000

080047d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <SPI_EndRxTxTransaction+0x7c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <SPI_EndRxTxTransaction+0x80>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0d5b      	lsrs	r3, r3, #21
 80047f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004802:	d112      	bne.n	800482a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2200      	movs	r2, #0
 800480c:	2180      	movs	r1, #128	; 0x80
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7ff ff5a 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00f      	b.n	800484a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3b01      	subs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d0f2      	beq.n	800482a <SPI_EndRxTxTransaction+0x52>
 8004844:	e000      	b.n	8004848 <SPI_EndRxTxTransaction+0x70>
        break;
 8004846:	bf00      	nop
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000000 	.word	0x20000000
 8004858:	165e9f81 	.word	0x165e9f81

0800485c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e03f      	b.n	80048ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc fb3a 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f829 	bl	80048f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048fc:	b0c0      	sub	sp, #256	; 0x100
 80048fe:	af00      	add	r7, sp, #0
 8004900:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	68d9      	ldr	r1, [r3, #12]
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	ea40 0301 	orr.w	r3, r0, r1
 8004920:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	431a      	orrs	r2, r3
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	431a      	orrs	r2, r3
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004950:	f021 010c 	bic.w	r1, r1, #12
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800495e:	430b      	orrs	r3, r1
 8004960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	6999      	ldr	r1, [r3, #24]
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	ea40 0301 	orr.w	r3, r0, r1
 800497e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b8f      	ldr	r3, [pc, #572]	; (8004bc4 <UART_SetConfig+0x2cc>)
 8004988:	429a      	cmp	r2, r3
 800498a:	d005      	beq.n	8004998 <UART_SetConfig+0xa0>
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b8d      	ldr	r3, [pc, #564]	; (8004bc8 <UART_SetConfig+0x2d0>)
 8004994:	429a      	cmp	r2, r3
 8004996:	d104      	bne.n	80049a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004998:	f7fe fce4 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 800499c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049a0:	e003      	b.n	80049aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049a2:	f7fe fccb 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 80049a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b4:	f040 810c 	bne.w	8004bd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ca:	4622      	mov	r2, r4
 80049cc:	462b      	mov	r3, r5
 80049ce:	1891      	adds	r1, r2, r2
 80049d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80049d2:	415b      	adcs	r3, r3
 80049d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049da:	4621      	mov	r1, r4
 80049dc:	eb12 0801 	adds.w	r8, r2, r1
 80049e0:	4629      	mov	r1, r5
 80049e2:	eb43 0901 	adc.w	r9, r3, r1
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049fa:	4690      	mov	r8, r2
 80049fc:	4699      	mov	r9, r3
 80049fe:	4623      	mov	r3, r4
 8004a00:	eb18 0303 	adds.w	r3, r8, r3
 8004a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a08:	462b      	mov	r3, r5
 8004a0a:	eb49 0303 	adc.w	r3, r9, r3
 8004a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a26:	460b      	mov	r3, r1
 8004a28:	18db      	adds	r3, r3, r3
 8004a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	eb42 0303 	adc.w	r3, r2, r3
 8004a32:	657b      	str	r3, [r7, #84]	; 0x54
 8004a34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a3c:	f7fb fbe2 	bl	8000204 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <UART_SetConfig+0x2d4>)
 8004a46:	fba3 2302 	umull	r2, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	011c      	lsls	r4, r3, #4
 8004a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a60:	4642      	mov	r2, r8
 8004a62:	464b      	mov	r3, r9
 8004a64:	1891      	adds	r1, r2, r2
 8004a66:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a68:	415b      	adcs	r3, r3
 8004a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a70:	4641      	mov	r1, r8
 8004a72:	eb12 0a01 	adds.w	sl, r2, r1
 8004a76:	4649      	mov	r1, r9
 8004a78:	eb43 0b01 	adc.w	fp, r3, r1
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a90:	4692      	mov	sl, r2
 8004a92:	469b      	mov	fp, r3
 8004a94:	4643      	mov	r3, r8
 8004a96:	eb1a 0303 	adds.w	r3, sl, r3
 8004a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8004aa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ab4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ab8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004abc:	460b      	mov	r3, r1
 8004abe:	18db      	adds	r3, r3, r3
 8004ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	eb42 0303 	adc.w	r3, r2, r3
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ace:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ad2:	f7fb fb97 	bl	8000204 <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	4b3b      	ldr	r3, [pc, #236]	; (8004bcc <UART_SetConfig+0x2d4>)
 8004ade:	fba3 2301 	umull	r2, r3, r3, r1
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2264      	movs	r2, #100	; 0x64
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	1acb      	subs	r3, r1, r3
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004af2:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <UART_SetConfig+0x2d4>)
 8004af4:	fba3 2302 	umull	r2, r3, r3, r2
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b00:	441c      	add	r4, r3
 8004b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	1891      	adds	r1, r2, r2
 8004b1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b1c:	415b      	adcs	r3, r3
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b24:	4641      	mov	r1, r8
 8004b26:	1851      	adds	r1, r2, r1
 8004b28:	6339      	str	r1, [r7, #48]	; 0x30
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	414b      	adcs	r3, r1
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	00cb      	lsls	r3, r1, #3
 8004b40:	4651      	mov	r1, sl
 8004b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b46:	4651      	mov	r1, sl
 8004b48:	00ca      	lsls	r2, r1, #3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4642      	mov	r2, r8
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b58:	464b      	mov	r3, r9
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	eb42 0303 	adc.w	r3, r2, r3
 8004b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b78:	460b      	mov	r3, r1
 8004b7a:	18db      	adds	r3, r3, r3
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7e:	4613      	mov	r3, r2
 8004b80:	eb42 0303 	adc.w	r3, r2, r3
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b8e:	f7fb fb39 	bl	8000204 <__aeabi_uldivmod>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <UART_SetConfig+0x2d4>)
 8004b98:	fba3 1302 	umull	r1, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	2164      	movs	r1, #100	; 0x64
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	3332      	adds	r3, #50	; 0x32
 8004baa:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <UART_SetConfig+0x2d4>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f003 0207 	and.w	r2, r3, #7
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4422      	add	r2, r4
 8004bbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bc0:	e106      	b.n	8004dd0 <UART_SetConfig+0x4d8>
 8004bc2:	bf00      	nop
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	40011400 	.word	0x40011400
 8004bcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004be2:	4642      	mov	r2, r8
 8004be4:	464b      	mov	r3, r9
 8004be6:	1891      	adds	r1, r2, r2
 8004be8:	6239      	str	r1, [r7, #32]
 8004bea:	415b      	adcs	r3, r3
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
 8004bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	1854      	adds	r4, r2, r1
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	eb43 0501 	adc.w	r5, r3, r1
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	00eb      	lsls	r3, r5, #3
 8004c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c0a:	00e2      	lsls	r2, r4, #3
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	461d      	mov	r5, r3
 8004c10:	4643      	mov	r3, r8
 8004c12:	18e3      	adds	r3, r4, r3
 8004c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c18:	464b      	mov	r3, r9
 8004c1a:	eb45 0303 	adc.w	r3, r5, r3
 8004c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c3e:	4629      	mov	r1, r5
 8004c40:	008b      	lsls	r3, r1, #2
 8004c42:	4621      	mov	r1, r4
 8004c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c48:	4621      	mov	r1, r4
 8004c4a:	008a      	lsls	r2, r1, #2
 8004c4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c50:	f7fb fad8 	bl	8000204 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4b60      	ldr	r3, [pc, #384]	; (8004ddc <UART_SetConfig+0x4e4>)
 8004c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	011c      	lsls	r4, r3, #4
 8004c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	61b9      	str	r1, [r7, #24]
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c84:	4641      	mov	r1, r8
 8004c86:	1851      	adds	r1, r2, r1
 8004c88:	6139      	str	r1, [r7, #16]
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	414b      	adcs	r3, r1
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	00cb      	lsls	r3, r1, #3
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	00ca      	lsls	r2, r1, #3
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cb8:	464b      	mov	r3, r9
 8004cba:	460a      	mov	r2, r1
 8004cbc:	eb42 0303 	adc.w	r3, r2, r3
 8004cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cdc:	4649      	mov	r1, r9
 8004cde:	008b      	lsls	r3, r1, #2
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	008a      	lsls	r2, r1, #2
 8004cea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cee:	f7fb fa89 	bl	8000204 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <UART_SetConfig+0x4e4>)
 8004cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2264      	movs	r2, #100	; 0x64
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	1acb      	subs	r3, r1, r3
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	3332      	adds	r3, #50	; 0x32
 8004d0c:	4a33      	ldr	r2, [pc, #204]	; (8004ddc <UART_SetConfig+0x4e4>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d18:	441c      	add	r4, r3
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	673b      	str	r3, [r7, #112]	; 0x70
 8004d22:	677a      	str	r2, [r7, #116]	; 0x74
 8004d24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	1891      	adds	r1, r2, r2
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	415b      	adcs	r3, r3
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d38:	4641      	mov	r1, r8
 8004d3a:	1851      	adds	r1, r2, r1
 8004d3c:	6039      	str	r1, [r7, #0]
 8004d3e:	4649      	mov	r1, r9
 8004d40:	414b      	adcs	r3, r1
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d50:	4659      	mov	r1, fp
 8004d52:	00cb      	lsls	r3, r1, #3
 8004d54:	4651      	mov	r1, sl
 8004d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	00ca      	lsls	r2, r1, #3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	4642      	mov	r2, r8
 8004d66:	189b      	adds	r3, r3, r2
 8004d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	eb42 0303 	adc.w	r3, r2, r3
 8004d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7e:	667a      	str	r2, [r7, #100]	; 0x64
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	008b      	lsls	r3, r1, #2
 8004d90:	4641      	mov	r1, r8
 8004d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d96:	4641      	mov	r1, r8
 8004d98:	008a      	lsls	r2, r1, #2
 8004d9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d9e:	f7fb fa31 	bl	8000204 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <UART_SetConfig+0x4e4>)
 8004da8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	2164      	movs	r1, #100	; 0x64
 8004db0:	fb01 f303 	mul.w	r3, r1, r3
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	3332      	adds	r3, #50	; 0x32
 8004dba:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <UART_SetConfig+0x4e4>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4422      	add	r2, r4
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ddc:	51eb851f 	.word	0x51eb851f

08004de0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004de0:	b084      	sub	sp, #16
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	f107 001c 	add.w	r0, r7, #28
 8004dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d122      	bne.n	8004e3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9c0 	bl	80051b8 <USB_CoreReset>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	e01a      	b.n	8004e74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f9b4 	bl	80051b8 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
 8004e66:	e005      	b.n	8004e74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10b      	bne.n	8004e92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f043 0206 	orr.w	r2, r3, #6
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e9e:	b004      	add	sp, #16
 8004ea0:	4770      	bx	lr

08004ea2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f043 0201 	orr.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f023 0201 	bic.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d115      	bne.n	8004f34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f14:	2001      	movs	r0, #1
 8004f16:	f7fc f8d5 	bl	80010c4 <HAL_Delay>
      ms++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f93a 	bl	800519a <USB_GetMode>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d01e      	beq.n	8004f6a <USB_SetCurrentMode+0x84>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b31      	cmp	r3, #49	; 0x31
 8004f30:	d9f0      	bls.n	8004f14 <USB_SetCurrentMode+0x2e>
 8004f32:	e01a      	b.n	8004f6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d115      	bne.n	8004f66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f46:	2001      	movs	r0, #1
 8004f48:	f7fc f8bc 	bl	80010c4 <HAL_Delay>
      ms++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f921 	bl	800519a <USB_GetMode>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <USB_SetCurrentMode+0x84>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b31      	cmp	r3, #49	; 0x31
 8004f62:	d9f0      	bls.n	8004f46 <USB_SetCurrentMode+0x60>
 8004f64:	e001      	b.n	8004f6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e005      	b.n	8004f76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b32      	cmp	r3, #50	; 0x32
 8004f6e:	d101      	bne.n	8004f74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <USB_FlushTxFifo+0x64>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d901      	bls.n	8004fa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e01b      	b.n	8004fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	daf2      	bge.n	8004f8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	019b      	lsls	r3, r3, #6
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <USB_FlushTxFifo+0x64>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e006      	b.n	8004fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d0f0      	beq.n	8004fb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	00030d40 	.word	0x00030d40

08004fe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a11      	ldr	r2, [pc, #68]	; (8005044 <USB_FlushRxFifo+0x5c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e018      	b.n	8005038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	daf2      	bge.n	8004ff4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2210      	movs	r2, #16
 8005016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <USB_FlushRxFifo+0x5c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e006      	b.n	8005038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b10      	cmp	r3, #16
 8005034:	d0f0      	beq.n	8005018 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	00030d40 	.word	0x00030d40

08005048 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005048:	b480      	push	{r7}
 800504a:	b089      	sub	sp, #36	; 0x24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	4611      	mov	r1, r2
 8005054:	461a      	mov	r2, r3
 8005056:	460b      	mov	r3, r1
 8005058:	71fb      	strb	r3, [r7, #7]
 800505a:	4613      	mov	r3, r2
 800505c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005066:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d123      	bne.n	80050b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800506e:	88bb      	ldrh	r3, [r7, #4]
 8005070:	3303      	adds	r3, #3
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e018      	b.n	80050ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	031a      	lsls	r2, r3, #12
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005088:	461a      	mov	r2, r3
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3301      	adds	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3301      	adds	r3, #1
 80050a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3e2      	bcc.n	800507c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3724      	adds	r7, #36	; 0x24
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b08b      	sub	sp, #44	; 0x2c
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	e014      	b.n	800511a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	3301      	adds	r3, #1
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	3301      	adds	r3, #1
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	3301      	adds	r3, #1
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	3301      	adds	r3, #1
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	3301      	adds	r3, #1
 8005118:	623b      	str	r3, [r7, #32]
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	429a      	cmp	r2, r3
 8005120:	d3e6      	bcc.n	80050f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005122:	8bfb      	ldrh	r3, [r7, #30]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01e      	beq.n	8005166 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005132:	461a      	mov	r2, r3
 8005134:	f107 0310 	add.w	r3, r7, #16
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	b2da      	uxtb	r2, r3
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	701a      	strb	r2, [r3, #0]
      i++;
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	3301      	adds	r3, #1
 8005152:	623b      	str	r3, [r7, #32]
      pDest++;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800515a:	8bfb      	ldrh	r3, [r7, #30]
 800515c:	3b01      	subs	r3, #1
 800515e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005160:	8bfb      	ldrh	r3, [r7, #30]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1ea      	bne.n	800513c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005168:	4618      	mov	r0, r3
 800516a:	372c      	adds	r7, #44	; 0x2c
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4013      	ands	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0301 	and.w	r3, r3, #1
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <USB_CoreReset+0x64>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e01b      	b.n	800520e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	daf2      	bge.n	80051c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <USB_CoreReset+0x64>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d901      	bls.n	8005200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e006      	b.n	800520e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d0f0      	beq.n	80051ee <USB_CoreReset+0x36>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	00030d40 	.word	0x00030d40

08005220 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005220:	b084      	sub	sp, #16
 8005222:	b580      	push	{r7, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800522e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005240:	461a      	mov	r2, r3
 8005242:	2300      	movs	r3, #0
 8005244:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d018      	beq.n	8005290 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d10a      	bne.n	800527a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005272:	f043 0304 	orr.w	r3, r3, #4
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e014      	b.n	80052a4 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005288:	f023 0304 	bic.w	r3, r3, #4
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e009      	b.n	80052a4 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800529e:	f023 0304 	bic.w	r3, r3, #4
 80052a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052a4:	2110      	movs	r1, #16
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fe6a 	bl	8004f80 <USB_FlushTxFifo>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe96 	bl	8004fe8 <USB_FlushRxFifo>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e015      	b.n	80052f8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	461a      	mov	r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d3e5      	bcc.n	80052cc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a13      	ldr	r2, [pc, #76]	; (8005374 <USB_HostInit+0x154>)
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a13      	ldr	r2, [pc, #76]	; (8005378 <USB_HostInit+0x158>)
 800532c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005330:	e009      	b.n	8005346 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2280      	movs	r2, #128	; 0x80
 8005336:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a10      	ldr	r2, [pc, #64]	; (800537c <USB_HostInit+0x15c>)
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a0f      	ldr	r2, [pc, #60]	; (8005380 <USB_HostInit+0x160>)
 8005342:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f043 0210 	orr.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <USB_HostInit+0x164>)
 800535e:	4313      	orrs	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005364:	7dfb      	ldrb	r3, [r7, #23]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005370:	b004      	add	sp, #16
 8005372:	4770      	bx	lr
 8005374:	01000200 	.word	0x01000200
 8005378:	00e00300 	.word	0x00e00300
 800537c:	00600080 	.word	0x00600080
 8005380:	004000e0 	.word	0x004000e0
 8005384:	a3200008 	.word	0xa3200008

08005388 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d107      	bne.n	80053da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d0:	461a      	mov	r2, r3
 80053d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e009      	b.n	80053ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d106      	bne.n	80053ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e6:	461a      	mov	r2, r3
 80053e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80053ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800541c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800542c:	2064      	movs	r0, #100	; 0x64
 800542e:	f7fb fe49 	bl	80010c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800543a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800543e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005440:	200a      	movs	r0, #10
 8005442:	f7fb fe3f 	bl	80010c4 <HAL_Delay>

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005474:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <USB_DriveVbus+0x44>
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d106      	bne.n	8005494 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800548e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005492:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d109      	bne.n	80054b4 <USB_DriveVbus+0x64>
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	0c5b      	lsrs	r3, r3, #17
 80054e0:	f003 0303 	and.w	r3, r3, #3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	b29b      	uxth	r3, r3
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	4603      	mov	r3, r0
 8005524:	70fb      	strb	r3, [r7, #3]
 8005526:	460b      	mov	r3, r1
 8005528:	70bb      	strb	r3, [r7, #2]
 800552a:	4613      	mov	r3, r2
 800552c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	461a      	mov	r2, r3
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
 8005548:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800554a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800554e:	2b03      	cmp	r3, #3
 8005550:	d87e      	bhi.n	8005650 <USB_HC_Init+0x13c>
 8005552:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <USB_HC_Init+0x44>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	08005569 	.word	0x08005569
 800555c:	08005613 	.word	0x08005613
 8005560:	08005569 	.word	0x08005569
 8005564:	080055d5 	.word	0x080055d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4413      	add	r3, r2
 8005570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005574:	461a      	mov	r2, r3
 8005576:	f240 439d 	movw	r3, #1181	; 0x49d
 800557a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800557c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005580:	2b00      	cmp	r3, #0
 8005582:	da10      	bge.n	80055a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	78fa      	ldrb	r2, [r7, #3]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	440a      	add	r2, r1
 800559a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800559e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80055a4:	e057      	b.n	8005656 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d051      	beq.n	8005656 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055d0:	60d3      	str	r3, [r2, #12]
      break;
 80055d2:	e040      	b.n	8005656 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e0:	461a      	mov	r2, r3
 80055e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80055e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	da34      	bge.n	800565a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	440a      	add	r2, r1
 8005606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800560a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005610:	e023      	b.n	800565a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	461a      	mov	r2, r3
 8005620:	f240 2325 	movw	r3, #549	; 0x225
 8005624:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005626:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800562a:	2b00      	cmp	r3, #0
 800562c:	da17      	bge.n	800565e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	440a      	add	r2, r1
 8005644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005648:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800564c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800564e:	e006      	b.n	800565e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	77fb      	strb	r3, [r7, #31]
      break;
 8005654:	e004      	b.n	8005660 <USB_HC_Init+0x14c>
      break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <USB_HC_Init+0x14c>
      break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <USB_HC_Init+0x14c>
      break;
 800565e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	440a      	add	r2, r1
 8005676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567a:	f043 0302 	orr.w	r3, r3, #2
 800567e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	2101      	movs	r1, #1
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	6939      	ldr	r1, [r7, #16]
 8005696:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800569a:	4313      	orrs	r3, r2
 800569c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80056aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	da03      	bge.n	80056ba <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	e001      	b.n	80056be <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff feff 	bl	80054c2 <USB_GetHostSpeed>
 80056c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80056c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d106      	bne.n	80056dc <USB_HC_Init+0x1c8>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d003      	beq.n	80056dc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80056d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e001      	b.n	80056e0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056e0:	787b      	ldrb	r3, [r7, #1]
 80056e2:	059b      	lsls	r3, r3, #22
 80056e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056e8:	78bb      	ldrb	r3, [r7, #2]
 80056ea:	02db      	lsls	r3, r3, #11
 80056ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056f6:	049b      	lsls	r3, r3, #18
 80056f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005700:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005704:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	0159      	lsls	r1, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	440b      	add	r3, r1
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800571c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800571e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005722:	2b03      	cmp	r3, #3
 8005724:	d003      	beq.n	800572e <USB_HC_Init+0x21a>
 8005726:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10f      	bne.n	800574e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	440a      	add	r2, r1
 8005744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800574c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800574e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08c      	sub	sp, #48	; 0x30
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005774:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02d      	beq.n	80057de <USB_HC_StartXfer+0x86>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d129      	bne.n	80057de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d117      	bne.n	80057c0 <USB_HC_StartXfer+0x68>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	79db      	ldrb	r3, [r3, #7]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <USB_HC_StartXfer+0x48>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	79db      	ldrb	r3, [r3, #7]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d10f      	bne.n	80057c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	6a3a      	ldr	r2, [r7, #32]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <USB_HC_StartXfer+0x86>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	795b      	ldrb	r3, [r3, #5]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fa0f 	bl	8005bf8 <USB_DoPing>
      return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e0f8      	b.n	80059d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	8912      	ldrh	r2, [r2, #8]
 80057ee:	4413      	add	r3, r2
 80057f0:	3b01      	subs	r3, #1
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	8912      	ldrh	r2, [r2, #8]
 80057f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80057fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057fe:	8b7b      	ldrh	r3, [r7, #26]
 8005800:	429a      	cmp	r2, r3
 8005802:	d90b      	bls.n	800581c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005804:	8b7b      	ldrh	r3, [r7, #26]
 8005806:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	8912      	ldrh	r2, [r2, #8]
 800580e:	fb03 f202 	mul.w	r2, r3, r2
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	e001      	b.n	800581c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005818:	2301      	movs	r3, #1
 800581a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	78db      	ldrb	r3, [r3, #3]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005824:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	8912      	ldrh	r2, [r2, #8]
 800582a:	fb03 f202 	mul.w	r2, r3, r2
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	611a      	str	r2, [r3, #16]
 8005832:	e003      	b.n	800583c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005846:	04d9      	lsls	r1, r3, #19
 8005848:	4b63      	ldr	r3, [pc, #396]	; (80059d8 <USB_HC_StartXfer+0x280>)
 800584a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800584c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	7a9b      	ldrb	r3, [r3, #10]
 8005852:	075b      	lsls	r3, r3, #29
 8005854:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005858:	69f9      	ldr	r1, [r7, #28]
 800585a:	0148      	lsls	r0, r1, #5
 800585c:	6a39      	ldr	r1, [r7, #32]
 800585e:	4401      	add	r1, r0
 8005860:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005864:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005866:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	68d9      	ldr	r1, [r3, #12]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	460a      	mov	r2, r1
 8005880:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	bf0c      	ite	eq
 8005892:	2301      	moveq	r3, #1
 8005894:	2300      	movne	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	7e7b      	ldrb	r3, [r7, #25]
 80058ca:	075b      	lsls	r3, r3, #29
 80058cc:	69f9      	ldr	r1, [r7, #28]
 80058ce:	0148      	lsls	r0, r1, #5
 80058d0:	6a39      	ldr	r1, [r7, #32]
 80058d2:	4401      	add	r1, r0
 80058d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058f2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	78db      	ldrb	r3, [r3, #3]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	e003      	b.n	800590e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800590c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005914:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	461a      	mov	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e04e      	b.n	80059d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	78db      	ldrb	r3, [r3, #3]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d149      	bne.n	80059ce <USB_HC_StartXfer+0x276>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d045      	beq.n	80059ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	79db      	ldrb	r3, [r3, #7]
 8005946:	2b03      	cmp	r3, #3
 8005948:	d830      	bhi.n	80059ac <USB_HC_StartXfer+0x254>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <USB_HC_StartXfer+0x1f8>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005961 	.word	0x08005961
 8005954:	08005985 	.word	0x08005985
 8005958:	08005961 	.word	0x08005961
 800595c:	08005985 	.word	0x08005985
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	3303      	adds	r3, #3
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800596a:	8afa      	ldrh	r2, [r7, #22]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	b29b      	uxth	r3, r3
 8005972:	429a      	cmp	r2, r3
 8005974:	d91c      	bls.n	80059b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f043 0220 	orr.w	r2, r3, #32
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	619a      	str	r2, [r3, #24]
        }
        break;
 8005982:	e015      	b.n	80059b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	3303      	adds	r3, #3
 800598a:	089b      	lsrs	r3, r3, #2
 800598c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800598e:	8afa      	ldrh	r2, [r7, #22]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	b29b      	uxth	r3, r3
 800599a:	429a      	cmp	r2, r3
 800599c:	d90a      	bls.n	80059b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80059aa:	e003      	b.n	80059b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80059ac:	bf00      	nop
 80059ae:	e002      	b.n	80059b6 <USB_HC_StartXfer+0x25e>
        break;
 80059b0:	bf00      	nop
 80059b2:	e000      	b.n	80059b6 <USB_HC_StartXfer+0x25e>
        break;
 80059b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	68d9      	ldr	r1, [r3, #12]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785a      	ldrb	r2, [r3, #1]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2000      	movs	r0, #0
 80059c6:	9000      	str	r0, [sp, #0]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fb3d 	bl	8005048 <USB_WritePacket>
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	; 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	1ff80000 	.word	0x1ff80000

080059dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	b29b      	uxth	r3, r3
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b089      	sub	sp, #36	; 0x24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	0c9b      	lsrs	r3, r3, #18
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0fdb      	lsrs	r3, r3, #31
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d104      	bne.n	8005a58 <USB_HC_Halt+0x5a>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e0c8      	b.n	8005bea <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <USB_HC_Halt+0x66>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d163      	bne.n	8005b2c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a82:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 80ab 	bne.w	8005be8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d133      	bne.n	8005b06 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005abc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aea:	d81d      	bhi.n	8005b28 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b02:	d0ec      	beq.n	8005ade <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b04:	e070      	b.n	8005be8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b26:	e05f      	b.n	8005be8 <USB_HC_Halt+0x1ea>
            break;
 8005b28:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b2a:	e05d      	b.n	8005be8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b4a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d133      	bne.n	8005bc4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba8:	d81d      	bhi.n	8005be6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc0:	d0ec      	beq.n	8005b9c <USB_HC_Halt+0x19e>
 8005bc2:	e011      	b.n	8005be8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e000      	b.n	8005be8 <USB_HC_Halt+0x1ea>
          break;
 8005be6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3724      	adds	r7, #36	; 0x24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	04da      	lsls	r2, r3, #19
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <USB_DoPing+0x74>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c28:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c40:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	461a      	mov	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	1ff80000 	.word	0x1ff80000

08005c70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff f91d 	bl	8004ec4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c8a:	2110      	movs	r1, #16
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff f977 	bl	8004f80 <USB_FlushTxFifo>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff f9a3 	bl	8004fe8 <USB_FlushRxFifo>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005cac:	2300      	movs	r3, #0
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	e01f      	b.n	8005cf2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b0f      	cmp	r3, #15
 8005cf6:	d9dc      	bls.n	8005cb2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	e034      	b.n	8005d68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	461a      	mov	r2, r3
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d44:	d80c      	bhi.n	8005d60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5c:	d0ec      	beq.n	8005d38 <USB_StopHost+0xc8>
 8005d5e:	e000      	b.n	8005d62 <USB_StopHost+0xf2>
        break;
 8005d60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	3301      	adds	r3, #1
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	d9c7      	bls.n	8005cfe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d74:	461a      	mov	r2, r3
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff f88c 	bl	8004ea2 <USB_EnableGlobalInt>

  return ret;
 8005d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d94:	b590      	push	{r4, r7, lr}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af04      	add	r7, sp, #16
 8005d9a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	2202      	movs	r2, #2
 8005da0:	2102      	movs	r1, #2
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fc66 	bl	8006674 <USBH_FindInterface>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2bff      	cmp	r3, #255	; 0xff
 8005db0:	d002      	beq.n	8005db8 <USBH_CDC_InterfaceInit+0x24>
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d901      	bls.n	8005dbc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005db8:	2302      	movs	r3, #2
 8005dba:	e13d      	b.n	8006038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fc3b 	bl	800663c <USBH_SelectInterface>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e131      	b.n	8006038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005dda:	2050      	movs	r0, #80	; 0x50
 8005ddc:	f002 fab4 	bl	8008348 <malloc>
 8005de0:	4603      	mov	r3, r0
 8005de2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005df4:	2302      	movs	r3, #2
 8005df6:	e11f      	b.n	8006038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005df8:	2250      	movs	r2, #80	; 0x50
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	68b8      	ldr	r0, [r7, #8]
 8005dfe:	f002 fb5f 	bl	80084c0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	211a      	movs	r1, #26
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	b25b      	sxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da15      	bge.n	8005e46 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	211a      	movs	r1, #26
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	211a      	movs	r1, #26
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 ff2e 	bl	8007cae <USBH_AllocPipe>
 8005e52:	4603      	mov	r3, r0
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	7819      	ldrb	r1, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	7858      	ldrb	r0, [r3, #1]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	8952      	ldrh	r2, [r2, #10]
 8005e72:	9202      	str	r2, [sp, #8]
 8005e74:	2203      	movs	r2, #3
 8005e76:	9201      	str	r2, [sp, #4]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f001 fee6 	bl	8007c50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f002 f9f4 	bl	800827a <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e92:	2300      	movs	r3, #0
 8005e94:	2200      	movs	r2, #0
 8005e96:	210a      	movs	r1, #10
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fbeb 	bl	8006674 <USBH_FindInterface>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2bff      	cmp	r3, #255	; 0xff
 8005ea6:	d002      	beq.n	8005eae <USBH_CDC_InterfaceInit+0x11a>
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d901      	bls.n	8005eb2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e0c2      	b.n	8006038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	211a      	movs	r1, #26
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	b25b      	sxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da16      	bge.n	8005ef8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	211a      	movs	r1, #26
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	211a      	movs	r1, #26
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	835a      	strh	r2, [r3, #26]
 8005ef6:	e015      	b.n	8005f24 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	211a      	movs	r1, #26
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	4413      	add	r3, r2
 8005f04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	211a      	movs	r1, #26
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f1e:	881a      	ldrh	r2, [r3, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	211a      	movs	r1, #26
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da16      	bge.n	8005f6a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	211a      	movs	r1, #26
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	211a      	movs	r1, #26
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	835a      	strh	r2, [r3, #26]
 8005f68:	e015      	b.n	8005f96 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	211a      	movs	r1, #26
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	211a      	movs	r1, #26
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f90:	881a      	ldrh	r2, [r3, #0]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	7b9b      	ldrb	r3, [r3, #14]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 fe86 	bl	8007cae <USBH_AllocPipe>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	7bdb      	ldrb	r3, [r3, #15]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fe7c 	bl	8007cae <USBH_AllocPipe>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	7b59      	ldrb	r1, [r3, #13]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	7b98      	ldrb	r0, [r3, #14]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	8b12      	ldrh	r2, [r2, #24]
 8005fd6:	9202      	str	r2, [sp, #8]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	9201      	str	r2, [sp, #4]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4623      	mov	r3, r4
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 fe34 	bl	8007c50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	7b19      	ldrb	r1, [r3, #12]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	7bd8      	ldrb	r0, [r3, #15]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	8b52      	ldrh	r2, [r2, #26]
 8006000:	9202      	str	r2, [sp, #8]
 8006002:	2202      	movs	r2, #2
 8006004:	9201      	str	r2, [sp, #4]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4623      	mov	r3, r4
 800600a:	4602      	mov	r2, r0
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 fe1f 	bl	8007c50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	7b5b      	ldrb	r3, [r3, #13]
 800601e:	2200      	movs	r2, #0
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f002 f929 	bl	800827a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	7b1b      	ldrb	r3, [r3, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f002 f922 	bl	800827a <USBH_LL_SetToggle>

  return USBH_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	bd90      	pop	{r4, r7, pc}

08006040 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 fe14 	bl	8007c8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 fe3f 	bl	8007cf0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	7b1b      	ldrb	r3, [r3, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00e      	beq.n	800609e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	7b1b      	ldrb	r3, [r3, #12]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fe01 	bl	8007c8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	7b1b      	ldrb	r3, [r3, #12]
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fe2c 	bl	8007cf0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	7b5b      	ldrb	r3, [r3, #13]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00e      	beq.n	80060c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	7b5b      	ldrb	r3, [r3, #13]
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 fdee 	bl	8007c8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	7b5b      	ldrb	r3, [r3, #13]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 fe19 	bl	8007cf0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00b      	beq.n	80060e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 f93d 	bl	8008358 <free>
    phost->pActiveClass->pData = 0U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e4:	2200      	movs	r2, #0
 80060e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3340      	adds	r3, #64	; 0x40
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8b1 	bl	8006272 <GetLineCoding>
 8006110:	4603      	mov	r3, r0
 8006112:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006114:	7afb      	ldrb	r3, [r7, #11]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006120:	2102      	movs	r1, #2
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006126:	7afb      	ldrb	r3, [r7, #11]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006150:	2b04      	cmp	r3, #4
 8006152:	d877      	bhi.n	8006244 <USBH_CDC_Process+0x114>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <USBH_CDC_Process+0x2c>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006171 	.word	0x08006171
 8006160:	08006177 	.word	0x08006177
 8006164:	080061a7 	.word	0x080061a7
 8006168:	0800621b 	.word	0x0800621b
 800616c:	08006229 	.word	0x08006229
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73fb      	strb	r3, [r7, #15]
      break;
 8006174:	e06d      	b.n	8006252 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f897 	bl	80062b0 <SetLineCoding>
 8006182:	4603      	mov	r3, r0
 8006184:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006194:	e058      	b.n	8006248 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d055      	beq.n	8006248 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2204      	movs	r2, #4
 80061a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061a4:	e050      	b.n	8006248 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	3340      	adds	r3, #64	; 0x40
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f860 	bl	8006272 <GetLineCoding>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d126      	bne.n	800620a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ce:	791b      	ldrb	r3, [r3, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d13b      	bne.n	800624c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d133      	bne.n	800624c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d12b      	bne.n	800624c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061fe:	429a      	cmp	r2, r3
 8006200:	d124      	bne.n	800624c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f958 	bl	80064b8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006208:	e020      	b.n	800624c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d01d      	beq.n	800624c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2204      	movs	r2, #4
 8006214:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006218:	e018      	b.n	800624c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f867 	bl	80062ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8da 	bl	80063da <CDC_ProcessReception>
      break;
 8006226:	e014      	b.n	8006252 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006228:	2100      	movs	r1, #0
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 ffef 	bl	800720e <USBH_ClrFeature>
 8006230:	4603      	mov	r3, r0
 8006232:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006242:	e005      	b.n	8006250 <USBH_CDC_Process+0x120>

    default:
      break;
 8006244:	bf00      	nop
 8006246:	e004      	b.n	8006252 <USBH_CDC_Process+0x122>
      break;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <USBH_CDC_Process+0x122>
      break;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <USBH_CDC_Process+0x122>
      break;
 8006250:	bf00      	nop

  }

  return status;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	22a1      	movs	r2, #161	; 0xa1
 8006280:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2221      	movs	r2, #33	; 0x21
 8006286:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2207      	movs	r2, #7
 8006298:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2207      	movs	r2, #7
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fa83 	bl	80077ac <USBH_CtlReq>
 80062a6:	4603      	mov	r3, r0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2221      	movs	r2, #33	; 0x21
 80062be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2207      	movs	r2, #7
 80062d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2207      	movs	r2, #7
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fa64 	bl	80077ac <USBH_CtlReq>
 80062e4:	4603      	mov	r3, r0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b086      	sub	sp, #24
 80062f2:	af02      	add	r7, sp, #8
 80062f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006300:	2300      	movs	r3, #0
 8006302:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800630a:	2b01      	cmp	r3, #1
 800630c:	d002      	beq.n	8006314 <CDC_ProcessTransmission+0x26>
 800630e:	2b02      	cmp	r3, #2
 8006310:	d023      	beq.n	800635a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006312:	e05e      	b.n	80063d2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	8b12      	ldrh	r2, [r2, #24]
 800631c:	4293      	cmp	r3, r2
 800631e:	d90b      	bls.n	8006338 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8b1a      	ldrh	r2, [r3, #24]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	7b5b      	ldrb	r3, [r3, #13]
 800632c:	2001      	movs	r0, #1
 800632e:	9000      	str	r0, [sp, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fc4a 	bl	8007bca <USBH_BulkSendData>
 8006336:	e00b      	b.n	8006350 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	7b5b      	ldrb	r3, [r3, #13]
 8006346:	2001      	movs	r0, #1
 8006348:	9000      	str	r0, [sp, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fc3d 	bl	8007bca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006358:	e03b      	b.n	80063d2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	7b5b      	ldrb	r3, [r3, #13]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 ff69 	bl	8008238 <USBH_LL_GetURBState>
 8006366:	4603      	mov	r3, r0
 8006368:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800636a:	7afb      	ldrb	r3, [r7, #11]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d128      	bne.n	80063c2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	8b12      	ldrh	r2, [r2, #24]
 8006378:	4293      	cmp	r3, r2
 800637a:	d90e      	bls.n	800639a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	8b12      	ldrh	r2, [r2, #24]
 8006384:	1a9a      	subs	r2, r3, r2
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	8b12      	ldrh	r2, [r2, #24]
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	e002      	b.n	80063a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063b0:	e00e      	b.n	80063d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f868 	bl	8006490 <USBH_CDC_TransmitCallback>
      break;
 80063c0:	e006      	b.n	80063d0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d103      	bne.n	80063d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063d0:	bf00      	nop
  }
}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d002      	beq.n	8006400 <CDC_ProcessReception+0x26>
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d00e      	beq.n	800641c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80063fe:	e043      	b.n	8006488 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	6a19      	ldr	r1, [r3, #32]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	8b5a      	ldrh	r2, [r3, #26]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	7b1b      	ldrb	r3, [r3, #12]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fc01 	bl	8007c14 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2204      	movs	r2, #4
 8006416:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800641a:	e035      	b.n	8006488 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	7b1b      	ldrb	r3, [r3, #12]
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 ff08 	bl	8008238 <USBH_LL_GetURBState>
 8006428:	4603      	mov	r3, r0
 800642a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d129      	bne.n	8006486 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	7b1b      	ldrb	r3, [r3, #12]
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fe6b 	bl	8008114 <USBH_LL_GetLastXferSize>
 800643e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	429a      	cmp	r2, r3
 8006448:	d016      	beq.n	8006478 <CDC_ProcessReception+0x9e>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	8b5b      	ldrh	r3, [r3, #26]
 800644e:	461a      	mov	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4293      	cmp	r3, r2
 8006454:	d910      	bls.n	8006478 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	1ad2      	subs	r2, r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	6a1a      	ldr	r2, [r3, #32]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	441a      	add	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2203      	movs	r2, #3
 8006472:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006476:	e006      	b.n	8006486 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f80f 	bl	80064a4 <USBH_CDC_ReceiveCallback>
      break;
 8006486:	bf00      	nop
  }
}
 8006488:	bf00      	nop
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064e0:	2302      	movs	r3, #2
 80064e2:	e029      	b.n	8006538 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	79fa      	ldrb	r2, [r7, #7]
 80064e8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f81f 	bl	8006540 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f001 fd3b 	bl	8007fac <USBH_LL_Init>

  return USBH_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e009      	b.n	8006566 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	33e0      	adds	r3, #224	; 0xe0
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	2200      	movs	r2, #0
 800655e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d9f2      	bls.n	8006552 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e009      	b.n	8006586 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658c:	d3f1      	bcc.n	8006572 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2240      	movs	r2, #64	; 0x40
 80065b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10e      	bne.n	8006624 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800660c:	1c59      	adds	r1, r3, #1
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	33de      	adds	r3, #222	; 0xde
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
 8006622:	e004      	b.n	800662e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006624:	2302      	movs	r3, #2
 8006626:	73fb      	strb	r3, [r7, #15]
 8006628:	e001      	b.n	800662e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800662a:	2302      	movs	r3, #2
 800662c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	429a      	cmp	r2, r3
 8006656:	d204      	bcs.n	8006662 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006660:	e001      	b.n	8006666 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006662:	2302      	movs	r3, #2
 8006664:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	461a      	mov	r2, r3
 8006682:	4603      	mov	r3, r0
 8006684:	70fb      	strb	r3, [r7, #3]
 8006686:	460b      	mov	r3, r1
 8006688:	70bb      	strb	r3, [r7, #2]
 800668a:	4613      	mov	r3, r2
 800668c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800669c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800669e:	e025      	b.n	80066ec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	221a      	movs	r2, #26
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
 80066a8:	3308      	adds	r3, #8
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	3302      	adds	r3, #2
 80066b0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	795b      	ldrb	r3, [r3, #5]
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d002      	beq.n	80066c2 <USBH_FindInterface+0x4e>
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2bff      	cmp	r3, #255	; 0xff
 80066c0:	d111      	bne.n	80066e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066c6:	78ba      	ldrb	r2, [r7, #2]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d002      	beq.n	80066d2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066cc:	78bb      	ldrb	r3, [r7, #2]
 80066ce:	2bff      	cmp	r3, #255	; 0xff
 80066d0:	d109      	bne.n	80066e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066d6:	787a      	ldrb	r2, [r7, #1]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d002      	beq.n	80066e2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066dc:	787b      	ldrb	r3, [r7, #1]
 80066de:	2bff      	cmp	r3, #255	; 0xff
 80066e0:	d101      	bne.n	80066e6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	e006      	b.n	80066f4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
 80066e8:	3301      	adds	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d9d6      	bls.n	80066a0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80066f2:	23ff      	movs	r3, #255	; 0xff
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 fc8b 	bl	8008024 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800670e:	2101      	movs	r1, #1
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fda4 	bl	800825e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af04      	add	r7, sp, #16
 8006726:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006728:	2302      	movs	r3, #2
 800672a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d102      	bne.n	8006742 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2203      	movs	r2, #3
 8006740:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b0b      	cmp	r3, #11
 800674a:	f200 81be 	bhi.w	8006aca <USBH_Process+0x3aa>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <USBH_Process+0x34>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006785 	.word	0x08006785
 8006758:	080067b7 	.word	0x080067b7
 800675c:	0800681f 	.word	0x0800681f
 8006760:	08006a65 	.word	0x08006a65
 8006764:	08006acb 	.word	0x08006acb
 8006768:	080068c3 	.word	0x080068c3
 800676c:	08006a0b 	.word	0x08006a0b
 8006770:	080068f9 	.word	0x080068f9
 8006774:	08006919 	.word	0x08006919
 8006778:	08006939 	.word	0x08006939
 800677c:	0800697d 	.word	0x0800697d
 8006780:	08006a4d 	.word	0x08006a4d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 819e 	beq.w	8006ace <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006798:	20c8      	movs	r0, #200	; 0xc8
 800679a:	f001 fd9e 	bl	80082da <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fc9d 	bl	80080de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067b4:	e18b      	b.n	8006ace <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067ce:	e18d      	b.n	8006aec <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067da:	d914      	bls.n	8006806 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067e2:	3301      	adds	r3, #1
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d903      	bls.n	80067fe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	220d      	movs	r2, #13
 80067fa:	701a      	strb	r2, [r3, #0]
      break;
 80067fc:	e176      	b.n	8006aec <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	701a      	strb	r2, [r3, #0]
      break;
 8006804:	e172      	b.n	8006aec <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800680c:	f103 020a 	add.w	r2, r3, #10
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006816:	200a      	movs	r0, #10
 8006818:	f001 fd5f 	bl	80082da <USBH_Delay>
      break;
 800681c:	e166      	b.n	8006aec <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800682e:	2104      	movs	r1, #4
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006834:	2064      	movs	r0, #100	; 0x64
 8006836:	f001 fd50 	bl	80082da <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fc28 	bl	8008090 <USBH_LL_GetSpeed>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2205      	movs	r2, #5
 800684e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006850:	2100      	movs	r1, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fa2b 	bl	8007cae <USBH_AllocPipe>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fa23 	bl	8007cae <USBH_AllocPipe>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7919      	ldrb	r1, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006884:	b292      	uxth	r2, r2
 8006886:	9202      	str	r2, [sp, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	9201      	str	r2, [sp, #4]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4603      	mov	r3, r0
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 f9dc 	bl	8007c50 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7959      	ldrb	r1, [r3, #5]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068ac:	b292      	uxth	r2, r2
 80068ae:	9202      	str	r2, [sp, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	9201      	str	r2, [sp, #4]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	4603      	mov	r3, r0
 80068b8:	2200      	movs	r2, #0
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 f9c8 	bl	8007c50 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068c0:	e114      	b.n	8006aec <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f918 	bl	8006af8 <USBH_HandleEnum>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f040 80fe 	bne.w	8006ad2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d103      	bne.n	80068f0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2208      	movs	r2, #8
 80068ec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068ee:	e0f0      	b.n	8006ad2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2207      	movs	r2, #7
 80068f4:	701a      	strb	r2, [r3, #0]
      break;
 80068f6:	e0ec      	b.n	8006ad2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80e9 	beq.w	8006ad6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800690a:	2101      	movs	r1, #1
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2208      	movs	r2, #8
 8006914:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006916:	e0de      	b.n	8006ad6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800691e:	b29b      	uxth	r3, r3
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fc2c 	bl	8007180 <USBH_SetCfg>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 80d5 	bne.w	8006ada <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2209      	movs	r2, #9
 8006934:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006936:	e0d0      	b.n	8006ada <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d016      	beq.n	8006974 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006946:	2101      	movs	r1, #1
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc3c 	bl	80071c6 <USBH_SetFeature>
 800694e:	4603      	mov	r3, r0
 8006950:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	220a      	movs	r2, #10
 800695e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006960:	e0bd      	b.n	8006ade <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b03      	cmp	r3, #3
 8006968:	f040 80b9 	bne.w	8006ade <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	220a      	movs	r2, #10
 8006970:	701a      	strb	r2, [r3, #0]
      break;
 8006972:	e0b4      	b.n	8006ade <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	220a      	movs	r2, #10
 8006978:	701a      	strb	r2, [r3, #0]
      break;
 800697a:	e0b0      	b.n	8006ade <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80ad 	beq.w	8006ae2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
 8006994:	e016      	b.n	80069c4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006996:	7bfa      	ldrb	r2, [r7, #15]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	32de      	adds	r2, #222	; 0xde
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	791a      	ldrb	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d108      	bne.n	80069be <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80069ac:	7bfa      	ldrb	r2, [r7, #15]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	32de      	adds	r2, #222	; 0xde
 80069b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069bc:	e005      	b.n	80069ca <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	3301      	adds	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0e5      	beq.n	8006996 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d016      	beq.n	8006a02 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2206      	movs	r2, #6
 80069ea:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069f2:	2103      	movs	r1, #3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069f8:	e073      	b.n	8006ae2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	220d      	movs	r2, #13
 80069fe:	701a      	strb	r2, [r3, #0]
      break;
 8006a00:	e06f      	b.n	8006ae2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	220d      	movs	r2, #13
 8006a06:	701a      	strb	r2, [r3, #0]
      break;
 8006a08:	e06b      	b.n	8006ae2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d017      	beq.n	8006a44 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
 8006a20:	4603      	mov	r3, r0
 8006a22:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	220b      	movs	r2, #11
 8006a30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a32:	e058      	b.n	8006ae6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d154      	bne.n	8006ae6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	220d      	movs	r2, #13
 8006a40:	701a      	strb	r2, [r3, #0]
      break;
 8006a42:	e050      	b.n	8006ae6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	220d      	movs	r2, #13
 8006a48:	701a      	strb	r2, [r3, #0]
      break;
 8006a4a:	e04c      	b.n	8006ae6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d049      	beq.n	8006aea <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
      }
      break;
 8006a62:	e042      	b.n	8006aea <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fd67 	bl	8006540 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aa0:	2105      	movs	r1, #5
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d107      	bne.n	8006ac2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fe20 	bl	8006700 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ac0:	e014      	b.n	8006aec <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 faae 	bl	8008024 <USBH_LL_Start>
      break;
 8006ac8:	e010      	b.n	8006aec <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006aca:	bf00      	nop
 8006acc:	e00e      	b.n	8006aec <USBH_Process+0x3cc>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e00c      	b.n	8006aec <USBH_Process+0x3cc>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e00a      	b.n	8006aec <USBH_Process+0x3cc>
    break;
 8006ad6:	bf00      	nop
 8006ad8:	e008      	b.n	8006aec <USBH_Process+0x3cc>
      break;
 8006ada:	bf00      	nop
 8006adc:	e006      	b.n	8006aec <USBH_Process+0x3cc>
      break;
 8006ade:	bf00      	nop
 8006ae0:	e004      	b.n	8006aec <USBH_Process+0x3cc>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <USBH_Process+0x3cc>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <USBH_Process+0x3cc>
      break;
 8006aea:	bf00      	nop
  }
  return USBH_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop

08006af8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af04      	add	r7, sp, #16
 8006afe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	2b07      	cmp	r3, #7
 8006b0e:	f200 81c1 	bhi.w	8006e94 <USBH_HandleEnum+0x39c>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <USBH_HandleEnum+0x20>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b39 	.word	0x08006b39
 8006b1c:	08006bf7 	.word	0x08006bf7
 8006b20:	08006c61 	.word	0x08006c61
 8006b24:	08006cef 	.word	0x08006cef
 8006b28:	08006d59 	.word	0x08006d59
 8006b2c:	08006dc9 	.word	0x08006dc9
 8006b30:	08006e0f 	.word	0x08006e0f
 8006b34:	08006e55 	.word	0x08006e55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b38:	2108      	movs	r1, #8
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa50 	bl	8006fe0 <USBH_Get_DevDesc>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d130      	bne.n	8006bac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7919      	ldrb	r1, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b6e:	b292      	uxth	r2, r2
 8006b70:	9202      	str	r2, [sp, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	9201      	str	r2, [sp, #4]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2280      	movs	r2, #128	; 0x80
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f867 	bl	8007c50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7959      	ldrb	r1, [r3, #5]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b96:	b292      	uxth	r2, r2
 8006b98:	9202      	str	r2, [sp, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f853 	bl	8007c50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006baa:	e175      	b.n	8006e98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	f040 8172 	bne.w	8006e98 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bba:	3301      	adds	r3, #1
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d903      	bls.n	8006bd6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	220d      	movs	r2, #13
 8006bd2:	701a      	strb	r2, [r3, #0]
      break;
 8006bd4:	e160      	b.n	8006e98 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	795b      	ldrb	r3, [r3, #5]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f887 	bl	8007cf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	791b      	ldrb	r3, [r3, #4]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f881 	bl	8007cf0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
      break;
 8006bf4:	e150      	b.n	8006e98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006bf6:	2112      	movs	r1, #18
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f9f1 	bl	8006fe0 <USBH_Get_DevDesc>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d103      	bne.n	8006c10 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c0e:	e145      	b.n	8006e9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	f040 8142 	bne.w	8006e9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c1e:	3301      	adds	r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d903      	bls.n	8006c3a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	220d      	movs	r2, #13
 8006c36:	701a      	strb	r2, [r3, #0]
      break;
 8006c38:	e130      	b.n	8006e9c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	795b      	ldrb	r3, [r3, #5]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 f855 	bl	8007cf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	791b      	ldrb	r3, [r3, #4]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f84f 	bl	8007cf0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
      break;
 8006c5e:	e11d      	b.n	8006e9c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c60:	2101      	movs	r1, #1
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa68 	bl	8007138 <USBH_SetAddress>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d132      	bne.n	8006cd8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c72:	2002      	movs	r0, #2
 8006c74:	f001 fb31 	bl	80082da <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2203      	movs	r2, #3
 8006c84:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7919      	ldrb	r1, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c9a:	b292      	uxth	r2, r2
 8006c9c:	9202      	str	r2, [sp, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	9201      	str	r2, [sp, #4]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 ffd1 	bl	8007c50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7959      	ldrb	r1, [r3, #5]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2200      	movs	r2, #0
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 ffbd 	bl	8007c50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cd6:	e0e3      	b.n	8006ea0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	f040 80e0 	bne.w	8006ea0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	220d      	movs	r2, #13
 8006ce4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	705a      	strb	r2, [r3, #1]
      break;
 8006cec:	e0d8      	b.n	8006ea0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006cee:	2109      	movs	r1, #9
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f99d 	bl	8007030 <USBH_Get_CfgDesc>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2204      	movs	r2, #4
 8006d04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d06:	e0cd      	b.n	8006ea4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f040 80ca 	bne.w	8006ea4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d16:	3301      	adds	r3, #1
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d903      	bls.n	8006d32 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	220d      	movs	r2, #13
 8006d2e:	701a      	strb	r2, [r3, #0]
      break;
 8006d30:	e0b8      	b.n	8006ea4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	795b      	ldrb	r3, [r3, #5]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 ffd9 	bl	8007cf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	791b      	ldrb	r3, [r3, #4]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 ffd3 	bl	8007cf0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]
      break;
 8006d56:	e0a5      	b.n	8006ea4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f965 	bl	8007030 <USBH_Get_CfgDesc>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2205      	movs	r2, #5
 8006d74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d76:	e097      	b.n	8006ea8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	f040 8094 	bne.w	8006ea8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d86:	3301      	adds	r3, #1
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d903      	bls.n	8006da2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	220d      	movs	r2, #13
 8006d9e:	701a      	strb	r2, [r3, #0]
      break;
 8006da0:	e082      	b.n	8006ea8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	795b      	ldrb	r3, [r3, #5]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 ffa1 	bl	8007cf0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	791b      	ldrb	r3, [r3, #4]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ff9b 	bl	8007cf0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
      break;
 8006dc6:	e06f      	b.n	8006ea8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d019      	beq.n	8006e06 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dde:	23ff      	movs	r3, #255	; 0xff
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f949 	bl	8007078 <USBH_Get_StringDesc>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2206      	movs	r2, #6
 8006df4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006df6:	e059      	b.n	8006eac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d156      	bne.n	8006eac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2206      	movs	r2, #6
 8006e02:	705a      	strb	r2, [r3, #1]
      break;
 8006e04:	e052      	b.n	8006eac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2206      	movs	r2, #6
 8006e0a:	705a      	strb	r2, [r3, #1]
      break;
 8006e0c:	e04e      	b.n	8006eac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d019      	beq.n	8006e4c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e24:	23ff      	movs	r3, #255	; 0xff
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f926 	bl	8007078 <USBH_Get_StringDesc>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2207      	movs	r2, #7
 8006e3a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e3c:	e038      	b.n	8006eb0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d135      	bne.n	8006eb0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2207      	movs	r2, #7
 8006e48:	705a      	strb	r2, [r3, #1]
      break;
 8006e4a:	e031      	b.n	8006eb0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2207      	movs	r2, #7
 8006e50:	705a      	strb	r2, [r3, #1]
      break;
 8006e52:	e02d      	b.n	8006eb0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d017      	beq.n	8006e8e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e6a:	23ff      	movs	r3, #255	; 0xff
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f903 	bl	8007078 <USBH_Get_StringDesc>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006e80:	e018      	b.n	8006eb4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d115      	bne.n	8006eb4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8c:	e012      	b.n	8006eb4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
      break;
 8006e92:	e00f      	b.n	8006eb4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006e94:	bf00      	nop
 8006e96:	e00e      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006e98:	bf00      	nop
 8006e9a:	e00c      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006e9c:	bf00      	nop
 8006e9e:	e00a      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006ea0:	bf00      	nop
 8006ea2:	e008      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006ea4:	bf00      	nop
 8006ea6:	e006      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006ea8:	bf00      	nop
 8006eaa:	e004      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006eac:	bf00      	nop
 8006eae:	e002      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006eb0:	bf00      	nop
 8006eb2:	e000      	b.n	8006eb6 <USBH_HandleEnum+0x3be>
      break;
 8006eb4:	bf00      	nop
  }
  return Status;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f804 	bl	8006f02 <USBH_HandleSof>
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b0b      	cmp	r3, #11
 8006f12:	d10a      	bne.n	8006f2a <USBH_HandleSof+0x28>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f42:	bf00      	nop
}
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f5e:	bf00      	nop
}
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 f84e 	bl	800805a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	791b      	ldrb	r3, [r3, #4]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fe93 	bl	8007cf0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	795b      	ldrb	r3, [r3, #5]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fe8d 	bl	8007cf0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ffe:	2100      	movs	r1, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f864 	bl	80070ce <USBH_GetDescriptor>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	b292      	uxth	r2, r2
 8007020:	4619      	mov	r1, r3
 8007022:	f000 f919 	bl	8007258 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af02      	add	r7, sp, #8
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	331c      	adds	r3, #28
 8007040:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007042:	887b      	ldrh	r3, [r7, #2]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800704c:	2100      	movs	r1, #0
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f83d 	bl	80070ce <USBH_GetDescriptor>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d107      	bne.n	800706e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800705e:	887b      	ldrh	r3, [r7, #2]
 8007060:	461a      	mov	r2, r3
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f989 	bl	800737c <USBH_ParseCfgDesc>
 800706a:	4603      	mov	r3, r0
 800706c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	461a      	mov	r2, r3
 8007084:	460b      	mov	r3, r1
 8007086:	72fb      	strb	r3, [r7, #11]
 8007088:	4613      	mov	r3, r2
 800708a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007094:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800709c:	893b      	ldrh	r3, [r7, #8]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	460b      	mov	r3, r1
 80070a2:	2100      	movs	r1, #0
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f812 	bl	80070ce <USBH_GetDescriptor>
 80070aa:	4603      	mov	r3, r0
 80070ac:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d107      	bne.n	80070c4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070ba:	893a      	ldrh	r2, [r7, #8]
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fb26 	bl	8007710 <USBH_ParseStringDesc>
  }

  return status;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	72fb      	strb	r3, [r7, #11]
 80070dc:	4613      	mov	r3, r2
 80070de:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	789b      	ldrb	r3, [r3, #2]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d11c      	bne.n	8007122 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2206      	movs	r2, #6
 80070f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	893a      	ldrh	r2, [r7, #8]
 80070fe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007100:	893b      	ldrh	r3, [r7, #8]
 8007102:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800710a:	d104      	bne.n	8007116 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f240 4209 	movw	r2, #1033	; 0x409
 8007112:	829a      	strh	r2, [r3, #20]
 8007114:	e002      	b.n	800711c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8b3a      	ldrh	r2, [r7, #24]
 8007120:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007122:	8b3b      	ldrh	r3, [r7, #24]
 8007124:	461a      	mov	r2, r3
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fb3f 	bl	80077ac <USBH_CtlReq>
 800712e:	4603      	mov	r3, r0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	789b      	ldrb	r3, [r3, #2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10f      	bne.n	800716c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2205      	movs	r2, #5
 8007156:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800716c:	2200      	movs	r2, #0
 800716e:	2100      	movs	r1, #0
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fb1b 	bl	80077ac <USBH_CtlReq>
 8007176:	4603      	mov	r3, r0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	789b      	ldrb	r3, [r3, #2]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10e      	bne.n	80071b2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2209      	movs	r2, #9
 800719e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	887a      	ldrh	r2, [r7, #2]
 80071a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071b2:	2200      	movs	r2, #0
 80071b4:	2100      	movs	r1, #0
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 faf8 	bl	80077ac <USBH_CtlReq>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	789b      	ldrb	r3, [r3, #2]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d10f      	bne.n	80071fa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2203      	movs	r2, #3
 80071e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071fa:	2200      	movs	r2, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fad4 	bl	80077ac <USBH_CtlReq>
 8007204:	4603      	mov	r3, r0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	789b      	ldrb	r3, [r3, #2]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d10f      	bne.n	8007242 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	b29a      	uxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007242:	2200      	movs	r2, #0
 8007244:	2100      	movs	r1, #0
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fab0 	bl	80077ac <USBH_CtlReq>
 800724c:	4603      	mov	r3, r0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	785a      	ldrb	r2, [r3, #1]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	3302      	adds	r3, #2
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b29a      	uxth	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3303      	adds	r3, #3
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	b29b      	uxth	r3, r3
 800728a:	4313      	orrs	r3, r2
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	791a      	ldrb	r2, [r3, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	795a      	ldrb	r2, [r3, #5]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	799a      	ldrb	r2, [r3, #6]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	79da      	ldrb	r2, [r3, #7]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	79db      	ldrb	r3, [r3, #7]
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	dc0f      	bgt.n	80072da <USBH_ParseDevDesc+0x82>
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	db14      	blt.n	80072e8 <USBH_ParseDevDesc+0x90>
 80072be:	3b08      	subs	r3, #8
 80072c0:	4a2d      	ldr	r2, [pc, #180]	; (8007378 <USBH_ParseDevDesc+0x120>)
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bf14      	ite	ne
 80072ce:	2301      	movne	r3, #1
 80072d0:	2300      	moveq	r3, #0
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <USBH_ParseDevDesc+0x86>
 80072d8:	e006      	b.n	80072e8 <USBH_ParseDevDesc+0x90>
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d104      	bne.n	80072e8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	79da      	ldrb	r2, [r3, #7]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	71da      	strb	r2, [r3, #7]
      break;
 80072e6:	e003      	b.n	80072f0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2240      	movs	r2, #64	; 0x40
 80072ec:	71da      	strb	r2, [r3, #7]
      break;
 80072ee:	bf00      	nop
  }

  if (length > 8U)
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d939      	bls.n	800736a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3308      	adds	r3, #8
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	3309      	adds	r3, #9
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	b29b      	uxth	r3, r3
 800730a:	4313      	orrs	r3, r2
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	330a      	adds	r3, #10
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	b29a      	uxth	r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	330b      	adds	r3, #11
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	b29b      	uxth	r3, r3
 8007326:	4313      	orrs	r3, r2
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	330c      	adds	r3, #12
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	b29a      	uxth	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	330d      	adds	r3, #13
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	021b      	lsls	r3, r3, #8
 8007340:	b29b      	uxth	r3, r3
 8007342:	4313      	orrs	r3, r2
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	7b9a      	ldrb	r2, [r3, #14]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	7bda      	ldrb	r2, [r3, #15]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	7c1a      	ldrb	r2, [r3, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	7c5a      	ldrb	r2, [r3, #17]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	745a      	strb	r2, [r3, #17]
  }
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	01000101 	.word	0x01000101

0800737c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08c      	sub	sp, #48	; 0x30
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007390:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	785a      	ldrb	r2, [r3, #1]
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3302      	adds	r3, #2
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	3303      	adds	r3, #3
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	4313      	orrs	r3, r2
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d8:	bf28      	it	cs
 80073da:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80073de:	b29a      	uxth	r2, r3
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	791a      	ldrb	r2, [r3, #4]
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	795a      	ldrb	r2, [r3, #5]
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	799a      	ldrb	r2, [r3, #6]
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	79da      	ldrb	r2, [r3, #7]
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	7a1a      	ldrb	r2, [r3, #8]
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b09      	cmp	r3, #9
 8007412:	d002      	beq.n	800741a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	2209      	movs	r2, #9
 8007418:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	2b09      	cmp	r3, #9
 800741e:	f240 809d 	bls.w	800755c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007422:	2309      	movs	r3, #9
 8007424:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800742a:	e081      	b.n	8007530 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800742c:	f107 0316 	add.w	r3, r7, #22
 8007430:	4619      	mov	r1, r3
 8007432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007434:	f000 f99f 	bl	8007776 <USBH_GetNextDesc>
 8007438:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b04      	cmp	r3, #4
 8007440:	d176      	bne.n	8007530 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b09      	cmp	r3, #9
 8007448:	d002      	beq.n	8007450 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	2209      	movs	r2, #9
 800744e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007454:	221a      	movs	r2, #26
 8007456:	fb02 f303 	mul.w	r3, r2, r3
 800745a:	3308      	adds	r3, #8
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	4413      	add	r3, r2
 8007460:	3302      	adds	r3, #2
 8007462:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007466:	69f8      	ldr	r0, [r7, #28]
 8007468:	f000 f87e 	bl	8007568 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007476:	e043      	b.n	8007500 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007478:	f107 0316 	add.w	r3, r7, #22
 800747c:	4619      	mov	r1, r3
 800747e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007480:	f000 f979 	bl	8007776 <USBH_GetNextDesc>
 8007484:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b05      	cmp	r3, #5
 800748c:	d138      	bne.n	8007500 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	795b      	ldrb	r3, [r3, #5]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10f      	bne.n	80074b6 <USBH_ParseCfgDesc+0x13a>
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	799b      	ldrb	r3, [r3, #6]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d10b      	bne.n	80074b6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	79db      	ldrb	r3, [r3, #7]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10f      	bne.n	80074c6 <USBH_ParseCfgDesc+0x14a>
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d00b      	beq.n	80074c6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	2209      	movs	r2, #9
 80074b2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074b4:	e007      	b.n	80074c6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b07      	cmp	r3, #7
 80074bc:	d004      	beq.n	80074c8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	2207      	movs	r2, #7
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e000      	b.n	80074c8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074c6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074d0:	3201      	adds	r2, #1
 80074d2:	00d2      	lsls	r2, r2, #3
 80074d4:	211a      	movs	r1, #26
 80074d6:	fb01 f303 	mul.w	r3, r1, r3
 80074da:	4413      	add	r3, r2
 80074dc:	3308      	adds	r3, #8
 80074de:	6a3a      	ldr	r2, [r7, #32]
 80074e0:	4413      	add	r3, r2
 80074e2:	3304      	adds	r3, #4
 80074e4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80074e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e8:	69b9      	ldr	r1, [r7, #24]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 f86b 	bl	80075c6 <USBH_ParseEPDesc>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80074f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074fa:	3301      	adds	r3, #1
 80074fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	791b      	ldrb	r3, [r3, #4]
 8007504:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007508:	429a      	cmp	r2, r3
 800750a:	d204      	bcs.n	8007516 <USBH_ParseCfgDesc+0x19a>
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	885a      	ldrh	r2, [r3, #2]
 8007510:	8afb      	ldrh	r3, [r7, #22]
 8007512:	429a      	cmp	r2, r3
 8007514:	d8b0      	bhi.n	8007478 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	791b      	ldrb	r3, [r3, #4]
 800751a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800751e:	429a      	cmp	r2, r3
 8007520:	d201      	bcs.n	8007526 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007522:	2303      	movs	r3, #3
 8007524:	e01c      	b.n	8007560 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800752a:	3301      	adds	r3, #1
 800752c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007534:	2b01      	cmp	r3, #1
 8007536:	d805      	bhi.n	8007544 <USBH_ParseCfgDesc+0x1c8>
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	885a      	ldrh	r2, [r3, #2]
 800753c:	8afb      	ldrh	r3, [r7, #22]
 800753e:	429a      	cmp	r2, r3
 8007540:	f63f af74 	bhi.w	800742c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	791b      	ldrb	r3, [r3, #4]
 8007548:	2b02      	cmp	r3, #2
 800754a:	bf28      	it	cs
 800754c:	2302      	movcs	r3, #2
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007554:	429a      	cmp	r2, r3
 8007556:	d201      	bcs.n	800755c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007558:	2303      	movs	r3, #3
 800755a:	e001      	b.n	8007560 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800755c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007560:	4618      	mov	r0, r3
 8007562:	3730      	adds	r7, #48	; 0x30
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781a      	ldrb	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	785a      	ldrb	r2, [r3, #1]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	789a      	ldrb	r2, [r3, #2]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	78da      	ldrb	r2, [r3, #3]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	791a      	ldrb	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	795a      	ldrb	r2, [r3, #5]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	799a      	ldrb	r2, [r3, #6]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	79da      	ldrb	r2, [r3, #7]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	7a1a      	ldrb	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	721a      	strb	r2, [r3, #8]
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b087      	sub	sp, #28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	785a      	ldrb	r2, [r3, #1]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	789a      	ldrb	r2, [r3, #2]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	78da      	ldrb	r2, [r3, #3]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3304      	adds	r3, #4
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3305      	adds	r3, #5
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	b29b      	uxth	r3, r3
 800760a:	4313      	orrs	r3, r2
 800760c:	b29a      	uxth	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	799a      	ldrb	r2, [r3, #6]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	889b      	ldrh	r3, [r3, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007622:	2303      	movs	r3, #3
 8007624:	75fb      	strb	r3, [r7, #23]
 8007626:	e033      	b.n	8007690 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	889b      	ldrh	r3, [r3, #4]
 800762c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007630:	f023 0307 	bic.w	r3, r3, #7
 8007634:	b29a      	uxth	r2, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	889b      	ldrh	r3, [r3, #4]
 800763e:	b21a      	sxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3304      	adds	r3, #4
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b299      	uxth	r1, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3305      	adds	r3, #5
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	b29b      	uxth	r3, r3
 8007654:	430b      	orrs	r3, r1
 8007656:	b29b      	uxth	r3, r3
 8007658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800765c:	2b00      	cmp	r3, #0
 800765e:	d110      	bne.n	8007682 <USBH_ParseEPDesc+0xbc>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b299      	uxth	r1, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3305      	adds	r3, #5
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	b29b      	uxth	r3, r3
 8007674:	430b      	orrs	r3, r1
 8007676:	b29b      	uxth	r3, r3
 8007678:	b21b      	sxth	r3, r3
 800767a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800767e:	b21b      	sxth	r3, r3
 8007680:	e001      	b.n	8007686 <USBH_ParseEPDesc+0xc0>
 8007682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007686:	4313      	orrs	r3, r2
 8007688:	b21b      	sxth	r3, r3
 800768a:	b29a      	uxth	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007696:	2b00      	cmp	r3, #0
 8007698:	d116      	bne.n	80076c8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	78db      	ldrb	r3, [r3, #3]
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d005      	beq.n	80076b2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	78db      	ldrb	r3, [r3, #3]
 80076aa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d127      	bne.n	8007702 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	799b      	ldrb	r3, [r3, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <USBH_ParseEPDesc+0xfc>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	799b      	ldrb	r3, [r3, #6]
 80076be:	2b10      	cmp	r3, #16
 80076c0:	d91f      	bls.n	8007702 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076c2:	2303      	movs	r3, #3
 80076c4:	75fb      	strb	r3, [r7, #23]
 80076c6:	e01c      	b.n	8007702 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	78db      	ldrb	r3, [r3, #3]
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10a      	bne.n	80076ea <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	799b      	ldrb	r3, [r3, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <USBH_ParseEPDesc+0x11e>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	799b      	ldrb	r3, [r3, #6]
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d90e      	bls.n	8007702 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076e4:	2303      	movs	r3, #3
 80076e6:	75fb      	strb	r3, [r7, #23]
 80076e8:	e00b      	b.n	8007702 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	78db      	ldrb	r3, [r3, #3]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d105      	bne.n	8007702 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	799b      	ldrb	r3, [r3, #6]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076fe:	2303      	movs	r3, #3
 8007700:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
}
 8007704:	4618      	mov	r0, r3
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b03      	cmp	r3, #3
 8007726:	d120      	bne.n	800776a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	1e9a      	subs	r2, r3, #2
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	4293      	cmp	r3, r2
 8007732:	bf28      	it	cs
 8007734:	4613      	movcs	r3, r2
 8007736:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3302      	adds	r3, #2
 800773c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800773e:	2300      	movs	r3, #0
 8007740:	82fb      	strh	r3, [r7, #22]
 8007742:	e00b      	b.n	800775c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007744:	8afb      	ldrh	r3, [r7, #22]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3301      	adds	r3, #1
 8007754:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007756:	8afb      	ldrh	r3, [r7, #22]
 8007758:	3302      	adds	r3, #2
 800775a:	82fb      	strh	r3, [r7, #22]
 800775c:	8afa      	ldrh	r2, [r7, #22]
 800775e:	8abb      	ldrh	r3, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	d3ef      	bcc.n	8007744 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
  }
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	881a      	ldrh	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	4413      	add	r3, r2
 800778c:	b29a      	uxth	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4413      	add	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800779e:	68fb      	ldr	r3, [r7, #12]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	789b      	ldrb	r3, [r3, #2]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d002      	beq.n	80077cc <USBH_CtlReq+0x20>
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d00f      	beq.n	80077ea <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077ca:	e027      	b.n	800781c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	88fa      	ldrh	r2, [r7, #6]
 80077d6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2202      	movs	r2, #2
 80077e2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80077e4:	2301      	movs	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
      break;
 80077e8:	e018      	b.n	800781c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f81c 	bl	8007828 <USBH_HandleControl>
 80077f0:	4603      	mov	r3, r0
 80077f2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <USBH_CtlReq+0x54>
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d106      	bne.n	800780e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	761a      	strb	r2, [r3, #24]
      break;
 800780c:	e005      	b.n	800781a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	2b02      	cmp	r3, #2
 8007812:	d102      	bne.n	800781a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	709a      	strb	r2, [r3, #2]
      break;
 800781a:	bf00      	nop
  }
  return status;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af02      	add	r7, sp, #8
 800782e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007830:	2301      	movs	r3, #1
 8007832:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007834:	2300      	movs	r3, #0
 8007836:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7e1b      	ldrb	r3, [r3, #24]
 800783c:	3b01      	subs	r3, #1
 800783e:	2b0a      	cmp	r3, #10
 8007840:	f200 8156 	bhi.w	8007af0 <USBH_HandleControl+0x2c8>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <USBH_HandleControl+0x24>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007879 	.word	0x08007879
 8007850:	08007893 	.word	0x08007893
 8007854:	080078fd 	.word	0x080078fd
 8007858:	08007923 	.word	0x08007923
 800785c:	0800795b 	.word	0x0800795b
 8007860:	08007985 	.word	0x08007985
 8007864:	080079d7 	.word	0x080079d7
 8007868:	080079f9 	.word	0x080079f9
 800786c:	08007a35 	.word	0x08007a35
 8007870:	08007a5b 	.word	0x08007a5b
 8007874:	08007a99 	.word	0x08007a99
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 0110 	add.w	r1, r3, #16
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	795b      	ldrb	r3, [r3, #5]
 8007882:	461a      	mov	r2, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f943 	bl	8007b10 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	761a      	strb	r2, [r3, #24]
      break;
 8007890:	e139      	b.n	8007b06 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	795b      	ldrb	r3, [r3, #5]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fccd 	bl	8008238 <USBH_LL_GetURBState>
 800789e:	4603      	mov	r3, r0
 80078a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d11e      	bne.n	80078e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7c1b      	ldrb	r3, [r3, #16]
 80078ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8adb      	ldrh	r3, [r3, #22]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078ba:	7b7b      	ldrb	r3, [r7, #13]
 80078bc:	2b80      	cmp	r3, #128	; 0x80
 80078be:	d103      	bne.n	80078c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2203      	movs	r2, #3
 80078c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078c6:	e115      	b.n	8007af4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2205      	movs	r2, #5
 80078cc:	761a      	strb	r2, [r3, #24]
      break;
 80078ce:	e111      	b.n	8007af4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078d0:	7b7b      	ldrb	r3, [r7, #13]
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d103      	bne.n	80078de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2209      	movs	r2, #9
 80078da:	761a      	strb	r2, [r3, #24]
      break;
 80078dc:	e10a      	b.n	8007af4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2207      	movs	r2, #7
 80078e2:	761a      	strb	r2, [r3, #24]
      break;
 80078e4:	e106      	b.n	8007af4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d003      	beq.n	80078f4 <USBH_HandleControl+0xcc>
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	f040 8100 	bne.w	8007af4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	220b      	movs	r2, #11
 80078f8:	761a      	strb	r2, [r3, #24]
      break;
 80078fa:	e0fb      	b.n	8007af4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6899      	ldr	r1, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	899a      	ldrh	r2, [r3, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	791b      	ldrb	r3, [r3, #4]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f93a 	bl	8007b8e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2204      	movs	r2, #4
 800791e:	761a      	strb	r2, [r3, #24]
      break;
 8007920:	e0f1      	b.n	8007b06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fc85 	bl	8008238 <USBH_LL_GetURBState>
 800792e:	4603      	mov	r3, r0
 8007930:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d102      	bne.n	800793e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2209      	movs	r2, #9
 800793c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b05      	cmp	r3, #5
 8007942:	d102      	bne.n	800794a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007944:	2303      	movs	r3, #3
 8007946:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007948:	e0d6      	b.n	8007af8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b04      	cmp	r3, #4
 800794e:	f040 80d3 	bne.w	8007af8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	220b      	movs	r2, #11
 8007956:	761a      	strb	r2, [r3, #24]
      break;
 8007958:	e0ce      	b.n	8007af8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6899      	ldr	r1, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	899a      	ldrh	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	795b      	ldrb	r3, [r3, #5]
 8007966:	2001      	movs	r0, #1
 8007968:	9000      	str	r0, [sp, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f8ea 	bl	8007b44 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007976:	b29a      	uxth	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2206      	movs	r2, #6
 8007980:	761a      	strb	r2, [r3, #24]
      break;
 8007982:	e0c0      	b.n	8007b06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	795b      	ldrb	r3, [r3, #5]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc54 	bl	8008238 <USBH_LL_GetURBState>
 8007990:	4603      	mov	r3, r0
 8007992:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d103      	bne.n	80079a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2207      	movs	r2, #7
 800799e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079a0:	e0ac      	b.n	8007afc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b05      	cmp	r3, #5
 80079a6:	d105      	bne.n	80079b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	220c      	movs	r2, #12
 80079ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079ae:	2303      	movs	r3, #3
 80079b0:	73fb      	strb	r3, [r7, #15]
      break;
 80079b2:	e0a3      	b.n	8007afc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d103      	bne.n	80079c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2205      	movs	r2, #5
 80079be:	761a      	strb	r2, [r3, #24]
      break;
 80079c0:	e09c      	b.n	8007afc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	f040 8099 	bne.w	8007afc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	220b      	movs	r2, #11
 80079ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079d0:	2302      	movs	r3, #2
 80079d2:	73fb      	strb	r3, [r7, #15]
      break;
 80079d4:	e092      	b.n	8007afc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	791b      	ldrb	r3, [r3, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f8d5 	bl	8007b8e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2208      	movs	r2, #8
 80079f4:	761a      	strb	r2, [r3, #24]

      break;
 80079f6:	e086      	b.n	8007b06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	791b      	ldrb	r3, [r3, #4]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fc1a 	bl	8008238 <USBH_LL_GetURBState>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d105      	bne.n	8007a1a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	220d      	movs	r2, #13
 8007a12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a18:	e072      	b.n	8007b00 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d103      	bne.n	8007a28 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220b      	movs	r2, #11
 8007a24:	761a      	strb	r2, [r3, #24]
      break;
 8007a26:	e06b      	b.n	8007b00 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d168      	bne.n	8007b00 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	73fb      	strb	r3, [r7, #15]
      break;
 8007a32:	e065      	b.n	8007b00 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	795b      	ldrb	r3, [r3, #5]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	9200      	str	r2, [sp, #0]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f87f 	bl	8007b44 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	220a      	movs	r2, #10
 8007a56:	761a      	strb	r2, [r3, #24]
      break;
 8007a58:	e055      	b.n	8007b06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	795b      	ldrb	r3, [r3, #5]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fbe9 	bl	8008238 <USBH_LL_GetURBState>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d105      	bne.n	8007a7c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	220d      	movs	r2, #13
 8007a78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a7a:	e043      	b.n	8007b04 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d103      	bne.n	8007a8a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2209      	movs	r2, #9
 8007a86:	761a      	strb	r2, [r3, #24]
      break;
 8007a88:	e03c      	b.n	8007b04 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d139      	bne.n	8007b04 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	220b      	movs	r2, #11
 8007a94:	761a      	strb	r2, [r3, #24]
      break;
 8007a96:	e035      	b.n	8007b04 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7e5b      	ldrb	r3, [r3, #25]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	765a      	strb	r2, [r3, #25]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7e5b      	ldrb	r3, [r3, #25]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d806      	bhi.n	8007aba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ab8:	e025      	b.n	8007b06 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ac0:	2106      	movs	r1, #6
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	795b      	ldrb	r3, [r3, #5]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f90c 	bl	8007cf0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f906 	bl	8007cf0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007aea:	2302      	movs	r3, #2
 8007aec:	73fb      	strb	r3, [r7, #15]
      break;
 8007aee:	e00a      	b.n	8007b06 <USBH_HandleControl+0x2de>

    default:
      break;
 8007af0:	bf00      	nop
 8007af2:	e008      	b.n	8007b06 <USBH_HandleControl+0x2de>
      break;
 8007af4:	bf00      	nop
 8007af6:	e006      	b.n	8007b06 <USBH_HandleControl+0x2de>
      break;
 8007af8:	bf00      	nop
 8007afa:	e004      	b.n	8007b06 <USBH_HandleControl+0x2de>
      break;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <USBH_HandleControl+0x2de>
      break;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <USBH_HandleControl+0x2de>
      break;
 8007b04:	bf00      	nop
  }

  return status;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af04      	add	r7, sp, #16
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b1e:	79f9      	ldrb	r1, [r7, #7]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9303      	str	r3, [sp, #12]
 8007b24:	2308      	movs	r3, #8
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	2300      	movs	r3, #0
 8007b32:	2200      	movs	r2, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fb4e 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af04      	add	r7, sp, #16
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	4611      	mov	r1, r2
 8007b50:	461a      	mov	r2, r3
 8007b52:	460b      	mov	r3, r1
 8007b54:	80fb      	strh	r3, [r7, #6]
 8007b56:	4613      	mov	r3, r2
 8007b58:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b68:	7979      	ldrb	r1, [r7, #5]
 8007b6a:	7e3b      	ldrb	r3, [r7, #24]
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	9302      	str	r3, [sp, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	2301      	movs	r3, #1
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 fb29 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af04      	add	r7, sp, #16
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	80fb      	strh	r3, [r7, #6]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ba4:	7979      	ldrb	r1, [r7, #5]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9303      	str	r3, [sp, #12]
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	9302      	str	r3, [sp, #8]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2201      	movs	r2, #1
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fb0b 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007bc0:	2300      	movs	r3, #0

}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b088      	sub	sp, #32
 8007bce:	af04      	add	r7, sp, #16
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	460b      	mov	r3, r1
 8007bda:	80fb      	strh	r3, [r7, #6]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bee:	7979      	ldrb	r1, [r7, #5]
 8007bf0:	7e3b      	ldrb	r3, [r7, #24]
 8007bf2:	9303      	str	r3, [sp, #12]
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	9302      	str	r3, [sp, #8]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	2302      	movs	r3, #2
 8007c02:	2200      	movs	r2, #0
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fae6 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af04      	add	r7, sp, #16
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	461a      	mov	r2, r3
 8007c22:	460b      	mov	r3, r1
 8007c24:	80fb      	strh	r3, [r7, #6]
 8007c26:	4613      	mov	r3, r2
 8007c28:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c2a:	7979      	ldrb	r1, [r7, #5]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	88fb      	ldrh	r3, [r7, #6]
 8007c32:	9302      	str	r3, [sp, #8]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	2301      	movs	r3, #1
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	2201      	movs	r2, #1
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 fac8 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af04      	add	r7, sp, #16
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	70fb      	strb	r3, [r7, #3]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70bb      	strb	r3, [r7, #2]
 8007c66:	4613      	mov	r3, r2
 8007c68:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c6a:	7878      	ldrb	r0, [r7, #1]
 8007c6c:	78ba      	ldrb	r2, [r7, #2]
 8007c6e:	78f9      	ldrb	r1, [r7, #3]
 8007c70:	8b3b      	ldrh	r3, [r7, #24]
 8007c72:	9302      	str	r3, [sp, #8]
 8007c74:	7d3b      	ldrb	r3, [r7, #20]
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	7c3b      	ldrb	r3, [r7, #16]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa5b 	bl	800813a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa7a 	bl	8008198 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f836 	bl	8007d2c <USBH_GetFreePipe>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007cc4:	89fb      	ldrh	r3, [r7, #14]
 8007cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00a      	beq.n	8007ce4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	89fb      	ldrh	r3, [r7, #14]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	33e0      	adds	r3, #224	; 0xe0
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007ce4:	89fb      	ldrh	r3, [r7, #14]
 8007ce6:	b2db      	uxtb	r3, r3
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	2b0f      	cmp	r3, #15
 8007d00:	d80d      	bhi.n	8007d1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	33e0      	adds	r3, #224	; 0xe0
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	33e0      	adds	r3, #224	; 0xe0
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	e00f      	b.n	8007d5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	33e0      	adds	r3, #224	; 0xe0
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	e007      	b.n	8007d68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	73fb      	strb	r3, [r7, #15]
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	2b0f      	cmp	r3, #15
 8007d62:	d9ec      	bls.n	8007d3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d78:	2201      	movs	r2, #1
 8007d7a:	490e      	ldr	r1, [pc, #56]	; (8007db4 <MX_USB_HOST_Init+0x40>)
 8007d7c:	480e      	ldr	r0, [pc, #56]	; (8007db8 <MX_USB_HOST_Init+0x44>)
 8007d7e:	f7fe fba5 	bl	80064cc <USBH_Init>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d88:	f7f8 ff5a 	bl	8000c40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d8c:	490b      	ldr	r1, [pc, #44]	; (8007dbc <MX_USB_HOST_Init+0x48>)
 8007d8e:	480a      	ldr	r0, [pc, #40]	; (8007db8 <MX_USB_HOST_Init+0x44>)
 8007d90:	f7fe fc2a 	bl	80065e8 <USBH_RegisterClass>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d9a:	f7f8 ff51 	bl	8000c40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d9e:	4806      	ldr	r0, [pc, #24]	; (8007db8 <MX_USB_HOST_Init+0x44>)
 8007da0:	f7fe fcae 	bl	8006700 <USBH_Start>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007daa:	f7f8 ff49 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	08007dd5 	.word	0x08007dd5
 8007db8:	20000218 	.word	0x20000218
 8007dbc:	2000000c 	.word	0x2000000c

08007dc0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007dc4:	4802      	ldr	r0, [pc, #8]	; (8007dd0 <MX_USB_HOST_Process+0x10>)
 8007dc6:	f7fe fcab 	bl	8006720 <USBH_Process>
}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000218 	.word	0x20000218

08007dd4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d819      	bhi.n	8007e1c <USBH_UserProcess+0x48>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <USBH_UserProcess+0x1c>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e1d 	.word	0x08007e1d
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007e1d 	.word	0x08007e1d
 8007dfc:	08007e15 	.word	0x08007e15
 8007e00:	08007e05 	.word	0x08007e05
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e04:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <USBH_UserProcess+0x58>)
 8007e06:	2203      	movs	r2, #3
 8007e08:	701a      	strb	r2, [r3, #0]
  break;
 8007e0a:	e008      	b.n	8007e1e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e0c:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <USBH_UserProcess+0x58>)
 8007e0e:	2202      	movs	r2, #2
 8007e10:	701a      	strb	r2, [r3, #0]
  break;
 8007e12:	e004      	b.n	8007e1e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <USBH_UserProcess+0x58>)
 8007e16:	2201      	movs	r2, #1
 8007e18:	701a      	strb	r2, [r3, #0]
  break;
 8007e1a:	e000      	b.n	8007e1e <USBH_UserProcess+0x4a>

  default:
  break;
 8007e1c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	200005f0 	.word	0x200005f0

08007e30 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b0a0      	sub	sp, #128	; 0x80
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	605a      	str	r2, [r3, #4]
 8007e42:	609a      	str	r2, [r3, #8]
 8007e44:	60da      	str	r2, [r3, #12]
 8007e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e48:	f107 0310 	add.w	r3, r7, #16
 8007e4c:	225c      	movs	r2, #92	; 0x5c
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fb35 	bl	80084c0 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e5e:	d149      	bne.n	8007ef4 <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007e66:	2300      	movs	r3, #0
 8007e68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e6a:	f107 0310 	add.w	r3, r7, #16
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fb fa8c 	bl	800338c <HAL_RCCEx_PeriphCLKConfig>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 8007e7a:	f7f8 fee1 	bl	8000c40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	4b1e      	ldr	r3, [pc, #120]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e8e:	4b1b      	ldr	r3, [pc, #108]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007eac:	230a      	movs	r3, #10
 8007eae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4812      	ldr	r0, [pc, #72]	; (8007f00 <HAL_HCD_MspInit+0xd0>)
 8007eb8:	f7f9 fa3a 	bl	8001330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec0:	4a0e      	ldr	r2, [pc, #56]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec6:	6353      	str	r3, [r2, #52]	; 0x34
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60bb      	str	r3, [r7, #8]
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed0:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8007ed8:	4b08      	ldr	r3, [pc, #32]	; (8007efc <HAL_HCD_MspInit+0xcc>)
 8007eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	2043      	movs	r0, #67	; 0x43
 8007eea:	f7f9 f9ea 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007eee:	2043      	movs	r0, #67	; 0x43
 8007ef0:	f7f9 fa03 	bl	80012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	3780      	adds	r7, #128	; 0x80
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40023800 	.word	0x40023800
 8007f00:	40020000 	.word	0x40020000

08007f04 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe ffe3 	bl	8006ede <USBH_LL_IncTimer>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff f81b 	bl	8006f6a <USBH_LL_Connect>
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff f824 	bl	8006f98 <USBH_LL_Disconnect>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
 8007f64:	4613      	mov	r3, r2
 8007f66:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe ffd5 	bl	8006f32 <USBH_LL_PortEnabled>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe ffd5 	bl	8006f4e <USBH_LL_PortDisabled>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d12a      	bne.n	8008014 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fbe:	4a18      	ldr	r2, [pc, #96]	; (8008020 <USBH_LL_Init+0x74>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a15      	ldr	r2, [pc, #84]	; (8008020 <USBH_LL_Init+0x74>)
 8007fca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fce:	4b14      	ldr	r3, [pc, #80]	; (8008020 <USBH_LL_Init+0x74>)
 8007fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8007fd6:	4b12      	ldr	r3, [pc, #72]	; (8008020 <USBH_LL_Init+0x74>)
 8007fd8:	220c      	movs	r2, #12
 8007fda:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <USBH_LL_Init+0x74>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <USBH_LL_Init+0x74>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <USBH_LL_Init+0x74>)
 8007fea:	2202      	movs	r2, #2
 8007fec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <USBH_LL_Init+0x74>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ff4:	480a      	ldr	r0, [pc, #40]	; (8008020 <USBH_LL_Init+0x74>)
 8007ff6:	f7f9 fb61 	bl	80016bc <HAL_HCD_Init>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008000:	f7f8 fe1e 	bl	8000c40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008004:	4806      	ldr	r0, [pc, #24]	; (8008020 <USBH_LL_Init+0x74>)
 8008006:	f7f9 ff44 	bl	8001e92 <HAL_HCD_GetCurrentFrame>
 800800a:	4603      	mov	r3, r0
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fe ff56 	bl	8006ec0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	200005f4 	.word	0x200005f4

08008024 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800803a:	4618      	mov	r0, r3
 800803c:	f7f9 feb3 	bl	8001da6 <HAL_HCD_Start>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f952 	bl	80082f0 <USBH_Get_USB_Status>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008050:	7bbb      	ldrb	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008070:	4618      	mov	r0, r3
 8008072:	f7f9 febb 	bl	8001dec <HAL_HCD_Stop>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f937 	bl	80082f0 <USBH_Get_USB_Status>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008086:	7bbb      	ldrb	r3, [r7, #14]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f9 ff03 	bl	8001eae <HAL_HCD_GetCurrentSpeed>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d00c      	beq.n	80080c8 <USBH_LL_GetSpeed+0x38>
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d80d      	bhi.n	80080ce <USBH_LL_GetSpeed+0x3e>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <USBH_LL_GetSpeed+0x2c>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d003      	beq.n	80080c2 <USBH_LL_GetSpeed+0x32>
 80080ba:	e008      	b.n	80080ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
    break;
 80080c0:	e008      	b.n	80080d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080c2:	2301      	movs	r3, #1
 80080c4:	73fb      	strb	r3, [r7, #15]
    break;
 80080c6:	e005      	b.n	80080d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080c8:	2302      	movs	r3, #2
 80080ca:	73fb      	strb	r3, [r7, #15]
    break;
 80080cc:	e002      	b.n	80080d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080ce:	2301      	movs	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
    break;
 80080d2:	bf00      	nop
  }
  return  speed;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7f9 fe96 	bl	8001e26 <HAL_HCD_ResetPort>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f8f5 	bl	80082f0 <USBH_Get_USB_Status>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810a:	7bbb      	ldrb	r3, [r7, #14]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f7f9 fe9d 	bl	8001e6a <HAL_HCD_HC_GetXferCount>
 8008130:	4603      	mov	r3, r0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800813a:	b590      	push	{r4, r7, lr}
 800813c:	b089      	sub	sp, #36	; 0x24
 800813e:	af04      	add	r7, sp, #16
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	461a      	mov	r2, r3
 8008148:	4603      	mov	r3, r0
 800814a:	70fb      	strb	r3, [r7, #3]
 800814c:	460b      	mov	r3, r1
 800814e:	70bb      	strb	r3, [r7, #2]
 8008150:	4613      	mov	r3, r2
 8008152:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008162:	787c      	ldrb	r4, [r7, #1]
 8008164:	78ba      	ldrb	r2, [r7, #2]
 8008166:	78f9      	ldrb	r1, [r7, #3]
 8008168:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800816a:	9302      	str	r3, [sp, #8]
 800816c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4623      	mov	r3, r4
 800817a:	f7f9 fb01 	bl	8001780 <HAL_HCD_HC_Init>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f8b3 	bl	80082f0 <USBH_Get_USB_Status>
 800818a:	4603      	mov	r3, r0
 800818c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800818e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}

08008198 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7f9 fb71 	bl	800189e <HAL_HCD_HC_Halt>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f894 	bl	80082f0 <USBH_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081d6:	b590      	push	{r4, r7, lr}
 80081d8:	b089      	sub	sp, #36	; 0x24
 80081da:	af04      	add	r7, sp, #16
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	461a      	mov	r2, r3
 80081e4:	4603      	mov	r3, r0
 80081e6:	70fb      	strb	r3, [r7, #3]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70bb      	strb	r3, [r7, #2]
 80081ec:	4613      	mov	r3, r2
 80081ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081fe:	787c      	ldrb	r4, [r7, #1]
 8008200:	78ba      	ldrb	r2, [r7, #2]
 8008202:	78f9      	ldrb	r1, [r7, #3]
 8008204:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	4623      	mov	r3, r4
 800821a:	f7f9 fb63 	bl	80018e4 <HAL_HCD_HC_SubmitRequest>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f863 	bl	80082f0 <USBH_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	bd90      	pop	{r4, r7, pc}

08008238 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7f9 fdf7 	bl	8001e42 <HAL_HCD_HC_GetURBState>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800826a:	20c8      	movs	r0, #200	; 0xc8
 800826c:	f7f8 ff2a 	bl	80010c4 <HAL_Delay>
  return USBH_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800827a:	b480      	push	{r7}
 800827c:	b085      	sub	sp, #20
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
 8008286:	4613      	mov	r3, r2
 8008288:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008290:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	212c      	movs	r1, #44	; 0x2c
 8008298:	fb01 f303 	mul.w	r3, r1, r3
 800829c:	4413      	add	r3, r2
 800829e:	333b      	adds	r3, #59	; 0x3b
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082a6:	78fb      	ldrb	r3, [r7, #3]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	212c      	movs	r1, #44	; 0x2c
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	4413      	add	r3, r2
 80082b2:	3354      	adds	r3, #84	; 0x54
 80082b4:	78ba      	ldrb	r2, [r7, #2]
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	e008      	b.n	80082cc <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	212c      	movs	r1, #44	; 0x2c
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	3355      	adds	r3, #85	; 0x55
 80082c8:	78ba      	ldrb	r2, [r7, #2]
 80082ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7f8 feee 	bl	80010c4 <HAL_Delay>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2b03      	cmp	r3, #3
 8008302:	d817      	bhi.n	8008334 <USBH_Get_USB_Status+0x44>
 8008304:	a201      	add	r2, pc, #4	; (adr r2, 800830c <USBH_Get_USB_Status+0x1c>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	0800831d 	.word	0x0800831d
 8008310:	08008323 	.word	0x08008323
 8008314:	08008329 	.word	0x08008329
 8008318:	0800832f 	.word	0x0800832f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
    break;
 8008320:	e00b      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	73fb      	strb	r3, [r7, #15]
    break;
 8008326:	e008      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
    break;
 800832c:	e005      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800832e:	2302      	movs	r3, #2
 8008330:	73fb      	strb	r3, [r7, #15]
    break;
 8008332:	e002      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	bf00      	nop
  }
  return usb_status;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <malloc>:
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <malloc+0xc>)
 800834a:	4601      	mov	r1, r0
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	f000 b82b 	b.w	80083a8 <_malloc_r>
 8008352:	bf00      	nop
 8008354:	20000078 	.word	0x20000078

08008358 <free>:
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <free+0xc>)
 800835a:	4601      	mov	r1, r0
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	f000 b8f3 	b.w	8008548 <_free_r>
 8008362:	bf00      	nop
 8008364:	20000078 	.word	0x20000078

08008368 <sbrk_aligned>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4e0e      	ldr	r6, [pc, #56]	; (80083a4 <sbrk_aligned+0x3c>)
 800836c:	460c      	mov	r4, r1
 800836e:	6831      	ldr	r1, [r6, #0]
 8008370:	4605      	mov	r5, r0
 8008372:	b911      	cbnz	r1, 800837a <sbrk_aligned+0x12>
 8008374:	f000 f8ac 	bl	80084d0 <_sbrk_r>
 8008378:	6030      	str	r0, [r6, #0]
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f000 f8a7 	bl	80084d0 <_sbrk_r>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d00a      	beq.n	800839c <sbrk_aligned+0x34>
 8008386:	1cc4      	adds	r4, r0, #3
 8008388:	f024 0403 	bic.w	r4, r4, #3
 800838c:	42a0      	cmp	r0, r4
 800838e:	d007      	beq.n	80083a0 <sbrk_aligned+0x38>
 8008390:	1a21      	subs	r1, r4, r0
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f89c 	bl	80084d0 <_sbrk_r>
 8008398:	3001      	adds	r0, #1
 800839a:	d101      	bne.n	80083a0 <sbrk_aligned+0x38>
 800839c:	f04f 34ff 	mov.w	r4, #4294967295
 80083a0:	4620      	mov	r0, r4
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	200008fc 	.word	0x200008fc

080083a8 <_malloc_r>:
 80083a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ac:	1ccd      	adds	r5, r1, #3
 80083ae:	f025 0503 	bic.w	r5, r5, #3
 80083b2:	3508      	adds	r5, #8
 80083b4:	2d0c      	cmp	r5, #12
 80083b6:	bf38      	it	cc
 80083b8:	250c      	movcc	r5, #12
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	4607      	mov	r7, r0
 80083be:	db01      	blt.n	80083c4 <_malloc_r+0x1c>
 80083c0:	42a9      	cmp	r1, r5
 80083c2:	d905      	bls.n	80083d0 <_malloc_r+0x28>
 80083c4:	230c      	movs	r3, #12
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	2600      	movs	r6, #0
 80083ca:	4630      	mov	r0, r6
 80083cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084a4 <_malloc_r+0xfc>
 80083d4:	f000 f868 	bl	80084a8 <__malloc_lock>
 80083d8:	f8d8 3000 	ldr.w	r3, [r8]
 80083dc:	461c      	mov	r4, r3
 80083de:	bb5c      	cbnz	r4, 8008438 <_malloc_r+0x90>
 80083e0:	4629      	mov	r1, r5
 80083e2:	4638      	mov	r0, r7
 80083e4:	f7ff ffc0 	bl	8008368 <sbrk_aligned>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	4604      	mov	r4, r0
 80083ec:	d155      	bne.n	800849a <_malloc_r+0xf2>
 80083ee:	f8d8 4000 	ldr.w	r4, [r8]
 80083f2:	4626      	mov	r6, r4
 80083f4:	2e00      	cmp	r6, #0
 80083f6:	d145      	bne.n	8008484 <_malloc_r+0xdc>
 80083f8:	2c00      	cmp	r4, #0
 80083fa:	d048      	beq.n	800848e <_malloc_r+0xe6>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	4631      	mov	r1, r6
 8008400:	4638      	mov	r0, r7
 8008402:	eb04 0903 	add.w	r9, r4, r3
 8008406:	f000 f863 	bl	80084d0 <_sbrk_r>
 800840a:	4581      	cmp	r9, r0
 800840c:	d13f      	bne.n	800848e <_malloc_r+0xe6>
 800840e:	6821      	ldr	r1, [r4, #0]
 8008410:	1a6d      	subs	r5, r5, r1
 8008412:	4629      	mov	r1, r5
 8008414:	4638      	mov	r0, r7
 8008416:	f7ff ffa7 	bl	8008368 <sbrk_aligned>
 800841a:	3001      	adds	r0, #1
 800841c:	d037      	beq.n	800848e <_malloc_r+0xe6>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	442b      	add	r3, r5
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	f8d8 3000 	ldr.w	r3, [r8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d038      	beq.n	800849e <_malloc_r+0xf6>
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	42a2      	cmp	r2, r4
 8008430:	d12b      	bne.n	800848a <_malloc_r+0xe2>
 8008432:	2200      	movs	r2, #0
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	e00f      	b.n	8008458 <_malloc_r+0xb0>
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	1b52      	subs	r2, r2, r5
 800843c:	d41f      	bmi.n	800847e <_malloc_r+0xd6>
 800843e:	2a0b      	cmp	r2, #11
 8008440:	d917      	bls.n	8008472 <_malloc_r+0xca>
 8008442:	1961      	adds	r1, r4, r5
 8008444:	42a3      	cmp	r3, r4
 8008446:	6025      	str	r5, [r4, #0]
 8008448:	bf18      	it	ne
 800844a:	6059      	strne	r1, [r3, #4]
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	bf08      	it	eq
 8008450:	f8c8 1000 	streq.w	r1, [r8]
 8008454:	5162      	str	r2, [r4, r5]
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	4638      	mov	r0, r7
 800845a:	f104 060b 	add.w	r6, r4, #11
 800845e:	f000 f829 	bl	80084b4 <__malloc_unlock>
 8008462:	f026 0607 	bic.w	r6, r6, #7
 8008466:	1d23      	adds	r3, r4, #4
 8008468:	1af2      	subs	r2, r6, r3
 800846a:	d0ae      	beq.n	80083ca <_malloc_r+0x22>
 800846c:	1b9b      	subs	r3, r3, r6
 800846e:	50a3      	str	r3, [r4, r2]
 8008470:	e7ab      	b.n	80083ca <_malloc_r+0x22>
 8008472:	42a3      	cmp	r3, r4
 8008474:	6862      	ldr	r2, [r4, #4]
 8008476:	d1dd      	bne.n	8008434 <_malloc_r+0x8c>
 8008478:	f8c8 2000 	str.w	r2, [r8]
 800847c:	e7ec      	b.n	8008458 <_malloc_r+0xb0>
 800847e:	4623      	mov	r3, r4
 8008480:	6864      	ldr	r4, [r4, #4]
 8008482:	e7ac      	b.n	80083de <_malloc_r+0x36>
 8008484:	4634      	mov	r4, r6
 8008486:	6876      	ldr	r6, [r6, #4]
 8008488:	e7b4      	b.n	80083f4 <_malloc_r+0x4c>
 800848a:	4613      	mov	r3, r2
 800848c:	e7cc      	b.n	8008428 <_malloc_r+0x80>
 800848e:	230c      	movs	r3, #12
 8008490:	603b      	str	r3, [r7, #0]
 8008492:	4638      	mov	r0, r7
 8008494:	f000 f80e 	bl	80084b4 <__malloc_unlock>
 8008498:	e797      	b.n	80083ca <_malloc_r+0x22>
 800849a:	6025      	str	r5, [r4, #0]
 800849c:	e7dc      	b.n	8008458 <_malloc_r+0xb0>
 800849e:	605b      	str	r3, [r3, #4]
 80084a0:	deff      	udf	#255	; 0xff
 80084a2:	bf00      	nop
 80084a4:	200008f8 	.word	0x200008f8

080084a8 <__malloc_lock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__malloc_lock+0x8>)
 80084aa:	f000 b84b 	b.w	8008544 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	20000a3c 	.word	0x20000a3c

080084b4 <__malloc_unlock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__malloc_unlock+0x8>)
 80084b6:	f000 b846 	b.w	8008546 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	20000a3c 	.word	0x20000a3c

080084c0 <memset>:
 80084c0:	4402      	add	r2, r0
 80084c2:	4603      	mov	r3, r0
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d100      	bne.n	80084ca <memset+0xa>
 80084c8:	4770      	bx	lr
 80084ca:	f803 1b01 	strb.w	r1, [r3], #1
 80084ce:	e7f9      	b.n	80084c4 <memset+0x4>

080084d0 <_sbrk_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d06      	ldr	r5, [pc, #24]	; (80084ec <_sbrk_r+0x1c>)
 80084d4:	2300      	movs	r3, #0
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	f7f8 fc9c 	bl	8000e18 <_sbrk>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_sbrk_r+0x1a>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_sbrk_r+0x1a>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	20000a38 	.word	0x20000a38

080084f0 <__errno>:
 80084f0:	4b01      	ldr	r3, [pc, #4]	; (80084f8 <__errno+0x8>)
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000078 	.word	0x20000078

080084fc <__libc_init_array>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4d0d      	ldr	r5, [pc, #52]	; (8008534 <__libc_init_array+0x38>)
 8008500:	4c0d      	ldr	r4, [pc, #52]	; (8008538 <__libc_init_array+0x3c>)
 8008502:	1b64      	subs	r4, r4, r5
 8008504:	10a4      	asrs	r4, r4, #2
 8008506:	2600      	movs	r6, #0
 8008508:	42a6      	cmp	r6, r4
 800850a:	d109      	bne.n	8008520 <__libc_init_array+0x24>
 800850c:	4d0b      	ldr	r5, [pc, #44]	; (800853c <__libc_init_array+0x40>)
 800850e:	4c0c      	ldr	r4, [pc, #48]	; (8008540 <__libc_init_array+0x44>)
 8008510:	f000 f866 	bl	80085e0 <_init>
 8008514:	1b64      	subs	r4, r4, r5
 8008516:	10a4      	asrs	r4, r4, #2
 8008518:	2600      	movs	r6, #0
 800851a:	42a6      	cmp	r6, r4
 800851c:	d105      	bne.n	800852a <__libc_init_array+0x2e>
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	f855 3b04 	ldr.w	r3, [r5], #4
 8008524:	4798      	blx	r3
 8008526:	3601      	adds	r6, #1
 8008528:	e7ee      	b.n	8008508 <__libc_init_array+0xc>
 800852a:	f855 3b04 	ldr.w	r3, [r5], #4
 800852e:	4798      	blx	r3
 8008530:	3601      	adds	r6, #1
 8008532:	e7f2      	b.n	800851a <__libc_init_array+0x1e>
 8008534:	0800861c 	.word	0x0800861c
 8008538:	0800861c 	.word	0x0800861c
 800853c:	0800861c 	.word	0x0800861c
 8008540:	08008620 	.word	0x08008620

08008544 <__retarget_lock_acquire_recursive>:
 8008544:	4770      	bx	lr

08008546 <__retarget_lock_release_recursive>:
 8008546:	4770      	bx	lr

08008548 <_free_r>:
 8008548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800854a:	2900      	cmp	r1, #0
 800854c:	d044      	beq.n	80085d8 <_free_r+0x90>
 800854e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008552:	9001      	str	r0, [sp, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f1a1 0404 	sub.w	r4, r1, #4
 800855a:	bfb8      	it	lt
 800855c:	18e4      	addlt	r4, r4, r3
 800855e:	f7ff ffa3 	bl	80084a8 <__malloc_lock>
 8008562:	4a1e      	ldr	r2, [pc, #120]	; (80085dc <_free_r+0x94>)
 8008564:	9801      	ldr	r0, [sp, #4]
 8008566:	6813      	ldr	r3, [r2, #0]
 8008568:	b933      	cbnz	r3, 8008578 <_free_r+0x30>
 800856a:	6063      	str	r3, [r4, #4]
 800856c:	6014      	str	r4, [r2, #0]
 800856e:	b003      	add	sp, #12
 8008570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008574:	f7ff bf9e 	b.w	80084b4 <__malloc_unlock>
 8008578:	42a3      	cmp	r3, r4
 800857a:	d908      	bls.n	800858e <_free_r+0x46>
 800857c:	6825      	ldr	r5, [r4, #0]
 800857e:	1961      	adds	r1, r4, r5
 8008580:	428b      	cmp	r3, r1
 8008582:	bf01      	itttt	eq
 8008584:	6819      	ldreq	r1, [r3, #0]
 8008586:	685b      	ldreq	r3, [r3, #4]
 8008588:	1949      	addeq	r1, r1, r5
 800858a:	6021      	streq	r1, [r4, #0]
 800858c:	e7ed      	b.n	800856a <_free_r+0x22>
 800858e:	461a      	mov	r2, r3
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	b10b      	cbz	r3, 8008598 <_free_r+0x50>
 8008594:	42a3      	cmp	r3, r4
 8008596:	d9fa      	bls.n	800858e <_free_r+0x46>
 8008598:	6811      	ldr	r1, [r2, #0]
 800859a:	1855      	adds	r5, r2, r1
 800859c:	42a5      	cmp	r5, r4
 800859e:	d10b      	bne.n	80085b8 <_free_r+0x70>
 80085a0:	6824      	ldr	r4, [r4, #0]
 80085a2:	4421      	add	r1, r4
 80085a4:	1854      	adds	r4, r2, r1
 80085a6:	42a3      	cmp	r3, r4
 80085a8:	6011      	str	r1, [r2, #0]
 80085aa:	d1e0      	bne.n	800856e <_free_r+0x26>
 80085ac:	681c      	ldr	r4, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	6053      	str	r3, [r2, #4]
 80085b2:	440c      	add	r4, r1
 80085b4:	6014      	str	r4, [r2, #0]
 80085b6:	e7da      	b.n	800856e <_free_r+0x26>
 80085b8:	d902      	bls.n	80085c0 <_free_r+0x78>
 80085ba:	230c      	movs	r3, #12
 80085bc:	6003      	str	r3, [r0, #0]
 80085be:	e7d6      	b.n	800856e <_free_r+0x26>
 80085c0:	6825      	ldr	r5, [r4, #0]
 80085c2:	1961      	adds	r1, r4, r5
 80085c4:	428b      	cmp	r3, r1
 80085c6:	bf04      	itt	eq
 80085c8:	6819      	ldreq	r1, [r3, #0]
 80085ca:	685b      	ldreq	r3, [r3, #4]
 80085cc:	6063      	str	r3, [r4, #4]
 80085ce:	bf04      	itt	eq
 80085d0:	1949      	addeq	r1, r1, r5
 80085d2:	6021      	streq	r1, [r4, #0]
 80085d4:	6054      	str	r4, [r2, #4]
 80085d6:	e7ca      	b.n	800856e <_free_r+0x26>
 80085d8:	b003      	add	sp, #12
 80085da:	bd30      	pop	{r4, r5, pc}
 80085dc:	200008f8 	.word	0x200008f8

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
