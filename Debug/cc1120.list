
cc1120.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd0  08007cd0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd8  08007cd8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  2000007c  08007d5c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  08007d5c  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d12  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b1c  00000000  00000000  00036e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  0003a920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc5  00000000  00000000  0003bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ab2  00000000  00000000  0003c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a03  00000000  00000000  00041387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2598  00000000  00000000  0005ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d70  00000000  00000000  0012d324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00132094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007c9c 	.word	0x08007c9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	08007c9c 	.word	0x08007c9c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b41      	ldr	r3, [pc, #260]	; (8000620 <MX_GPIO_Init+0x120>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a40      	ldr	r2, [pc, #256]	; (8000620 <MX_GPIO_Init+0x120>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <MX_GPIO_Init+0x120>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b3a      	ldr	r3, [pc, #232]	; (8000620 <MX_GPIO_Init+0x120>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a39      	ldr	r2, [pc, #228]	; (8000620 <MX_GPIO_Init+0x120>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b37      	ldr	r3, [pc, #220]	; (8000620 <MX_GPIO_Init+0x120>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b33      	ldr	r3, [pc, #204]	; (8000620 <MX_GPIO_Init+0x120>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a32      	ldr	r2, [pc, #200]	; (8000620 <MX_GPIO_Init+0x120>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <MX_GPIO_Init+0x120>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <MX_GPIO_Init+0x120>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a2b      	ldr	r2, [pc, #172]	; (8000620 <MX_GPIO_Init+0x120>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <MX_GPIO_Init+0x120>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2110      	movs	r1, #16
 800058a:	4826      	ldr	r0, [pc, #152]	; (8000624 <MX_GPIO_Init+0x124>)
 800058c:	f000 fe48 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HGM_CC1190_Pin|LNA_EN_CC1190_Pin|USERLED2_Pin|USERLED_Pin
 8000590:	2200      	movs	r2, #0
 8000592:	f24c 0138 	movw	r1, #49208	; 0xc038
 8000596:	4824      	ldr	r0, [pc, #144]	; (8000628 <MX_GPIO_Init+0x128>)
 8000598:	f000 fe42 	bl	8001220 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA_EN_CC11190_GPIO_Port, PA_EN_CC11190_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	4822      	ldr	r0, [pc, #136]	; (800062c <MX_GPIO_Init+0x12c>)
 80005a2:	f000 fe3d 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005a6:	2310      	movs	r3, #16
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4819      	ldr	r0, [pc, #100]	; (8000624 <MX_GPIO_Init+0x124>)
 80005be:	f000 fc9b 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HGM_CC1190_Pin|LNA_EN_CC1190_Pin|USERLED2_Pin|USERLED_Pin
 80005c2:	f24c 0338 	movw	r3, #49208	; 0xc038
 80005c6:	617b      	str	r3, [r7, #20]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <MX_GPIO_Init+0x128>)
 80005dc:	f000 fc8c 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA_EN_CC11190_Pin;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PA_EN_CC11190_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_GPIO_Init+0x12c>)
 80005f8:	f000 fc7e 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO3_CC1120_Pin|GPIO2_CC1120_Pin|GPIO0_CC1120_Pin;
 80005fc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <MX_GPIO_Init+0x12c>)
 8000612:	f000 fc71 	bl	8000ef8 <HAL_GPIO_Init>

}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	; 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400
 800062c:	40020800 	.word	0x40020800

08000630 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f002 f9fb 	bl	8002a68 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f8d2 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000098 	.word	0x20000098
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d12b      	bne.n	8000706 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_I2C_MspInit+0x88>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <HAL_I2C_MspInit+0x88>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_I2C_MspInit+0x88>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ca:	23c0      	movs	r3, #192	; 0xc0
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ce:	2312      	movs	r3, #18
 80006d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006da:	2304      	movs	r3, #4
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <HAL_I2C_MspInit+0x8c>)
 80006e6:	f000 fc07 	bl	8000ef8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_I2C_MspInit+0x88>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_I2C_MspInit+0x88>)
 80006f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_I2C_MspInit+0x88>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005400 	.word	0x40005400
 8000714:	40023800 	.word	0x40023800
 8000718:	40020400 	.word	0x40020400

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fa42 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f80e 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f7ff feea 	bl	8000500 <MX_GPIO_Init>
  MX_SPI1_Init();
 800072c:	f000 f87e 	bl	800082c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000730:	f7ff ff7e 	bl	8000630 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000734:	f000 f99c 	bl	8000a70 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000738:	f006 fe7a 	bl	8007430 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800073c:	f006 fe9e 	bl	800747c <MX_USB_HOST_Process>
 8000740:	e7fc      	b.n	800073c <main+0x20>
	...

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fa12 	bl	8007b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <SystemClock_Config+0xd4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a29      	ldr	r2, [pc, #164]	; (8000818 <SystemClock_Config+0xd4>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <SystemClock_Config+0xd4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemClock_Config+0xd8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000790:	4a22      	ldr	r2, [pc, #136]	; (800081c <SystemClock_Config+0xd8>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <SystemClock_Config+0xd8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007b8:	230f      	movs	r3, #15
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007bc:	2390      	movs	r3, #144	; 0x90
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007c4:	2305      	movs	r3, #5
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 f87b 	bl	80038cc <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007dc:	f000 f820 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2103      	movs	r1, #3
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fa76 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800080a:	f000 f809 	bl	8000820 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_SPI1_Init+0x64>)
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MX_SPI1_Init+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800083c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_SPI1_Init+0x64>)
 800084c:	2202      	movs	r2, #2
 800084e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_SPI1_Init+0x64>)
 8000858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_SPI1_Init+0x64>)
 8000860:	2220      	movs	r2, #32
 8000862:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_SPI1_Init+0x64>)
 8000878:	220a      	movs	r2, #10
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_SPI1_Init+0x64>)
 800087e:	f003 fac3 	bl	8003e08 <HAL_SPI_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000888:	f7ff ffca 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000ec 	.word	0x200000ec
 8000894:	40013000 	.word	0x40013000

08000898 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_SPI_MspInit+0x84>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d12b      	bne.n	8000912 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_SPI_MspInit+0x88>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_SPI_MspInit+0x88>)
 80008c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_SPI_MspInit+0x88>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_SPI_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_SPI_MspInit+0x88>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_SPI_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008f2:	23e0      	movs	r3, #224	; 0xe0
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000902:	2305      	movs	r3, #5
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_SPI_MspInit+0x8c>)
 800090e:	f000 faf3 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40013000 	.word	0x40013000
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f942 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <OTG_FS_IRQHandler+0x10>)
 80009d2:	f000 fea9 	bl	8001728 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000056c 	.word	0x2000056c

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f007 f8cc 	bl	8007bac <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20020000 	.word	0x20020000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	20000144 	.word	0x20000144
 8000a48:	200009b8 	.word	0x200009b8

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_USART1_UART_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa8:	f003 fa37 	bl	8003f1a <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f7ff feb5 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000148 	.word	0x20000148
 8000ac0:	40011000 	.word	0x40011000

08000ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d12c      	bne.n	8000b40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_UART_MspInit+0x88>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x88>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_UART_MspInit+0x88>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_UART_MspInit+0x88>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_UART_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b30:	2307      	movs	r3, #7
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_UART_MspInit+0x8c>)
 8000b3c:	f000 f9dc 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7e:	f7ff ff65 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f007 f819 	bl	8007bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fdc9 	bl	800071c <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b98:	08007ce0 	.word	0x08007ce0
  ldr r2, =_sbss
 8000b9c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ba0:	200009b8 	.word	0x200009b8

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f94f 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fea4 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f967 	bl	8000ede <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f92f 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	2000018c 	.word	0x2000018c

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2000018c 	.word	0x2000018c

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff29 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff3e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff31 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e165      	b.n	80011e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8154 	bne.w	80011da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80ae 	beq.w	80011da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_GPIO_Init+0x300>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a5c      	ldr	r2, [pc, #368]	; (80011f8 <HAL_GPIO_Init+0x300>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <HAL_GPIO_Init+0x300>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a58      	ldr	r2, [pc, #352]	; (80011fc <HAL_GPIO_Init+0x304>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x308>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x30c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x310>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x20a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x206>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x202>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_GPIO_Init+0x324>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a31      	ldr	r2, [pc, #196]	; (800121c <HAL_GPIO_Init+0x324>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_GPIO_Init+0x324>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_GPIO_Init+0x324>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_GPIO_Init+0x324>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <HAL_GPIO_Init+0x324>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_GPIO_Init+0x324>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a11      	ldr	r2, [pc, #68]	; (800121c <HAL_GPIO_Init+0x324>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae96 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001254:	b08f      	sub	sp, #60	; 0x3c
 8001256:	af0a      	add	r7, sp, #40	; 0x28
 8001258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e054      	b.n	800130e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f006 f934 	bl	80074ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 f96c 	bl	8004580 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	687e      	ldr	r6, [r7, #4]
 80012b0:	466d      	mov	r5, sp
 80012b2:	f106 0410 	add.w	r4, r6, #16
 80012b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80012c6:	1d33      	adds	r3, r6, #4
 80012c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f003 f8e6 	bl	800449c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 f963 	bl	80045a2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	687e      	ldr	r6, [r7, #4]
 80012e4:	466d      	mov	r5, sp
 80012e6:	f106 0410 	add.w	r4, r6, #16
 80012ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012fa:	1d33      	adds	r3, r6, #4
 80012fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f003 faec 	bl	80048dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001316 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001316:	b590      	push	{r4, r7, lr}
 8001318:	b089      	sub	sp, #36	; 0x24
 800131a:	af04      	add	r7, sp, #16
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	4608      	mov	r0, r1
 8001320:	4611      	mov	r1, r2
 8001322:	461a      	mov	r2, r3
 8001324:	4603      	mov	r3, r0
 8001326:	70fb      	strb	r3, [r7, #3]
 8001328:	460b      	mov	r3, r1
 800132a:	70bb      	strb	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_HCD_HC_Init+0x28>
 800133a:	2302      	movs	r3, #2
 800133c:	e076      	b.n	800142c <HAL_HCD_HC_Init+0x116>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	212c      	movs	r1, #44	; 0x2c
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4413      	add	r3, r2
 8001352:	333d      	adds	r3, #61	; 0x3d
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	212c      	movs	r1, #44	; 0x2c
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	4413      	add	r3, r2
 8001364:	3338      	adds	r3, #56	; 0x38
 8001366:	787a      	ldrb	r2, [r7, #1]
 8001368:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	212c      	movs	r1, #44	; 0x2c
 8001370:	fb01 f303 	mul.w	r3, r1, r3
 8001374:	4413      	add	r3, r2
 8001376:	3340      	adds	r3, #64	; 0x40
 8001378:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800137a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	3339      	adds	r3, #57	; 0x39
 800138a:	78fa      	ldrb	r2, [r7, #3]
 800138c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	212c      	movs	r1, #44	; 0x2c
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	4413      	add	r3, r2
 800139a:	333f      	adds	r3, #63	; 0x3f
 800139c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	78ba      	ldrb	r2, [r7, #2]
 80013a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013aa:	b2d0      	uxtb	r0, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	212c      	movs	r1, #44	; 0x2c
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	333a      	adds	r3, #58	; 0x3a
 80013b8:	4602      	mov	r2, r0
 80013ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80013bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da09      	bge.n	80013d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	212c      	movs	r1, #44	; 0x2c
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	333b      	adds	r3, #59	; 0x3b
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e008      	b.n	80013ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	212c      	movs	r1, #44	; 0x2c
 80013de:	fb01 f303 	mul.w	r3, r1, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	333b      	adds	r3, #59	; 0x3b
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	212c      	movs	r1, #44	; 0x2c
 80013f0:	fb01 f303 	mul.w	r3, r1, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	333c      	adds	r3, #60	; 0x3c
 80013f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	787c      	ldrb	r4, [r7, #1]
 8001404:	78ba      	ldrb	r2, [r7, #2]
 8001406:	78f9      	ldrb	r1, [r7, #3]
 8001408:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4623      	mov	r3, r4
 800141a:	f003 fbd9 	bl	8004bd0 <USB_HC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bd90      	pop	{r4, r7, pc}

08001434 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_HCD_HC_Halt+0x1e>
 800144e:	2302      	movs	r3, #2
 8001450:	e00f      	b.n	8001472 <HAL_HCD_HC_Halt+0x3e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fe29 	bl	80050ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4603      	mov	r3, r0
 800148c:	70fb      	strb	r3, [r7, #3]
 800148e:	460b      	mov	r3, r1
 8001490:	70bb      	strb	r3, [r7, #2]
 8001492:	4613      	mov	r3, r2
 8001494:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	333b      	adds	r3, #59	; 0x3b
 80014a4:	78ba      	ldrb	r2, [r7, #2]
 80014a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	212c      	movs	r1, #44	; 0x2c
 80014ae:	fb01 f303 	mul.w	r3, r1, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	333f      	adds	r3, #63	; 0x3f
 80014b6:	787a      	ldrb	r2, [r7, #1]
 80014b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80014ba:	7c3b      	ldrb	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d112      	bne.n	80014e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	3342      	adds	r3, #66	; 0x42
 80014ce:	2203      	movs	r2, #3
 80014d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	333d      	adds	r3, #61	; 0x3d
 80014e0:	7f3a      	ldrb	r2, [r7, #28]
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e008      	b.n	80014f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	212c      	movs	r1, #44	; 0x2c
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	3342      	adds	r3, #66	; 0x42
 80014f4:	2202      	movs	r2, #2
 80014f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	f200 80c6 	bhi.w	800168c <HAL_HCD_HC_SubmitRequest+0x210>
 8001500:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	08001519 	.word	0x08001519
 800150c:	08001679 	.word	0x08001679
 8001510:	0800157d 	.word	0x0800157d
 8001514:	080015fb 	.word	0x080015fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001518:	7c3b      	ldrb	r3, [r7, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 80b8 	bne.w	8001690 <HAL_HCD_HC_SubmitRequest+0x214>
 8001520:	78bb      	ldrb	r3, [r7, #2]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 80b4 	bne.w	8001690 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001528:	8b3b      	ldrh	r3, [r7, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3355      	adds	r3, #85	; 0x55
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3355      	adds	r3, #85	; 0x55
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d109      	bne.n	8001568 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	212c      	movs	r1, #44	; 0x2c
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	4413      	add	r3, r2
 8001560:	3342      	adds	r3, #66	; 0x42
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001566:	e093      	b.n	8001690 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	212c      	movs	r1, #44	; 0x2c
 800156e:	fb01 f303 	mul.w	r3, r1, r3
 8001572:	4413      	add	r3, r2
 8001574:	3342      	adds	r3, #66	; 0x42
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
      break;
 800157a:	e089      	b.n	8001690 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800157c:	78bb      	ldrb	r3, [r7, #2]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11d      	bne.n	80015be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	212c      	movs	r1, #44	; 0x2c
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	4413      	add	r3, r2
 800158e:	3355      	adds	r3, #85	; 0x55
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	212c      	movs	r1, #44	; 0x2c
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	3342      	adds	r3, #66	; 0x42
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80015a8:	e073      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	3342      	adds	r3, #66	; 0x42
 80015b8:	2202      	movs	r2, #2
 80015ba:	701a      	strb	r2, [r3, #0]
      break;
 80015bc:	e069      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	212c      	movs	r1, #44	; 0x2c
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	3354      	adds	r3, #84	; 0x54
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	212c      	movs	r1, #44	; 0x2c
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	3342      	adds	r3, #66	; 0x42
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
      break;
 80015e4:	e055      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	212c      	movs	r1, #44	; 0x2c
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	3342      	adds	r3, #66	; 0x42
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
      break;
 80015f8:	e04b      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80015fa:	78bb      	ldrb	r3, [r7, #2]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11d      	bne.n	800163c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	212c      	movs	r1, #44	; 0x2c
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	4413      	add	r3, r2
 800160c:	3355      	adds	r3, #85	; 0x55
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3342      	adds	r3, #66	; 0x42
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001626:	e034      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3342      	adds	r3, #66	; 0x42
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]
      break;
 800163a:	e02a      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3354      	adds	r3, #84	; 0x54
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	3342      	adds	r3, #66	; 0x42
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
      break;
 8001662:	e016      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3342      	adds	r3, #66	; 0x42
 8001672:	2202      	movs	r2, #2
 8001674:	701a      	strb	r2, [r3, #0]
      break;
 8001676:	e00c      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3342      	adds	r3, #66	; 0x42
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
      break;
 800168a:	e002      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800168c:	bf00      	nop
 800168e:	e000      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001690:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	3344      	adds	r3, #68	; 0x44
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	8b3a      	ldrh	r2, [r7, #24]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	202c      	movs	r0, #44	; 0x2c
 80016ac:	fb00 f303 	mul.w	r3, r0, r3
 80016b0:	440b      	add	r3, r1
 80016b2:	334c      	adds	r3, #76	; 0x4c
 80016b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	3360      	adds	r3, #96	; 0x60
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3350      	adds	r3, #80	; 0x50
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3339      	adds	r3, #57	; 0x39
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3361      	adds	r3, #97	; 0x61
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	222c      	movs	r2, #44	; 0x2c
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	3338      	adds	r3, #56	; 0x38
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	18d1      	adds	r1, r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	f003 fb7c 	bl	8004e14 <USB_HC_StartXfer>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop

08001728 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f003 f889 	bl	8004856 <USB_GetMode>
 8001744:	4603      	mov	r3, r0
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 80f6 	bne.w	8001938 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 f86d 	bl	8004830 <USB_ReadInterrupts>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80ec 	beq.w	8001936 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f003 f864 	bl	8004830 <USB_ReadInterrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001772:	d104      	bne.n	800177e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800177c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f854 	bl	8004830 <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001792:	d104      	bne.n	800179e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800179c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 f844 	bl	8004830 <USB_ReadInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017b2:	d104      	bne.n	80017be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 f834 	bl	8004830 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d103      	bne.n	80017da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2202      	movs	r2, #2
 80017d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 f826 	bl	8004830 <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ee:	d11c      	bne.n	800182a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800180a:	2110      	movs	r1, #16
 800180c:	6938      	ldr	r0, [r7, #16]
 800180e:	f002 ff15 	bl	800463c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001812:	6938      	ldr	r0, [r7, #16]
 8001814:	f002 ff46 	bl	80046a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2101      	movs	r1, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f003 f910 	bl	8004a44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f005 fee7 	bl	80075f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fffe 	bl	8004830 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800183a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183e:	d102      	bne.n	8001846 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f001 f89e 	bl	8002982 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fff0 	bl	8004830 <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b08      	cmp	r3, #8
 8001858:	d106      	bne.n	8001868 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f005 feb0 	bl	80075c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2208      	movs	r2, #8
 8001866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f002 ffdf 	bl	8004830 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b10      	cmp	r3, #16
 800187a:	d101      	bne.n	8001880 <HAL_HCD_IRQHandler+0x158>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_HCD_IRQHandler+0x15a>
 8001880:	2300      	movs	r3, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d012      	beq.n	80018ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0210 	bic.w	r2, r2, #16
 8001894:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 ffa1 	bl	80027de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 ffbd 	bl	8004830 <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018c0:	d13a      	bne.n	8001938 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fbe6 	bl	8005098 <USB_HC_ReadInterrupt>
 80018cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e025      	b.n	8001920 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d018      	beq.n	800191a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018fe:	d106      	bne.n	800190e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4619      	mov	r1, r3
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8ab 	bl	8001a62 <HCD_HC_IN_IRQHandler>
 800190c:	e005      	b.n	800191a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fbf9 	bl	800210c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3d4      	bcc.n	80018d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	e000      	b.n	8001938 <HAL_HCD_IRQHandler+0x210>
      return;
 8001936:	bf00      	nop
    }
  }
}
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_HCD_Start+0x16>
 8001950:	2302      	movs	r3, #2
 8001952:	e013      	b.n	800197c <HAL_HCD_Start+0x3e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f003 f8d2 	bl	8004b0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fdf6 	bl	800455e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_HCD_Stop+0x16>
 8001996:	2302      	movs	r3, #2
 8001998:	e00d      	b.n	80019b6 <HAL_HCD_Stop+0x32>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fcc0 	bl	800532c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 f874 	bl	8004ab8 <USB_ResetPort>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3360      	adds	r3, #96	; 0x60
 80019f4:	781b      	ldrb	r3, [r3, #0]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3350      	adds	r3, #80	; 0x50
 8001a1c:	681b      	ldr	r3, [r3, #0]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f8b8 	bl	8004bac <USB_GetCurrentFrame>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f893 	bl	8004b7e <USB_GetHostSpeed>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d11a      	bne.n	8001ac8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3361      	adds	r3, #97	; 0x61
 8001ab2:	2206      	movs	r2, #6
 8001ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fafa 	bl	80050ba <USB_HC_Halt>
 8001ac6:	e0af      	b.n	8001c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ade:	d11b      	bne.n	8001b18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	015a      	lsls	r2, r3, #5
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aec:	461a      	mov	r2, r3
 8001aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	3361      	adds	r3, #97	; 0x61
 8001b02:	2207      	movs	r2, #7
 8001b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fad2 	bl	80050ba <USB_HC_Halt>
 8001b16:	e087      	b.n	8001c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d109      	bne.n	8001b42 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2320      	movs	r3, #32
 8001b3e:	6093      	str	r3, [r2, #8]
 8001b40:	e072      	b.n	8001c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d11a      	bne.n	8001b8e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b64:	461a      	mov	r2, r3
 8001b66:	2308      	movs	r3, #8
 8001b68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3361      	adds	r3, #97	; 0x61
 8001b78:	2205      	movs	r2, #5
 8001b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fa97 	bl	80050ba <USB_HC_Halt>
 8001b8c:	e04c      	b.n	8001c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba4:	d11b      	bne.n	8001bde <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3361      	adds	r3, #97	; 0x61
 8001bc8:	2208      	movs	r2, #8
 8001bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fa6f 	bl	80050ba <USB_HC_Halt>
 8001bdc:	e024      	b.n	8001c28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d119      	bne.n	8001c28 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	461a      	mov	r2, r3
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3361      	adds	r3, #97	; 0x61
 8001c14:	2206      	movs	r2, #6
 8001c16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fa49 	bl	80050ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c3e:	d112      	bne.n	8001c66 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fa35 	bl	80050ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c62:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001c64:	e24e      	b.n	8002104 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f040 80df 	bne.w	8001e3c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3348      	adds	r3, #72	; 0x48
 8001c94:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	0159      	lsls	r1, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ca8:	1ad2      	subs	r2, r2, r3
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	202c      	movs	r0, #44	; 0x2c
 8001cb0:	fb00 f303 	mul.w	r3, r0, r3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3350      	adds	r3, #80	; 0x50
 8001cb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	212c      	movs	r1, #44	; 0x2c
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3361      	adds	r3, #97	; 0x61
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	335c      	adds	r3, #92	; 0x5c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	461a      	mov	r2, r3
 8001cec:	2301      	movs	r3, #1
 8001cee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	333f      	adds	r3, #63	; 0x3f
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	333f      	adds	r3, #63	; 0x3f
 8001d12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d111      	bne.n	8001d3c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 f9c9 	bl	80050ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	461a      	mov	r2, r3
 8001d36:	2310      	movs	r3, #16
 8001d38:	6093      	str	r3, [r2, #8]
 8001d3a:	e03a      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	333f      	adds	r3, #63	; 0x3f
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d009      	beq.n	8001d64 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	333f      	adds	r3, #63	; 0x3f
 8001d5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d126      	bne.n	8001db2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	0151      	lsls	r1, r2, #5
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	440a      	add	r2, r1
 8001d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	212c      	movs	r1, #44	; 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3360      	adds	r3, #96	; 0x60
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	202c      	movs	r0, #44	; 0x2c
 8001da0:	fb00 f303 	mul.w	r3, r0, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3360      	adds	r3, #96	; 0x60
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f005 fc31 	bl	8007614 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d12b      	bne.n	8001e12 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3348      	adds	r3, #72	; 0x48
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	202c      	movs	r0, #44	; 0x2c
 8001dd0:	fb00 f202 	mul.w	r2, r0, r2
 8001dd4:	440a      	add	r2, r1
 8001dd6:	3240      	adds	r2, #64	; 0x40
 8001dd8:	8812      	ldrh	r2, [r2, #0]
 8001dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 818e 	beq.w	8002104 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	212c      	movs	r1, #44	; 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	3354      	adds	r3, #84	; 0x54
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	f083 0301 	eor.w	r3, r3, #1
 8001dfc:	b2d8      	uxtb	r0, r3
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	212c      	movs	r1, #44	; 0x2c
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	3354      	adds	r3, #84	; 0x54
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	701a      	strb	r2, [r3, #0]
}
 8001e10:	e178      	b.n	8002104 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	212c      	movs	r1, #44	; 0x2c
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3354      	adds	r3, #84	; 0x54
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	f083 0301 	eor.w	r3, r3, #1
 8001e26:	b2d8      	uxtb	r0, r3
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3354      	adds	r3, #84	; 0x54
 8001e36:	4602      	mov	r2, r0
 8001e38:	701a      	strb	r2, [r3, #0]
}
 8001e3a:	e163      	b.n	8002104 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	f040 80f6 	bne.w	8002040 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3361      	adds	r3, #97	; 0x61
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d109      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3360      	adds	r3, #96	; 0x60
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e0c9      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3361      	adds	r3, #97	; 0x61
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d109      	bne.n	8001ea4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e0b5      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	3361      	adds	r3, #97	; 0x61
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b06      	cmp	r3, #6
 8001eb6:	d009      	beq.n	8001ecc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3361      	adds	r3, #97	; 0x61
 8001ec6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d150      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	335c      	adds	r3, #92	; 0x5c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	202c      	movs	r0, #44	; 0x2c
 8001ee4:	fb00 f303 	mul.w	r3, r0, r3
 8001ee8:	440b      	add	r3, r1
 8001eea:	335c      	adds	r3, #92	; 0x5c
 8001eec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	335c      	adds	r3, #92	; 0x5c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d912      	bls.n	8001f28 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	335c      	adds	r3, #92	; 0x5c
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3360      	adds	r3, #96	; 0x60
 8001f22:	2204      	movs	r2, #4
 8001f24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f26:	e073      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3360      	adds	r3, #96	; 0x60
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f50:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f58:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f6c:	e050      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3361      	adds	r3, #97	; 0x61
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d122      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	212c      	movs	r1, #44	; 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3360      	adds	r3, #96	; 0x60
 8001f90:	2202      	movs	r2, #2
 8001f92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001faa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e023      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3361      	adds	r3, #97	; 0x61
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b07      	cmp	r3, #7
 8001fda:	d119      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	335c      	adds	r3, #92	; 0x5c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	202c      	movs	r0, #44	; 0x2c
 8001ff4:	fb00 f303 	mul.w	r3, r0, r3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	335c      	adds	r3, #92	; 0x5c
 8001ffc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3360      	adds	r3, #96	; 0x60
 800200c:	2204      	movs	r2, #4
 800200e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	461a      	mov	r2, r3
 800201e:	2302      	movs	r3, #2
 8002020:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	b2d9      	uxtb	r1, r3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	202c      	movs	r0, #44	; 0x2c
 800202c:	fb00 f303 	mul.w	r3, r0, r3
 8002030:	4413      	add	r3, r2
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f005 faeb 	bl	8007614 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800203e:	e061      	b.n	8002104 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b10      	cmp	r3, #16
 8002054:	d156      	bne.n	8002104 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	333f      	adds	r3, #63	; 0x3f
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d111      	bne.n	800208e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	335c      	adds	r3, #92	; 0x5c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f003 f817 	bl	80050ba <USB_HC_Halt>
 800208c:	e031      	b.n	80020f2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	333f      	adds	r3, #63	; 0x3f
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	333f      	adds	r3, #63	; 0x3f
 80020b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d11d      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d110      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3361      	adds	r3, #97	; 0x61
 80020de:	2203      	movs	r2, #3
 80020e0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 ffe4 	bl	80050ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	2310      	movs	r3, #16
 8002102:	6093      	str	r3, [r2, #8]
}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11a      	bne.n	8002172 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2304      	movs	r3, #4
 800214c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3361      	adds	r3, #97	; 0x61
 800215c:	2206      	movs	r2, #6
 800215e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f002 ffa5 	bl	80050ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002170:	e331      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d12e      	bne.n	80021e6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	2320      	movs	r3, #32
 8002198:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	333d      	adds	r3, #61	; 0x3d
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 8313 	bne.w	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	333d      	adds	r3, #61	; 0x3d
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3360      	adds	r3, #96	; 0x60
 80021d0:	2202      	movs	r2, #2
 80021d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 ff6b 	bl	80050ba <USB_HC_Halt>
}
 80021e4:	e2f7      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d112      	bne.n	8002224 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002210:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f002 ff4c 	bl	80050ba <USB_HC_Halt>
}
 8002222:	e2d8      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d140      	bne.n	80022bc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	335c      	adds	r3, #92	; 0x5c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d111      	bne.n	8002286 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	333d      	adds	r3, #61	; 0x3d
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2301      	movs	r3, #1
 8002296:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3361      	adds	r3, #97	; 0x61
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 ff00 	bl	80050ba <USB_HC_Halt>
}
 80022ba:	e28c      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d12c      	bne.n	800232c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	2204      	movs	r2, #4
 80022e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	333d      	adds	r3, #61	; 0x3d
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	335c      	adds	r3, #92	; 0x5c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fed1 	bl	80050ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	6093      	str	r3, [r2, #8]
}
 800232a:	e254      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d11a      	bne.n	8002378 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	461a      	mov	r2, r3
 8002350:	2308      	movs	r3, #8
 8002352:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3361      	adds	r3, #97	; 0x61
 8002362:	2205      	movs	r2, #5
 8002364:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fea2 	bl	80050ba <USB_HC_Halt>
}
 8002376:	e22e      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b10      	cmp	r3, #16
 800238c:	d140      	bne.n	8002410 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3361      	adds	r3, #97	; 0x61
 80023ae:	2203      	movs	r2, #3
 80023b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	333d      	adds	r3, #61	; 0x3d
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d112      	bne.n	80023ec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333c      	adds	r3, #60	; 0x3c
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	333d      	adds	r3, #61	; 0x3d
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fe5f 	bl	80050ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	2310      	movs	r3, #16
 800240c:	6093      	str	r3, [r2, #8]
}
 800240e:	e1e2      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b80      	cmp	r3, #128	; 0x80
 8002424:	d164      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d111      	bne.n	8002452 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3361      	adds	r3, #97	; 0x61
 800243c:	2206      	movs	r2, #6
 800243e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f002 fe35 	bl	80050ba <USB_HC_Halt>
 8002450:	e044      	b.n	80024dc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	335c      	adds	r3, #92	; 0x5c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	202c      	movs	r0, #44	; 0x2c
 800246a:	fb00 f303 	mul.w	r3, r0, r3
 800246e:	440b      	add	r3, r1
 8002470:	335c      	adds	r3, #92	; 0x5c
 8002472:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	335c      	adds	r3, #92	; 0x5c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d920      	bls.n	80024ca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	335c      	adds	r3, #92	; 0x5c
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	b2d9      	uxtb	r1, r3
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	202c      	movs	r0, #44	; 0x2c
 80024b6:	fb00 f303 	mul.w	r3, r0, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3360      	adds	r3, #96	; 0x60
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f005 f8a6 	bl	8007614 <HAL_HCD_HC_NotifyURBChange_Callback>
 80024c8:	e008      	b.n	80024dc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3360      	adds	r3, #96	; 0x60
 80024d8:	2202      	movs	r2, #2
 80024da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	6093      	str	r3, [r2, #8]
}
 80024ee:	e172      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d11b      	bne.n	8002540 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	2208      	movs	r2, #8
 8002518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f002 fdc8 	bl	80050ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800253c:	6093      	str	r3, [r2, #8]
}
 800253e:	e14a      	b.n	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b02      	cmp	r3, #2
 8002554:	f040 813f 	bne.w	80027d6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3361      	adds	r3, #97	; 0x61
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d17d      	bne.n	8002668 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	333f      	adds	r3, #63	; 0x3f
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d00a      	beq.n	80025a8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	333f      	adds	r3, #63	; 0x3f
 80025a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	f040 8100 	bne.w	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d113      	bne.n	80025d8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3355      	adds	r3, #85	; 0x55
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f083 0301 	eor.w	r3, r3, #1
 80025c4:	b2d8      	uxtb	r0, r3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3355      	adds	r3, #85	; 0x55
 80025d4:	4602      	mov	r2, r0
 80025d6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f040 80e3 	bne.w	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	334c      	adds	r3, #76	; 0x4c
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80d8 	beq.w	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	334c      	adds	r3, #76	; 0x4c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	202c      	movs	r0, #44	; 0x2c
 800260e:	fb00 f202 	mul.w	r2, r0, r2
 8002612:	440a      	add	r2, r1
 8002614:	3240      	adds	r2, #64	; 0x40
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	4413      	add	r3, r2
 800261a:	3b01      	subs	r3, #1
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	202c      	movs	r0, #44	; 0x2c
 8002622:	fb00 f202 	mul.w	r2, r0, r2
 8002626:	440a      	add	r2, r1
 8002628:	3240      	adds	r2, #64	; 0x40
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80b5 	beq.w	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3355      	adds	r3, #85	; 0x55
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2d8      	uxtb	r0, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3355      	adds	r3, #85	; 0x55
 8002662:	4602      	mov	r2, r0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e09f      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3361      	adds	r3, #97	; 0x61
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d109      	bne.n	8002690 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3360      	adds	r3, #96	; 0x60
 800268a:	2202      	movs	r2, #2
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e08b      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d109      	bne.n	80026b8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3360      	adds	r3, #96	; 0x60
 80026b2:	2202      	movs	r2, #2
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e077      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d109      	bne.n	80026e0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3360      	adds	r3, #96	; 0x60
 80026da:	2205      	movs	r2, #5
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e063      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3361      	adds	r3, #97	; 0x61
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d009      	beq.n	8002708 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3361      	adds	r3, #97	; 0x61
 8002702:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002704:	2b08      	cmp	r3, #8
 8002706:	d14f      	bne.n	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	335c      	adds	r3, #92	; 0x5c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	202c      	movs	r0, #44	; 0x2c
 8002720:	fb00 f303 	mul.w	r3, r0, r3
 8002724:	440b      	add	r3, r1
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d912      	bls.n	8002764 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	335c      	adds	r3, #92	; 0x5c
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3360      	adds	r3, #96	; 0x60
 800275e:	2204      	movs	r2, #4
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e021      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3360      	adds	r3, #96	; 0x60
 8002772:	2202      	movs	r2, #2
 8002774:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800278c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002794:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	461a      	mov	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2302      	movs	r3, #2
 80027b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	b2d9      	uxtb	r1, r3
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	202c      	movs	r0, #44	; 0x2c
 80027c4:	fb00 f303 	mul.w	r3, r0, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f004 ff1f 	bl	8007614 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027d6:	bf00      	nop
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b08a      	sub	sp, #40	; 0x28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	0c5b      	lsrs	r3, r3, #17
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002812:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d004      	beq.n	8002824 <HCD_RXQLVL_IRQHandler+0x46>
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b05      	cmp	r3, #5
 800281e:	f000 80a9 	beq.w	8002974 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002822:	e0aa      	b.n	800297a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80a6 	beq.w	8002978 <HCD_RXQLVL_IRQHandler+0x19a>
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3344      	adds	r3, #68	; 0x44
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 809b 	beq.w	8002978 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3350      	adds	r3, #80	; 0x50
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	441a      	add	r2, r3
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	202c      	movs	r0, #44	; 0x2c
 800285c:	fb00 f303 	mul.w	r3, r0, r3
 8002860:	440b      	add	r3, r1
 8002862:	334c      	adds	r3, #76	; 0x4c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d87a      	bhi.n	8002960 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3344      	adds	r3, #68	; 0x44
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	b292      	uxth	r2, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f001 ff7c 	bl	8004780 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3344      	adds	r3, #68	; 0x44
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	441a      	add	r2, r3
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	202c      	movs	r0, #44	; 0x2c
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	440b      	add	r3, r1
 80028a8:	3344      	adds	r3, #68	; 0x44
 80028aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3350      	adds	r3, #80	; 0x50
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	441a      	add	r2, r3
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	202c      	movs	r0, #44	; 0x2c
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	440b      	add	r3, r1
 80028cc:	3350      	adds	r3, #80	; 0x50
 80028ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	0cdb      	lsrs	r3, r3, #19
 80028e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3340      	adds	r3, #64	; 0x40
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d13c      	bne.n	8002978 <HCD_RXQLVL_IRQHandler+0x19a>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d039      	beq.n	8002978 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800291a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002922:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3354      	adds	r3, #84	; 0x54
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	f083 0301 	eor.w	r3, r3, #1
 800294a:	b2d8      	uxtb	r0, r3
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3354      	adds	r3, #84	; 0x54
 800295a:	4602      	mov	r2, r0
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e00b      	b.n	8002978 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	2204      	movs	r2, #4
 8002970:	701a      	strb	r2, [r3, #0]
      break;
 8002972:	e001      	b.n	8002978 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002978:	bf00      	nop
  }
}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d10b      	bne.n	80029d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d102      	bne.n	80029ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f004 fe09 	bl	80075dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d132      	bne.n	8002a42 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f043 0308 	orr.w	r3, r3, #8
 80029e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d126      	bne.n	8002a3c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d113      	bne.n	8002a1e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80029fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a00:	d106      	bne.n	8002a10 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 f81b 	bl	8004a44 <USB_InitFSLSPClkSel>
 8002a0e:	e011      	b.n	8002a34 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 f814 	bl	8004a44 <USB_InitFSLSPClkSel>
 8002a1c:	e00a      	b.n	8002a34 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d106      	bne.n	8002a34 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a32:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f004 fdfb 	bl	8007630 <HAL_HCD_PortEnabled_Callback>
 8002a3a:	e002      	b.n	8002a42 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f004 fe05 	bl	800764c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d103      	bne.n	8002a54 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f043 0320 	orr.w	r3, r3, #32
 8002a52:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e12b      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fd fdfc 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002acc:	f000 fa02 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4a81      	ldr	r2, [pc, #516]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d807      	bhi.n	8002aec <HAL_I2C_Init+0x84>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_I2C_Init+0x278>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	bf94      	ite	ls
 8002ae4:	2301      	movls	r3, #1
 8002ae6:	2300      	movhi	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e006      	b.n	8002afa <HAL_I2C_Init+0x92>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a7d      	ldr	r2, [pc, #500]	; (8002ce4 <HAL_I2C_Init+0x27c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0e7      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a78      	ldr	r2, [pc, #480]	; (8002ce8 <HAL_I2C_Init+0x280>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
 8002b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d802      	bhi.n	8002b3c <HAL_I2C_Init+0xd4>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	e009      	b.n	8002b50 <HAL_I2C_Init+0xe8>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	4a69      	ldr	r2, [pc, #420]	; (8002cec <HAL_I2C_Init+0x284>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	3301      	adds	r3, #1
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	495c      	ldr	r1, [pc, #368]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	d819      	bhi.n	8002ba4 <HAL_I2C_Init+0x13c>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e59      	subs	r1, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b84:	400b      	ands	r3, r1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_I2C_Init+0x138>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e59      	subs	r1, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	e051      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	e04f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d111      	bne.n	8002bd0 <HAL_I2C_Init+0x168>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e58      	subs	r0, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e012      	b.n	8002bf6 <HAL_I2C_Init+0x18e>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e58      	subs	r0, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	0099      	lsls	r1, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x196>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e022      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10e      	bne.n	8002c24 <HAL_I2C_Init+0x1bc>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e58      	subs	r0, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	440b      	add	r3, r1
 8002c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c22:	e00f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	0099      	lsls	r1, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6809      	ldr	r1, [r1, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6911      	ldr	r1, [r2, #16]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	000186a0 	.word	0x000186a0
 8002ce0:	001e847f 	.word	0x001e847f
 8002ce4:	003d08ff 	.word	0x003d08ff
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cc      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d90c      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	494d      	ldr	r1, [pc, #308]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d044      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d119      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e067      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4934      	ldr	r1, [pc, #208]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7fd ff48 	bl	8000c74 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fd ff44 	bl	8000c74 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20c      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e032      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4916      	ldr	r1, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e76:	f000 fb7f 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fea8 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08007cb8 	.word	0x08007cb8
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed8:	f7ff fff0 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0a9b      	lsrs	r3, r3, #10
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4903      	ldr	r1, [pc, #12]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08007cc8 	.word	0x08007cc8

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f00:	f7ff ffdc 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0b5b      	lsrs	r3, r3, #13
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08007cc8 	.word	0x08007cc8

08002f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	; 0x30
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f62:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	496c      	ldr	r1, [pc, #432]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002f8a:	4b64      	ldr	r3, [pc, #400]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	4960      	ldr	r1, [pc, #384]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d017      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb8:	4b58      	ldr	r3, [pc, #352]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4955      	ldr	r1, [pc, #340]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d017      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ff4:	4b49      	ldr	r3, [pc, #292]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	4946      	ldr	r1, [pc, #280]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003012:	d101      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003014:	2301      	movs	r3, #1
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003020:	2301      	movs	r3, #1
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 808a 	beq.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a38      	ldr	r2, [pc, #224]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800304e:	4b34      	ldr	r3, [pc, #208]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a33      	ldr	r2, [pc, #204]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800305a:	f7fd fe0b 	bl	8000c74 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fd fe07 	bl	8000c74 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e278      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02f      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	429a      	cmp	r2, r3
 800309c:	d028      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d114      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fdd5 	bl	8000c74 <HAL_GetTick>
 80030ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fd fdd1 	bl	8000c74 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e240      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ee      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030fc:	d114      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800310e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003112:	4902      	ldr	r1, [pc, #8]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]
 8003118:	e00c      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	42470e40 	.word	0x42470e40
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a49      	ldr	r2, [pc, #292]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800312e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003132:	6093      	str	r3, [r2, #8]
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	4944      	ldr	r1, [pc, #272]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003142:	4313      	orrs	r3, r2
 8003144:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800315a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003168:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	4937      	ldr	r1, [pc, #220]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800318a:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800318c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003190:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	492e      	ldr	r1, [pc, #184]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d011      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	4926      	ldr	r1, [pc, #152]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ca:	d101      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80031cc:	2301      	movs	r3, #1
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80031dc:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	491a      	ldr	r1, [pc, #104]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d011      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003204:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320c:	4911      	ldr	r1, [pc, #68]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800321e:	2301      	movs	r3, #1
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d005      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003230:	f040 80ff 	bne.w	8003432 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800323a:	f7fd fd1b 	bl	8000c74 <HAL_GetTick>
 800323e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003240:	e00e      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003242:	f7fd fd17 	bl	8000c74 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d907      	bls.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e188      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003254:	40023800 	.word	0x40023800
 8003258:	424711e0 	.word	0x424711e0
 800325c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003260:	4b7e      	ldr	r3, [pc, #504]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1ea      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003288:	2b00      	cmp	r3, #0
 800328a:	d028      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d124      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003294:	4b71      	ldr	r3, [pc, #452]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	3301      	adds	r3, #1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032a6:	4b6d      	ldr	r3, [pc, #436]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	0e1b      	lsrs	r3, r3, #24
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	431a      	orrs	r2, r3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	3b01      	subs	r3, #1
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	431a      	orrs	r2, r3
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	071b      	lsls	r3, r3, #28
 80032d6:	4961      	ldr	r1, [pc, #388]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d035      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003308:	d130      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800330a:	4b54      	ldr	r3, [pc, #336]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800330c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	3301      	adds	r3, #1
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003322:	0f1b      	lsrs	r3, r3, #28
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	019b      	lsls	r3, r3, #6
 8003334:	431a      	orrs	r2, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	3b01      	subs	r3, #1
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	431a      	orrs	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	071b      	lsls	r3, r3, #28
 800334c:	4943      	ldr	r1, [pc, #268]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800335a:	f023 021f 	bic.w	r2, r3, #31
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	3b01      	subs	r3, #1
 8003364:	493d      	ldr	r1, [pc, #244]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d029      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003380:	d124      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003382:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339a:	0f1b      	lsrs	r3, r3, #28
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	019b      	lsls	r3, r3, #6
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	431a      	orrs	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	071b      	lsls	r3, r3, #28
 80033c4:	4925      	ldr	r1, [pc, #148]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	4917      	ldr	r1, [pc, #92]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800340c:	f7fd fc32 	bl	8000c74 <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003414:	f7fd fc2e 	bl	8000c74 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e09f      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 8095 	bne.w	8003564 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003440:	f7fd fc18 	bl	8000c74 <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003446:	e00f      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003448:	f7fd fc14 	bl	8000c74 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d908      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e085      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	42470068 	.word	0x42470068
 8003464:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003468:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003474:	d0e8      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003492:	2b00      	cmp	r3, #0
 8003494:	d02b      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	d127      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	3b01      	subs	r3, #1
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	4928      	ldr	r1, [pc, #160]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034d4:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	3b01      	subs	r3, #1
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	4922      	ldr	r1, [pc, #136]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01d      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003502:	d118      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	0e1b      	lsrs	r3, r3, #24
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	4910      	ldr	r1, [pc, #64]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800353c:	f7fd fb9a 	bl	8000c74 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003544:	f7fd fb96 	bl	8000c74 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e007      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800355e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003562:	d1ef      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3730      	adds	r7, #48	; 0x30
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	42470070 	.word	0x42470070

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800357c:	b0a6      	sub	sp, #152	; 0x98
 800357e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359e:	4bc8      	ldr	r3, [pc, #800]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	f200 817e 	bhi.w	80038a8 <HAL_RCC_GetSysClockFreq+0x330>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035e9 	.word	0x080035e9
 80035b8:	080038a9 	.word	0x080038a9
 80035bc:	080038a9 	.word	0x080038a9
 80035c0:	080038a9 	.word	0x080038a9
 80035c4:	080035f1 	.word	0x080035f1
 80035c8:	080038a9 	.word	0x080038a9
 80035cc:	080038a9 	.word	0x080038a9
 80035d0:	080038a9 	.word	0x080038a9
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	080038a9 	.word	0x080038a9
 80035dc:	080038a9 	.word	0x080038a9
 80035e0:	080038a9 	.word	0x080038a9
 80035e4:	08003763 	.word	0x08003763
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4bb6      	ldr	r3, [pc, #728]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80035ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80035ee:	e15f      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f0:	4bb5      	ldr	r3, [pc, #724]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x350>)
 80035f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80035f6:	e15b      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f8:	4bb1      	ldr	r3, [pc, #708]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003604:	4bae      	ldr	r3, [pc, #696]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d031      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003610:	4bab      	ldr	r3, [pc, #684]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	2200      	movs	r2, #0
 8003618:	66bb      	str	r3, [r7, #104]	; 0x68
 800361a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800361c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003622:	663b      	str	r3, [r7, #96]	; 0x60
 8003624:	2300      	movs	r3, #0
 8003626:	667b      	str	r3, [r7, #100]	; 0x64
 8003628:	4ba7      	ldr	r3, [pc, #668]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800362a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800362e:	462a      	mov	r2, r5
 8003630:	fb03 f202 	mul.w	r2, r3, r2
 8003634:	2300      	movs	r3, #0
 8003636:	4621      	mov	r1, r4
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	4aa2      	ldr	r2, [pc, #648]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003640:	4621      	mov	r1, r4
 8003642:	fba1 1202 	umull	r1, r2, r1, r2
 8003646:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003648:	460a      	mov	r2, r1
 800364a:	67ba      	str	r2, [r7, #120]	; 0x78
 800364c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800364e:	4413      	add	r3, r2
 8003650:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003656:	2200      	movs	r2, #0
 8003658:	65bb      	str	r3, [r7, #88]	; 0x58
 800365a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800365c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003660:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003664:	f7fc fdce 	bl	8000204 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4613      	mov	r3, r2
 800366e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003672:	e064      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003674:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	2200      	movs	r2, #0
 800367c:	653b      	str	r3, [r7, #80]	; 0x50
 800367e:	657a      	str	r2, [r7, #84]	; 0x54
 8003680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
 8003688:	2300      	movs	r3, #0
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003690:	4622      	mov	r2, r4
 8003692:	462b      	mov	r3, r5
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	0159      	lsls	r1, r3, #5
 800369e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a2:	0150      	lsls	r0, r2, #5
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4621      	mov	r1, r4
 80036aa:	1a51      	subs	r1, r2, r1
 80036ac:	6139      	str	r1, [r7, #16]
 80036ae:	4629      	mov	r1, r5
 80036b0:	eb63 0301 	sbc.w	r3, r3, r1
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c2:	4659      	mov	r1, fp
 80036c4:	018b      	lsls	r3, r1, #6
 80036c6:	4651      	mov	r1, sl
 80036c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036cc:	4651      	mov	r1, sl
 80036ce:	018a      	lsls	r2, r1, #6
 80036d0:	4651      	mov	r1, sl
 80036d2:	ebb2 0801 	subs.w	r8, r2, r1
 80036d6:	4659      	mov	r1, fp
 80036d8:	eb63 0901 	sbc.w	r9, r3, r1
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f0:	4690      	mov	r8, r2
 80036f2:	4699      	mov	r9, r3
 80036f4:	4623      	mov	r3, r4
 80036f6:	eb18 0303 	adds.w	r3, r8, r3
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	462b      	mov	r3, r5
 80036fe:	eb49 0303 	adc.w	r3, r9, r3
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003710:	4629      	mov	r1, r5
 8003712:	028b      	lsls	r3, r1, #10
 8003714:	4621      	mov	r1, r4
 8003716:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800371a:	4621      	mov	r1, r4
 800371c:	028a      	lsls	r2, r1, #10
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003726:	2200      	movs	r2, #0
 8003728:	643b      	str	r3, [r7, #64]	; 0x40
 800372a:	647a      	str	r2, [r7, #68]	; 0x44
 800372c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003730:	f7fc fd68 	bl	8000204 <__aeabi_uldivmod>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4613      	mov	r3, r2
 800373a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800373e:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	3301      	adds	r3, #1
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003750:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003760:	e0a6      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003762:	4b57      	ldr	r3, [pc, #348]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d02a      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	2200      	movs	r2, #0
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
 8003784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800378c:	2100      	movs	r1, #0
 800378e:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003790:	fb03 f201 	mul.w	r2, r3, r1
 8003794:	2300      	movs	r3, #0
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	4413      	add	r3, r2
 800379c:	4a4a      	ldr	r2, [pc, #296]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800379e:	fba0 1202 	umull	r1, r2, r0, r2
 80037a2:	677a      	str	r2, [r7, #116]	; 0x74
 80037a4:	460a      	mov	r2, r1
 80037a6:	673a      	str	r2, [r7, #112]	; 0x70
 80037a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037aa:	4413      	add	r3, r2
 80037ac:	677b      	str	r3, [r7, #116]	; 0x74
 80037ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b2:	2200      	movs	r2, #0
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
 80037b6:	637a      	str	r2, [r7, #52]	; 0x34
 80037b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80037c0:	f7fc fd20 	bl	8000204 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037ce:	e05b      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d0:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	099b      	lsrs	r3, r3, #6
 80037d6:	2200      	movs	r2, #0
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
 80037e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037ec:	4642      	mov	r2, r8
 80037ee:	464b      	mov	r3, r9
 80037f0:	f04f 0000 	mov.w	r0, #0
 80037f4:	f04f 0100 	mov.w	r1, #0
 80037f8:	0159      	lsls	r1, r3, #5
 80037fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fe:	0150      	lsls	r0, r2, #5
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4641      	mov	r1, r8
 8003806:	ebb2 0a01 	subs.w	sl, r2, r1
 800380a:	4649      	mov	r1, r9
 800380c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800381c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003824:	ebb2 040a 	subs.w	r4, r2, sl
 8003828:	eb63 050b 	sbc.w	r5, r3, fp
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	00eb      	lsls	r3, r5, #3
 8003836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383a:	00e2      	lsls	r2, r4, #3
 800383c:	4614      	mov	r4, r2
 800383e:	461d      	mov	r5, r3
 8003840:	4643      	mov	r3, r8
 8003842:	18e3      	adds	r3, r4, r3
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	464b      	mov	r3, r9
 8003848:	eb45 0303 	adc.w	r3, r5, r3
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800385a:	4629      	mov	r1, r5
 800385c:	028b      	lsls	r3, r1, #10
 800385e:	4621      	mov	r1, r4
 8003860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003864:	4621      	mov	r1, r4
 8003866:	028a      	lsls	r2, r1, #10
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003870:	2200      	movs	r2, #0
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	61fa      	str	r2, [r7, #28]
 8003876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387a:	f7fc fcc3 	bl	8000204 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4613      	mov	r3, r2
 8003884:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	0f1b      	lsrs	r3, r3, #28
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800389a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80038a6:	e003      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80038aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80038ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3798      	adds	r7, #152	; 0x98
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	017d7840 	.word	0x017d7840

080038cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e28d      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8083 	beq.w	80039f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038ec:	4b94      	ldr	r3, [pc, #592]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d019      	beq.n	800392c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f8:	4b91      	ldr	r3, [pc, #580]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003900:	2b08      	cmp	r3, #8
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003904:	4b8e      	ldr	r3, [pc, #568]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003910:	d00c      	beq.n	800392c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d112      	bne.n	8003944 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392a:	d10b      	bne.n	8003944 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d05b      	beq.n	80039f0 <HAL_RCC_OscConfig+0x124>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d157      	bne.n	80039f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e25a      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d106      	bne.n	800395c <HAL_RCC_OscConfig+0x90>
 800394e:	4b7c      	ldr	r3, [pc, #496]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7b      	ldr	r2, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e01d      	b.n	8003998 <HAL_RCC_OscConfig+0xcc>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0xb4>
 8003966:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a75      	ldr	r2, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 800396c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b73      	ldr	r3, [pc, #460]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a72      	ldr	r2, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0xcc>
 8003980:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a6e      	ldr	r2, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6b      	ldr	r2, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd f968 	bl	8000c74 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd f964 	bl	8000c74 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e21f      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0xdc>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd f954 	bl	8000c74 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fd f950 	bl	8000c74 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e20b      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e2:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x104>
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d06f      	beq.n	8003ade <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039fe:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a0a:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a16:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x186>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1d3      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4937      	ldr	r1, [pc, #220]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCC_OscConfig+0x278>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd f8fd 	bl	8000c74 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fd f8f9 	bl	8000c74 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e1b4      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4925      	ldr	r1, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x278>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd f8dc 	bl	8000c74 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fd f8d8 	bl	8000c74 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e193      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d036      	beq.n	8003b58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd f8bc 	bl	8000c74 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd f8b8 	bl	8000c74 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e173      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x234>
 8003b1e:	e01b      	b.n	8003b58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fd f8a5 	bl	8000c74 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e00e      	b.n	8003b4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fd f8a1 	bl	8000c74 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d907      	bls.n	8003b4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e15c      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ea      	bne.n	8003b2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a7e      	ldr	r2, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b79      	ldr	r3, [pc, #484]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fd f861 	bl	8000c74 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd f85d 	bl	8000c74 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e118      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6c      	ldr	r3, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x4b0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x31e>
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e01c      	b.n	8003c24 <HAL_RCC_OscConfig+0x358>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x340>
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a60      	ldr	r2, [pc, #384]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x358>
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a59      	ldr	r2, [pc, #356]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a56      	ldr	r2, [pc, #344]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd f822 	bl	8000c74 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd f81e 	bl	8000c74 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0d7      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ee      	beq.n	8003c34 <HAL_RCC_OscConfig+0x368>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd f80c 	bl	8000c74 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fd f808 	bl	8000c74 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0c1      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ee      	bne.n	8003c60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80ad 	beq.w	8003df8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d060      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d145      	bne.n	8003d3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x4b4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fc ffdc 	bl	8000c74 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fc ffd8 	bl	8000c74 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e093      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4b4>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fc ffad 	bl	8000c74 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fc ffa9 	bl	8000c74 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e064      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x452>
 8003d3c:	e05c      	b.n	8003df8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x4b4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fc ff96 	bl	8000c74 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fc ff92 	bl	8000c74 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e04d      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x4ac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x480>
 8003d6a:	e045      	b.n	8003df8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e040      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_RCC_OscConfig+0x538>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d030      	beq.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d129      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d122      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d119      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d10f      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800

08003e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e07b      	b.n	8003f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d108      	bne.n	8003e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e2a:	d009      	beq.n	8003e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61da      	str	r2, [r3, #28]
 8003e32:	e005      	b.n	8003e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc fd1c 	bl	8000898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	f003 0104 	and.w	r1, r3, #4
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	f003 0210 	and.w	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e03f      	b.n	8003fac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fc fdbf 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2224      	movs	r2, #36	; 0x24
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f828 	bl	8003fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb8:	b0c0      	sub	sp, #256	; 0x100
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	68d9      	ldr	r1, [r3, #12]
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	ea40 0301 	orr.w	r3, r0, r1
 8003fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800400c:	f021 010c 	bic.w	r1, r1, #12
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800401a:	430b      	orrs	r3, r1
 800401c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402e:	6999      	ldr	r1, [r3, #24]
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	ea40 0301 	orr.w	r3, r0, r1
 800403a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b8f      	ldr	r3, [pc, #572]	; (8004280 <UART_SetConfig+0x2cc>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d005      	beq.n	8004054 <UART_SetConfig+0xa0>
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <UART_SetConfig+0x2d0>)
 8004050:	429a      	cmp	r2, r3
 8004052:	d104      	bne.n	800405e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004054:	f7fe ff52 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8004058:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800405c:	e003      	b.n	8004066 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800405e:	f7fe ff39 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8004062:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004070:	f040 810c 	bne.w	800428c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800407e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004082:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	1891      	adds	r1, r2, r2
 800408c:	65b9      	str	r1, [r7, #88]	; 0x58
 800408e:	415b      	adcs	r3, r3
 8004090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004096:	4621      	mov	r1, r4
 8004098:	eb12 0801 	adds.w	r8, r2, r1
 800409c:	4629      	mov	r1, r5
 800409e:	eb43 0901 	adc.w	r9, r3, r1
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b6:	4690      	mov	r8, r2
 80040b8:	4699      	mov	r9, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	eb18 0303 	adds.w	r3, r8, r3
 80040c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040c4:	462b      	mov	r3, r5
 80040c6:	eb49 0303 	adc.w	r3, r9, r3
 80040ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040e2:	460b      	mov	r3, r1
 80040e4:	18db      	adds	r3, r3, r3
 80040e6:	653b      	str	r3, [r7, #80]	; 0x50
 80040e8:	4613      	mov	r3, r2
 80040ea:	eb42 0303 	adc.w	r3, r2, r3
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
 80040f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040f8:	f7fc f884 	bl	8000204 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <UART_SetConfig+0x2d4>)
 8004102:	fba3 2302 	umull	r2, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	011c      	lsls	r4, r3, #4
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004114:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004118:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	1891      	adds	r1, r2, r2
 8004122:	64b9      	str	r1, [r7, #72]	; 0x48
 8004124:	415b      	adcs	r3, r3
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800412c:	4641      	mov	r1, r8
 800412e:	eb12 0a01 	adds.w	sl, r2, r1
 8004132:	4649      	mov	r1, r9
 8004134:	eb43 0b01 	adc.w	fp, r3, r1
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004144:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414c:	4692      	mov	sl, r2
 800414e:	469b      	mov	fp, r3
 8004150:	4643      	mov	r3, r8
 8004152:	eb1a 0303 	adds.w	r3, sl, r3
 8004156:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800415a:	464b      	mov	r3, r9
 800415c:	eb4b 0303 	adc.w	r3, fp, r3
 8004160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004170:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004174:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004178:	460b      	mov	r3, r1
 800417a:	18db      	adds	r3, r3, r3
 800417c:	643b      	str	r3, [r7, #64]	; 0x40
 800417e:	4613      	mov	r3, r2
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
 8004186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800418a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800418e:	f7fc f839 	bl	8000204 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4611      	mov	r1, r2
 8004198:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <UART_SetConfig+0x2d4>)
 800419a:	fba3 2301 	umull	r2, r3, r3, r1
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	1acb      	subs	r3, r1, r3
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <UART_SetConfig+0x2d4>)
 80041b0:	fba3 2302 	umull	r2, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041bc:	441c      	add	r4, r3
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041d8:	415b      	adcs	r3, r3
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6339      	str	r1, [r7, #48]	; 0x30
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800422c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004234:	460b      	mov	r3, r1
 8004236:	18db      	adds	r3, r3, r3
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
 800423a:	4613      	mov	r3, r2
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004246:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800424a:	f7fb ffdb 	bl	8000204 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <UART_SetConfig+0x2d4>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a08      	ldr	r2, [pc, #32]	; (8004288 <UART_SetConfig+0x2d4>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 0207 	and.w	r2, r3, #7
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4422      	add	r2, r4
 800427a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800427c:	e106      	b.n	800448c <UART_SetConfig+0x4d8>
 800427e:	bf00      	nop
 8004280:	40011000 	.word	0x40011000
 8004284:	40011400 	.word	0x40011400
 8004288:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800428c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004296:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800429a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800429e:	4642      	mov	r2, r8
 80042a0:	464b      	mov	r3, r9
 80042a2:	1891      	adds	r1, r2, r2
 80042a4:	6239      	str	r1, [r7, #32]
 80042a6:	415b      	adcs	r3, r3
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ae:	4641      	mov	r1, r8
 80042b0:	1854      	adds	r4, r2, r1
 80042b2:	4649      	mov	r1, r9
 80042b4:	eb43 0501 	adc.w	r5, r3, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	00eb      	lsls	r3, r5, #3
 80042c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c6:	00e2      	lsls	r2, r4, #3
 80042c8:	4614      	mov	r4, r2
 80042ca:	461d      	mov	r5, r3
 80042cc:	4643      	mov	r3, r8
 80042ce:	18e3      	adds	r3, r4, r3
 80042d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d4:	464b      	mov	r3, r9
 80042d6:	eb45 0303 	adc.w	r3, r5, r3
 80042da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042fa:	4629      	mov	r1, r5
 80042fc:	008b      	lsls	r3, r1, #2
 80042fe:	4621      	mov	r1, r4
 8004300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004304:	4621      	mov	r1, r4
 8004306:	008a      	lsls	r2, r1, #2
 8004308:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800430c:	f7fb ff7a 	bl	8000204 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4b60      	ldr	r3, [pc, #384]	; (8004498 <UART_SetConfig+0x4e4>)
 8004316:	fba3 2302 	umull	r2, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	011c      	lsls	r4, r3, #4
 800431e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004328:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800432c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	1891      	adds	r1, r2, r2
 8004336:	61b9      	str	r1, [r7, #24]
 8004338:	415b      	adcs	r3, r3
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004340:	4641      	mov	r1, r8
 8004342:	1851      	adds	r1, r2, r1
 8004344:	6139      	str	r1, [r7, #16]
 8004346:	4649      	mov	r1, r9
 8004348:	414b      	adcs	r3, r1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004358:	4659      	mov	r1, fp
 800435a:	00cb      	lsls	r3, r1, #3
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004362:	4651      	mov	r1, sl
 8004364:	00ca      	lsls	r2, r1, #3
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	4603      	mov	r3, r0
 800436c:	4642      	mov	r2, r8
 800436e:	189b      	adds	r3, r3, r2
 8004370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004374:	464b      	mov	r3, r9
 8004376:	460a      	mov	r2, r1
 8004378:	eb42 0303 	adc.w	r3, r2, r3
 800437c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	67bb      	str	r3, [r7, #120]	; 0x78
 800438a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004398:	4649      	mov	r1, r9
 800439a:	008b      	lsls	r3, r1, #2
 800439c:	4641      	mov	r1, r8
 800439e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a2:	4641      	mov	r1, r8
 80043a4:	008a      	lsls	r2, r1, #2
 80043a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043aa:	f7fb ff2b 	bl	8000204 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <UART_SetConfig+0x4e4>)
 80043b6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2264      	movs	r2, #100	; 0x64
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	3332      	adds	r3, #50	; 0x32
 80043c8:	4a33      	ldr	r2, [pc, #204]	; (8004498 <UART_SetConfig+0x4e4>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d4:	441c      	add	r4, r3
 80043d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043da:	2200      	movs	r2, #0
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
 80043de:	677a      	str	r2, [r7, #116]	; 0x74
 80043e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	1891      	adds	r1, r2, r2
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	415b      	adcs	r3, r3
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f4:	4641      	mov	r1, r8
 80043f6:	1851      	adds	r1, r2, r1
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	4649      	mov	r1, r9
 80043fc:	414b      	adcs	r3, r1
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800440c:	4659      	mov	r1, fp
 800440e:	00cb      	lsls	r3, r1, #3
 8004410:	4651      	mov	r1, sl
 8004412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004416:	4651      	mov	r1, sl
 8004418:	00ca      	lsls	r2, r1, #3
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	4603      	mov	r3, r0
 8004420:	4642      	mov	r2, r8
 8004422:	189b      	adds	r3, r3, r2
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68
 8004426:	464b      	mov	r3, r9
 8004428:	460a      	mov	r2, r1
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	663b      	str	r3, [r7, #96]	; 0x60
 800443a:	667a      	str	r2, [r7, #100]	; 0x64
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004448:	4649      	mov	r1, r9
 800444a:	008b      	lsls	r3, r1, #2
 800444c:	4641      	mov	r1, r8
 800444e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004452:	4641      	mov	r1, r8
 8004454:	008a      	lsls	r2, r1, #2
 8004456:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800445a:	f7fb fed3 	bl	8000204 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <UART_SetConfig+0x4e4>)
 8004464:	fba3 1302 	umull	r1, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2164      	movs	r1, #100	; 0x64
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <UART_SetConfig+0x4e4>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4422      	add	r2, r4
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004492:	46bd      	mov	sp, r7
 8004494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004498:	51eb851f 	.word	0x51eb851f

0800449c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 001c 	add.w	r0, r7, #28
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d122      	bne.n	80044fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9c0 	bl	8004874 <USB_CoreReset>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e01a      	b.n	8004530 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9b4 	bl	8004874 <USB_CoreReset>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
 8004522:	e005      	b.n	8004530 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10b      	bne.n	800454e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f043 0206 	orr.w	r2, r3, #6
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800455a:	b004      	add	sp, #16
 800455c:	4770      	bx	lr

0800455e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 0201 	bic.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d115      	bne.n	80045f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045d0:	2001      	movs	r0, #1
 80045d2:	f7fc fb5b 	bl	8000c8c <HAL_Delay>
      ms++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3301      	adds	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f93a 	bl	8004856 <USB_GetMode>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d01e      	beq.n	8004626 <USB_SetCurrentMode+0x84>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b31      	cmp	r3, #49	; 0x31
 80045ec:	d9f0      	bls.n	80045d0 <USB_SetCurrentMode+0x2e>
 80045ee:	e01a      	b.n	8004626 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d115      	bne.n	8004622 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004602:	2001      	movs	r0, #1
 8004604:	f7fc fb42 	bl	8000c8c <HAL_Delay>
      ms++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3301      	adds	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f921 	bl	8004856 <USB_GetMode>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <USB_SetCurrentMode+0x84>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b31      	cmp	r3, #49	; 0x31
 800461e:	d9f0      	bls.n	8004602 <USB_SetCurrentMode+0x60>
 8004620:	e001      	b.n	8004626 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e005      	b.n	8004632 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b32      	cmp	r3, #50	; 0x32
 800462a:	d101      	bne.n	8004630 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <USB_FlushTxFifo+0x64>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e01b      	b.n	8004694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	daf2      	bge.n	800464a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	019b      	lsls	r3, r3, #6
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <USB_FlushTxFifo+0x64>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e006      	b.n	8004694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b20      	cmp	r3, #32
 8004690:	d0f0      	beq.n	8004674 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	00030d40 	.word	0x00030d40

080046a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a11      	ldr	r2, [pc, #68]	; (8004700 <USB_FlushRxFifo+0x5c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e018      	b.n	80046f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	daf2      	bge.n	80046b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2210      	movs	r2, #16
 80046d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3301      	adds	r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <USB_FlushRxFifo+0x5c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e006      	b.n	80046f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d0f0      	beq.n	80046d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	00030d40 	.word	0x00030d40

08004704 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	460b      	mov	r3, r1
 8004714:	71fb      	strb	r3, [r7, #7]
 8004716:	4613      	mov	r3, r2
 8004718:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004722:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d123      	bne.n	8004772 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800472a:	88bb      	ldrh	r3, [r7, #4]
 800472c:	3303      	adds	r3, #3
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e018      	b.n	800476a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	031a      	lsls	r2, r3, #12
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4413      	add	r3, r2
 8004740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004744:	461a      	mov	r2, r3
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3301      	adds	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3301      	adds	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3301      	adds	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	3301      	adds	r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	429a      	cmp	r2, r3
 8004770:	d3e2      	bcc.n	8004738 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3724      	adds	r7, #36	; 0x24
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004780:	b480      	push	{r7}
 8004782:	b08b      	sub	sp, #44	; 0x2c
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	b29b      	uxth	r3, r3
 800479c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	e014      	b.n	80047d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	3301      	adds	r3, #1
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	3301      	adds	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	3301      	adds	r3, #1
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	3301      	adds	r3, #1
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	3301      	adds	r3, #1
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3e6      	bcc.n	80047ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047de:	8bfb      	ldrh	r3, [r7, #30]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01e      	beq.n	8004822 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	461a      	mov	r2, r3
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
 8004804:	b2da      	uxtb	r2, r3
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	701a      	strb	r2, [r3, #0]
      i++;
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	3301      	adds	r3, #1
 800480e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	3301      	adds	r3, #1
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004816:	8bfb      	ldrh	r3, [r7, #30]
 8004818:	3b01      	subs	r3, #1
 800481a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800481c:	8bfb      	ldrh	r3, [r7, #30]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ea      	bne.n	80047f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004824:	4618      	mov	r0, r3
 8004826:	372c      	adds	r7, #44	; 0x2c
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004848:	68fb      	ldr	r3, [r7, #12]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0301 	and.w	r3, r3, #1
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <USB_CoreReset+0x64>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e01b      	b.n	80048ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	daf2      	bge.n	8004880 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <USB_CoreReset+0x64>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d0f0      	beq.n	80048aa <USB_CoreReset+0x36>

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	00030d40 	.word	0x00030d40

080048dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048dc:	b084      	sub	sp, #16
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048fc:	461a      	mov	r2, r3
 80048fe:	2300      	movs	r3, #0
 8004900:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10a      	bne.n	8004936 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492e:	f043 0304 	orr.w	r3, r3, #4
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e014      	b.n	8004960 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e009      	b.n	8004960 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800495a:	f023 0304 	bic.w	r3, r3, #4
 800495e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004960:	2110      	movs	r1, #16
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fe6a 	bl	800463c <USB_FlushTxFifo>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fe96 	bl	80046a4 <USB_FlushRxFifo>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	e015      	b.n	80049b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
 800499a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a8:	461a      	mov	r2, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3301      	adds	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3e5      	bcc.n	8004988 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <USB_HostInit+0x154>)
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <USB_HostInit+0x158>)
 80049e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80049ec:	e009      	b.n	8004a02 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2280      	movs	r2, #128	; 0x80
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a10      	ldr	r2, [pc, #64]	; (8004a38 <USB_HostInit+0x15c>)
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <USB_HostInit+0x160>)
 80049fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f043 0210 	orr.w	r2, r3, #16
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <USB_HostInit+0x164>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a2c:	b004      	add	sp, #16
 8004a2e:	4770      	bx	lr
 8004a30:	01000200 	.word	0x01000200
 8004a34:	00e00300 	.word	0x00e00300
 8004a38:	00600080 	.word	0x00600080
 8004a3c:	004000e0 	.word	0x004000e0
 8004a40:	a3200008 	.word	0xa3200008

08004a44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a92:	6053      	str	r3, [r2, #4]
 8004a94:	e009      	b.n	8004aaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d106      	bne.n	8004aaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004aa8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ad8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ae8:	2064      	movs	r0, #100	; 0x64
 8004aea:	f7fc f8cf 	bl	8000c8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004afc:	200a      	movs	r0, #10
 8004afe:	f7fc f8c5 	bl	8000c8c <HAL_Delay>

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <USB_DriveVbus+0x44>
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d106      	bne.n	8004b50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	d109      	bne.n	8004b70 <USB_DriveVbus+0x64>
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	f003 0303 	and.w	r3, r3, #3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	b29b      	uxth	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	4608      	mov	r0, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	70fb      	strb	r3, [r7, #3]
 8004be2:	460b      	mov	r3, r1
 8004be4:	70bb      	strb	r3, [r7, #2]
 8004be6:	4613      	mov	r3, r2
 8004be8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f04f 33ff 	mov.w	r3, #4294967295
 8004c04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d87e      	bhi.n	8004d0c <USB_HC_Init+0x13c>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <USB_HC_Init+0x44>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004ccf 	.word	0x08004ccf
 8004c1c:	08004c25 	.word	0x08004c25
 8004c20:	08004c91 	.word	0x08004c91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	461a      	mov	r2, r3
 8004c32:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da10      	bge.n	8004c62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004c60:	e057      	b.n	8004d12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d051      	beq.n	8004d12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c8c:	60d3      	str	r3, [r2, #12]
      break;
 8004c8e:	e040      	b.n	8004d12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da34      	bge.n	8004d16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ccc:	e023      	b.n	8004d16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f240 2325 	movw	r3, #549	; 0x225
 8004ce0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ce2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	da17      	bge.n	8004d1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d0a:	e006      	b.n	8004d1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77fb      	strb	r3, [r7, #31]
      break;
 8004d10:	e004      	b.n	8004d1c <USB_HC_Init+0x14c>
      break;
 8004d12:	bf00      	nop
 8004d14:	e002      	b.n	8004d1c <USB_HC_Init+0x14c>
      break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <USB_HC_Init+0x14c>
      break;
 8004d1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d36:	f043 0302 	orr.w	r3, r3, #2
 8004d3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	6939      	ldr	r1, [r7, #16]
 8004d52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d56:	4313      	orrs	r3, r2
 8004d58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da03      	bge.n	8004d76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	e001      	b.n	8004d7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff feff 	bl	8004b7e <USB_GetHostSpeed>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004d82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d106      	bne.n	8004d98 <USB_HC_Init+0x1c8>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d003      	beq.n	8004d98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e001      	b.n	8004d9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d9c:	787b      	ldrb	r3, [r7, #1]
 8004d9e:	059b      	lsls	r3, r3, #22
 8004da0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004da4:	78bb      	ldrb	r3, [r7, #2]
 8004da6:	02db      	lsls	r3, r3, #11
 8004da8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004db2:	049b      	lsls	r3, r3, #18
 8004db4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004db8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	0159      	lsls	r1, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	440b      	add	r3, r1
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dd8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004dda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d003      	beq.n	8004dea <USB_HC_Init+0x21a>
 8004de2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10f      	bne.n	8004e0a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	0151      	lsls	r1, r2, #5
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	440a      	add	r2, r1
 8004e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02d      	beq.n	8004e9a <USB_HC_StartXfer+0x86>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d129      	bne.n	8004e9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d117      	bne.n	8004e7c <USB_HC_StartXfer+0x68>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	79db      	ldrb	r3, [r3, #7]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <USB_HC_StartXfer+0x48>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	79db      	ldrb	r3, [r3, #7]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d10f      	bne.n	8004e7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	6a3a      	ldr	r2, [r7, #32]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <USB_HC_StartXfer+0x86>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	795b      	ldrb	r3, [r3, #5]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fa0f 	bl	80052b4 <USB_DoPing>
      return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e0f8      	b.n	800508c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d018      	beq.n	8004ed4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	8912      	ldrh	r2, [r2, #8]
 8004eaa:	4413      	add	r3, r2
 8004eac:	3b01      	subs	r3, #1
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	8912      	ldrh	r2, [r2, #8]
 8004eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eb6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004eb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004eba:	8b7b      	ldrh	r3, [r7, #26]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d90b      	bls.n	8004ed8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004ec0:	8b7b      	ldrh	r3, [r7, #26]
 8004ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	8912      	ldrh	r2, [r2, #8]
 8004eca:	fb03 f202 	mul.w	r2, r3, r2
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	611a      	str	r2, [r3, #16]
 8004ed2:	e001      	b.n	8004ed8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	78db      	ldrb	r3, [r3, #3]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ee0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	8912      	ldrh	r2, [r2, #8]
 8004ee6:	fb03 f202 	mul.w	r2, r3, r2
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	611a      	str	r2, [r3, #16]
 8004eee:	e003      	b.n	8004ef8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f02:	04d9      	lsls	r1, r3, #19
 8004f04:	4b63      	ldr	r3, [pc, #396]	; (8005094 <USB_HC_StartXfer+0x280>)
 8004f06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	7a9b      	ldrb	r3, [r3, #10]
 8004f0e:	075b      	lsls	r3, r3, #29
 8004f10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	0148      	lsls	r0, r1, #5
 8004f18:	6a39      	ldr	r1, [r7, #32]
 8004f1a:	4401      	add	r1, r0
 8004f1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68d9      	ldr	r1, [r3, #12]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	6a3a      	ldr	r2, [r7, #32]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	7e7b      	ldrb	r3, [r7, #25]
 8004f86:	075b      	lsls	r3, r3, #29
 8004f88:	69f9      	ldr	r1, [r7, #28]
 8004f8a:	0148      	lsls	r0, r1, #5
 8004f8c:	6a39      	ldr	r1, [r7, #32]
 8004f8e:	4401      	add	r1, r0
 8004f90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	78db      	ldrb	r3, [r3, #3]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e003      	b.n	8004fca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fc8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	461a      	mov	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e04e      	b.n	800508c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	78db      	ldrb	r3, [r3, #3]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d149      	bne.n	800508a <USB_HC_StartXfer+0x276>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d045      	beq.n	800508a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	79db      	ldrb	r3, [r3, #7]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d830      	bhi.n	8005068 <USB_HC_StartXfer+0x254>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <USB_HC_StartXfer+0x1f8>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005041 	.word	0x08005041
 8005014:	0800501d 	.word	0x0800501d
 8005018:	08005041 	.word	0x08005041
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	3303      	adds	r3, #3
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005026:	8afa      	ldrh	r2, [r7, #22]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	b29b      	uxth	r3, r3
 800502e:	429a      	cmp	r2, r3
 8005030:	d91c      	bls.n	800506c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	619a      	str	r2, [r3, #24]
        }
        break;
 800503e:	e015      	b.n	800506c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	3303      	adds	r3, #3
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800504a:	8afa      	ldrh	r2, [r7, #22]
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	b29b      	uxth	r3, r3
 8005056:	429a      	cmp	r2, r3
 8005058:	d90a      	bls.n	8005070 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	619a      	str	r2, [r3, #24]
        }
        break;
 8005066:	e003      	b.n	8005070 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005068:	bf00      	nop
 800506a:	e002      	b.n	8005072 <USB_HC_StartXfer+0x25e>
        break;
 800506c:	bf00      	nop
 800506e:	e000      	b.n	8005072 <USB_HC_StartXfer+0x25e>
        break;
 8005070:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	785a      	ldrb	r2, [r3, #1]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	b29b      	uxth	r3, r3
 8005080:	2000      	movs	r0, #0
 8005082:	9000      	str	r0, [sp, #0]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff fb3d 	bl	8004704 <USB_WritePacket>
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	1ff80000 	.word	0x1ff80000

08005098 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	b29b      	uxth	r3, r3
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b089      	sub	sp, #36	; 0x24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0c9b      	lsrs	r3, r3, #18
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	0fdb      	lsrs	r3, r3, #31
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	d104      	bne.n	8005114 <USB_HC_Halt+0x5a>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	e0c8      	b.n	80052a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <USB_HC_Halt+0x66>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d163      	bne.n	80051e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	440a      	add	r2, r1
 8005136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800513e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	f040 80ab 	bne.w	80052a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d133      	bne.n	80051c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	440a      	add	r2, r1
 8005170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005178:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	440a      	add	r2, r1
 8005190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005198:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a6:	d81d      	bhi.n	80051e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051be:	d0ec      	beq.n	800519a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051c0:	e070      	b.n	80052a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051e2:	e05f      	b.n	80052a4 <USB_HC_Halt+0x1ea>
            break;
 80051e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051e6:	e05d      	b.n	80052a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005206:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d133      	bne.n	8005280 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	440a      	add	r2, r1
 800522e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005236:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	440a      	add	r2, r1
 800524e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005256:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005264:	d81d      	bhi.n	80052a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527c:	d0ec      	beq.n	8005258 <USB_HC_Halt+0x19e>
 800527e:	e011      	b.n	80052a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e000      	b.n	80052a4 <USB_HC_Halt+0x1ea>
          break;
 80052a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3724      	adds	r7, #36	; 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052c8:	2301      	movs	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	04da      	lsls	r2, r3, #19
 80052d0:	4b15      	ldr	r3, [pc, #84]	; (8005328 <USB_DoPing+0x74>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005304:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4413      	add	r3, r2
 800530e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005312:	461a      	mov	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	1ff80000 	.word	0x1ff80000

0800532c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff f91d 	bl	8004580 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005346:	2110      	movs	r1, #16
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff f977 	bl	800463c <USB_FlushTxFifo>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff f9a3 	bl	80046a4 <USB_FlushRxFifo>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	e01f      	b.n	80053ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005384:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800538c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005394:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a2:	461a      	mov	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	3301      	adds	r3, #1
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d9dc      	bls.n	800536e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053b4:	2300      	movs	r3, #0
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	e034      	b.n	8005424 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	461a      	mov	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005400:	d80c      	bhi.n	800541c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005418:	d0ec      	beq.n	80053f4 <USB_StopHost+0xc8>
 800541a:	e000      	b.n	800541e <USB_StopHost+0xf2>
        break;
 800541c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3301      	adds	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d9c7      	bls.n	80053ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005430:	461a      	mov	r2, r3
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f04f 32ff 	mov.w	r2, #4294967295
 800543e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff f88c 	bl	800455e <USB_EnableGlobalInt>

  return ret;
 8005446:	7ffb      	ldrb	r3, [r7, #31]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b089      	sub	sp, #36	; 0x24
 8005454:	af04      	add	r7, sp, #16
 8005456:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005458:	2301      	movs	r3, #1
 800545a:	2202      	movs	r2, #2
 800545c:	2102      	movs	r1, #2
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fc66 	bl	8005d30 <USBH_FindInterface>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2bff      	cmp	r3, #255	; 0xff
 800546c:	d002      	beq.n	8005474 <USBH_CDC_InterfaceInit+0x24>
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d901      	bls.n	8005478 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005474:	2302      	movs	r3, #2
 8005476:	e13d      	b.n	80056f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fc3b 	bl	8005cf8 <USBH_SelectInterface>
 8005482:	4603      	mov	r3, r0
 8005484:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005486:	7bbb      	ldrb	r3, [r7, #14]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800548c:	2302      	movs	r3, #2
 800548e:	e131      	b.n	80056f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005496:	2050      	movs	r0, #80	; 0x50
 8005498:	f002 fab4 	bl	8007a04 <malloc>
 800549c:	4603      	mov	r3, r0
 800549e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80054b0:	2302      	movs	r3, #2
 80054b2:	e11f      	b.n	80056f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80054b4:	2250      	movs	r2, #80	; 0x50
 80054b6:	2100      	movs	r1, #0
 80054b8:	68b8      	ldr	r0, [r7, #8]
 80054ba:	f002 fb5f 	bl	8007b7c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	211a      	movs	r1, #26
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	4413      	add	r3, r2
 80054ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da15      	bge.n	8005502 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	211a      	movs	r1, #26
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	211a      	movs	r1, #26
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054fc:	881a      	ldrh	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 ff2e 	bl	800736a <USBH_AllocPipe>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	7819      	ldrb	r1, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	7858      	ldrb	r0, [r3, #1]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	8952      	ldrh	r2, [r2, #10]
 800552e:	9202      	str	r2, [sp, #8]
 8005530:	2203      	movs	r2, #3
 8005532:	9201      	str	r2, [sp, #4]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	4623      	mov	r3, r4
 8005538:	4602      	mov	r2, r0
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fee6 	bl	800730c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f002 f9f4 	bl	8007936 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800554e:	2300      	movs	r3, #0
 8005550:	2200      	movs	r2, #0
 8005552:	210a      	movs	r1, #10
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fbeb 	bl	8005d30 <USBH_FindInterface>
 800555a:	4603      	mov	r3, r0
 800555c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2bff      	cmp	r3, #255	; 0xff
 8005562:	d002      	beq.n	800556a <USBH_CDC_InterfaceInit+0x11a>
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d901      	bls.n	800556e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800556a:	2302      	movs	r3, #2
 800556c:	e0c2      	b.n	80056f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	211a      	movs	r1, #26
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	4413      	add	r3, r2
 800557a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	b25b      	sxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	da16      	bge.n	80055b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	211a      	movs	r1, #26
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	211a      	movs	r1, #26
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	835a      	strh	r2, [r3, #26]
 80055b2:	e015      	b.n	80055e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	211a      	movs	r1, #26
 80055ba:	fb01 f303 	mul.w	r3, r1, r3
 80055be:	4413      	add	r3, r2
 80055c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	211a      	movs	r1, #26
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	211a      	movs	r1, #26
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b25b      	sxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da16      	bge.n	8005626 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	211a      	movs	r1, #26
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	211a      	movs	r1, #26
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	4413      	add	r3, r2
 800561a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800561e:	881a      	ldrh	r2, [r3, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	835a      	strh	r2, [r3, #26]
 8005624:	e015      	b.n	8005652 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	211a      	movs	r1, #26
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	211a      	movs	r1, #26
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	4413      	add	r3, r2
 8005648:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	7b9b      	ldrb	r3, [r3, #14]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 fe86 	bl	800736a <USBH_AllocPipe>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	7bdb      	ldrb	r3, [r3, #15]
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fe7c 	bl	800736a <USBH_AllocPipe>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	7b59      	ldrb	r1, [r3, #13]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	7b98      	ldrb	r0, [r3, #14]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	8b12      	ldrh	r2, [r2, #24]
 8005692:	9202      	str	r2, [sp, #8]
 8005694:	2202      	movs	r2, #2
 8005696:	9201      	str	r2, [sp, #4]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	4623      	mov	r3, r4
 800569c:	4602      	mov	r2, r0
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 fe34 	bl	800730c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	7b19      	ldrb	r1, [r3, #12]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	7bd8      	ldrb	r0, [r3, #15]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	8b52      	ldrh	r2, [r2, #26]
 80056bc:	9202      	str	r2, [sp, #8]
 80056be:	2202      	movs	r2, #2
 80056c0:	9201      	str	r2, [sp, #4]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	4623      	mov	r3, r4
 80056c6:	4602      	mov	r2, r0
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fe1f 	bl	800730c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	7b5b      	ldrb	r3, [r3, #13]
 80056da:	2200      	movs	r2, #0
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f002 f929 	bl	8007936 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	7b1b      	ldrb	r3, [r3, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f002 f922 	bl	8007936 <USBH_LL_SetToggle>

  return USBH_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd90      	pop	{r4, r7, pc}

080056fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00e      	beq.n	8005734 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 fe14 	bl	800734a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 fe3f 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	7b1b      	ldrb	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00e      	beq.n	800575a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	7b1b      	ldrb	r3, [r3, #12]
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fe01 	bl	800734a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	7b1b      	ldrb	r3, [r3, #12]
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fe2c 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	7b5b      	ldrb	r3, [r3, #13]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00e      	beq.n	8005780 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	7b5b      	ldrb	r3, [r3, #13]
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 fdee 	bl	800734a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	7b5b      	ldrb	r3, [r3, #13]
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 fe19 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4618      	mov	r0, r3
 8005796:	f002 f93d 	bl	8007a14 <free>
    phost->pActiveClass->pData = 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057a0:	2200      	movs	r2, #0
 80057a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3340      	adds	r3, #64	; 0x40
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f8b1 	bl	800592e <GetLineCoding>
 80057cc:	4603      	mov	r3, r0
 80057ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80057d0:	7afb      	ldrb	r3, [r7, #11]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057dc:	2102      	movs	r1, #2
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80057e2:	7afb      	ldrb	r3, [r7, #11]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800580c:	2b04      	cmp	r3, #4
 800580e:	d877      	bhi.n	8005900 <USBH_CDC_Process+0x114>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <USBH_CDC_Process+0x2c>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800582d 	.word	0x0800582d
 800581c:	08005833 	.word	0x08005833
 8005820:	08005863 	.word	0x08005863
 8005824:	080058d7 	.word	0x080058d7
 8005828:	080058e5 	.word	0x080058e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e06d      	b.n	800590e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f897 	bl	800596c <SetLineCoding>
 800583e:	4603      	mov	r3, r0
 8005840:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005842:	7bbb      	ldrb	r3, [r7, #14]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005850:	e058      	b.n	8005904 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d055      	beq.n	8005904 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2204      	movs	r2, #4
 800585c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005860:	e050      	b.n	8005904 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3340      	adds	r3, #64	; 0x40
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f860 	bl	800592e <GetLineCoding>
 800586e:	4603      	mov	r3, r0
 8005870:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d126      	bne.n	80058c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	791b      	ldrb	r3, [r3, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	d13b      	bne.n	8005908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800589c:	429a      	cmp	r2, r3
 800589e:	d133      	bne.n	8005908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d12b      	bne.n	8005908 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d124      	bne.n	8005908 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f958 	bl	8005b74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058c4:	e020      	b.n	8005908 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d01d      	beq.n	8005908 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2204      	movs	r2, #4
 80058d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058d4:	e018      	b.n	8005908 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f867 	bl	80059aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8da 	bl	8005a96 <CDC_ProcessReception>
      break;
 80058e2:	e014      	b.n	800590e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80058e4:	2100      	movs	r1, #0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 ffef 	bl	80068ca <USBH_ClrFeature>
 80058ec:	4603      	mov	r3, r0
 80058ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80058fe:	e005      	b.n	800590c <USBH_CDC_Process+0x120>

    default:
      break;
 8005900:	bf00      	nop
 8005902:	e004      	b.n	800590e <USBH_CDC_Process+0x122>
      break;
 8005904:	bf00      	nop
 8005906:	e002      	b.n	800590e <USBH_CDC_Process+0x122>
      break;
 8005908:	bf00      	nop
 800590a:	e000      	b.n	800590e <USBH_CDC_Process+0x122>
      break;
 800590c:	bf00      	nop

  }

  return status;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	22a1      	movs	r2, #161	; 0xa1
 800593c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2221      	movs	r2, #33	; 0x21
 8005942:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2207      	movs	r2, #7
 8005954:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2207      	movs	r2, #7
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 fa83 	bl	8006e68 <USBH_CtlReq>
 8005962:	4603      	mov	r3, r0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2221      	movs	r2, #33	; 0x21
 800597a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2207      	movs	r2, #7
 8005992:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2207      	movs	r2, #7
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fa64 	bl	8006e68 <USBH_CtlReq>
 80059a0:	4603      	mov	r3, r0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af02      	add	r7, sp, #8
 80059b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059bc:	2300      	movs	r3, #0
 80059be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d002      	beq.n	80059d0 <CDC_ProcessTransmission+0x26>
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d023      	beq.n	8005a16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80059ce:	e05e      	b.n	8005a8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	8b12      	ldrh	r2, [r2, #24]
 80059d8:	4293      	cmp	r3, r2
 80059da:	d90b      	bls.n	80059f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	69d9      	ldr	r1, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8b1a      	ldrh	r2, [r3, #24]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	7b5b      	ldrb	r3, [r3, #13]
 80059e8:	2001      	movs	r0, #1
 80059ea:	9000      	str	r0, [sp, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fc4a 	bl	8007286 <USBH_BulkSendData>
 80059f2:	e00b      	b.n	8005a0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	7b5b      	ldrb	r3, [r3, #13]
 8005a02:	2001      	movs	r0, #1
 8005a04:	9000      	str	r0, [sp, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fc3d 	bl	8007286 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a14:	e03b      	b.n	8005a8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	7b5b      	ldrb	r3, [r3, #13]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 ff69 	bl	80078f4 <USBH_LL_GetURBState>
 8005a22:	4603      	mov	r3, r0
 8005a24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a26:	7afb      	ldrb	r3, [r7, #11]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d128      	bne.n	8005a7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	8b12      	ldrh	r2, [r2, #24]
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d90e      	bls.n	8005a56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	8b12      	ldrh	r2, [r2, #24]
 8005a40:	1a9a      	subs	r2, r3, r2
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	8b12      	ldrh	r2, [r2, #24]
 8005a4e:	441a      	add	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	61da      	str	r2, [r3, #28]
 8005a54:	e002      	b.n	8005a5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a6c:	e00e      	b.n	8005a8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f868 	bl	8005b4c <USBH_CDC_TransmitCallback>
      break;
 8005a7c:	e006      	b.n	8005a8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d103      	bne.n	8005a8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a8c:	bf00      	nop
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d002      	beq.n	8005abc <CDC_ProcessReception+0x26>
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d00e      	beq.n	8005ad8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005aba:	e043      	b.n	8005b44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	6a19      	ldr	r1, [r3, #32]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	8b5a      	ldrh	r2, [r3, #26]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	7b1b      	ldrb	r3, [r3, #12]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fc01 	bl	80072d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ad6:	e035      	b.n	8005b44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	7b1b      	ldrb	r3, [r3, #12]
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 ff08 	bl	80078f4 <USBH_LL_GetURBState>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d129      	bne.n	8005b42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	7b1b      	ldrb	r3, [r3, #12]
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fe6b 	bl	80077d0 <USBH_LL_GetLastXferSize>
 8005afa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d016      	beq.n	8005b34 <CDC_ProcessReception+0x9e>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	8b5b      	ldrh	r3, [r3, #26]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d910      	bls.n	8005b34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	441a      	add	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b32:	e006      	b.n	8005b42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f80f 	bl	8005b60 <USBH_CDC_ReceiveCallback>
      break;
 8005b42:	bf00      	nop
  }
}
 8005b44:	bf00      	nop
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e029      	b.n	8005bf4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	79fa      	ldrb	r2, [r7, #7]
 8005ba4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f81f 	bl	8005bfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 fd3b 	bl	8007668 <USBH_LL_Init>

  return USBH_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e009      	b.n	8005c22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	33e0      	adds	r3, #224	; 0xe0
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	2200      	movs	r2, #0
 8005c1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b0f      	cmp	r3, #15
 8005c26:	d9f2      	bls.n	8005c0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e009      	b.n	8005c42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c48:	d3f1      	bcc.n	8005c2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2240      	movs	r2, #64	; 0x40
 8005c6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d016      	beq.n	8005ce6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10e      	bne.n	8005ce0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	33de      	adds	r3, #222	; 0xde
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
 8005cde:	e004      	b.n	8005cea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	73fb      	strb	r3, [r7, #15]
 8005ce4:	e001      	b.n	8005cea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d204      	bcs.n	8005d1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005d1c:	e001      	b.n	8005d22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4603      	mov	r3, r0
 8005d40:	70fb      	strb	r3, [r7, #3]
 8005d42:	460b      	mov	r3, r1
 8005d44:	70bb      	strb	r3, [r7, #2]
 8005d46:	4613      	mov	r3, r2
 8005d48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d5a:	e025      	b.n	8005da8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	221a      	movs	r2, #26
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
 8005d64:	3308      	adds	r3, #8
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	795b      	ldrb	r3, [r3, #5]
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d002      	beq.n	8005d7e <USBH_FindInterface+0x4e>
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	d111      	bne.n	8005da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d82:	78ba      	ldrb	r2, [r7, #2]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d002      	beq.n	8005d8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d88:	78bb      	ldrb	r3, [r7, #2]
 8005d8a:	2bff      	cmp	r3, #255	; 0xff
 8005d8c:	d109      	bne.n	8005da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d92:	787a      	ldrb	r2, [r7, #1]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d002      	beq.n	8005d9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d98:	787b      	ldrb	r3, [r7, #1]
 8005d9a:	2bff      	cmp	r3, #255	; 0xff
 8005d9c:	d101      	bne.n	8005da2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	e006      	b.n	8005db0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	3301      	adds	r3, #1
 8005da6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d9d6      	bls.n	8005d5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005dae:	23ff      	movs	r3, #255	; 0xff
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 fc8b 	bl	80076e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 fda4 	bl	800791a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af04      	add	r7, sp, #16
 8005de2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005de4:	2302      	movs	r3, #2
 8005de6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d102      	bne.n	8005dfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b0b      	cmp	r3, #11
 8005e06:	f200 81be 	bhi.w	8006186 <USBH_Process+0x3aa>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <USBH_Process+0x34>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e41 	.word	0x08005e41
 8005e14:	08005e73 	.word	0x08005e73
 8005e18:	08005edb 	.word	0x08005edb
 8005e1c:	08006121 	.word	0x08006121
 8005e20:	08006187 	.word	0x08006187
 8005e24:	08005f7f 	.word	0x08005f7f
 8005e28:	080060c7 	.word	0x080060c7
 8005e2c:	08005fb5 	.word	0x08005fb5
 8005e30:	08005fd5 	.word	0x08005fd5
 8005e34:	08005ff5 	.word	0x08005ff5
 8005e38:	08006039 	.word	0x08006039
 8005e3c:	08006109 	.word	0x08006109
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 819e 	beq.w	800618a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005e54:	20c8      	movs	r0, #200	; 0xc8
 8005e56:	f001 fd9e 	bl	8007996 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 fc9d 	bl	800779a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005e70:	e18b      	b.n	800618a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d107      	bne.n	8005e8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e8a:	e18d      	b.n	80061a8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e96:	d914      	bls.n	8005ec2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d903      	bls.n	8005eba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	220d      	movs	r2, #13
 8005eb6:	701a      	strb	r2, [r3, #0]
      break;
 8005eb8:	e176      	b.n	80061a8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
      break;
 8005ec0:	e172      	b.n	80061a8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ec8:	f103 020a 	add.w	r2, r3, #10
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ed2:	200a      	movs	r0, #10
 8005ed4:	f001 fd5f 	bl	8007996 <USBH_Delay>
      break;
 8005ed8:	e166      	b.n	80061a8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eea:	2104      	movs	r1, #4
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005ef0:	2064      	movs	r0, #100	; 0x64
 8005ef2:	f001 fd50 	bl	8007996 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fc28 	bl	800774c <USBH_LL_GetSpeed>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2205      	movs	r2, #5
 8005f0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 fa2b 	bl	800736a <USBH_AllocPipe>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f1c:	2180      	movs	r1, #128	; 0x80
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fa23 	bl	800736a <USBH_AllocPipe>
 8005f24:	4603      	mov	r3, r0
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7919      	ldrb	r1, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f40:	b292      	uxth	r2, r2
 8005f42:	9202      	str	r2, [sp, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	9201      	str	r2, [sp, #4]
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2280      	movs	r2, #128	; 0x80
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 f9dc 	bl	800730c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7959      	ldrb	r1, [r3, #5]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	9202      	str	r2, [sp, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	9201      	str	r2, [sp, #4]
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	4603      	mov	r3, r0
 8005f74:	2200      	movs	r2, #0
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 f9c8 	bl	800730c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f7c:	e114      	b.n	80061a8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f918 	bl	80061b4 <USBH_HandleEnum>
 8005f84:	4603      	mov	r3, r0
 8005f86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 80fe 	bne.w	800618e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d103      	bne.n	8005fac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2208      	movs	r2, #8
 8005fa8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005faa:	e0f0      	b.n	800618e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2207      	movs	r2, #7
 8005fb0:	701a      	strb	r2, [r3, #0]
      break;
 8005fb2:	e0ec      	b.n	800618e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80e9 	beq.w	8006192 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2208      	movs	r2, #8
 8005fd0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005fd2:	e0de      	b.n	8006192 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fc2c 	bl	800683c <USBH_SetCfg>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 80d5 	bne.w	8006196 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2209      	movs	r2, #9
 8005ff0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ff2:	e0d0      	b.n	8006196 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006002:	2101      	movs	r1, #1
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fc3c 	bl	8006882 <USBH_SetFeature>
 800600a:	4603      	mov	r3, r0
 800600c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	220a      	movs	r2, #10
 800601a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800601c:	e0bd      	b.n	800619a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b03      	cmp	r3, #3
 8006024:	f040 80b9 	bne.w	800619a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	220a      	movs	r2, #10
 800602c:	701a      	strb	r2, [r3, #0]
      break;
 800602e:	e0b4      	b.n	800619a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	220a      	movs	r2, #10
 8006034:	701a      	strb	r2, [r3, #0]
      break;
 8006036:	e0b0      	b.n	800619a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80ad 	beq.w	800619e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	e016      	b.n	8006080 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006052:	7bfa      	ldrb	r2, [r7, #15]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	32de      	adds	r2, #222	; 0xde
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	791a      	ldrb	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006064:	429a      	cmp	r2, r3
 8006066:	d108      	bne.n	800607a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32de      	adds	r2, #222	; 0xde
 800606e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006078:	e005      	b.n	8006086 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	3301      	adds	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0e5      	beq.n	8006052 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d016      	beq.n	80060be <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2206      	movs	r2, #6
 80060a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060ae:	2103      	movs	r1, #3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060b4:	e073      	b.n	800619e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	220d      	movs	r2, #13
 80060ba:	701a      	strb	r2, [r3, #0]
      break;
 80060bc:	e06f      	b.n	800619e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	220d      	movs	r2, #13
 80060c2:	701a      	strb	r2, [r3, #0]
      break;
 80060c4:	e06b      	b.n	800619e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d017      	beq.n	8006100 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	4603      	mov	r3, r0
 80060de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	220b      	movs	r2, #11
 80060ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060ee:	e058      	b.n	80061a2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d154      	bne.n	80061a2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	220d      	movs	r2, #13
 80060fc:	701a      	strb	r2, [r3, #0]
      break;
 80060fe:	e050      	b.n	80061a2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	220d      	movs	r2, #13
 8006104:	701a      	strb	r2, [r3, #0]
      break;
 8006106:	e04c      	b.n	80061a2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d049      	beq.n	80061a6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
      }
      break;
 800611e:	e042      	b.n	80061a6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff fd67 	bl	8005bfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d009      	beq.n	800614c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800615c:	2105      	movs	r1, #5
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fe20 	bl	8005dbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800617c:	e014      	b.n	80061a8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 faae 	bl	80076e0 <USBH_LL_Start>
      break;
 8006184:	e010      	b.n	80061a8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006186:	bf00      	nop
 8006188:	e00e      	b.n	80061a8 <USBH_Process+0x3cc>
      break;
 800618a:	bf00      	nop
 800618c:	e00c      	b.n	80061a8 <USBH_Process+0x3cc>
      break;
 800618e:	bf00      	nop
 8006190:	e00a      	b.n	80061a8 <USBH_Process+0x3cc>
    break;
 8006192:	bf00      	nop
 8006194:	e008      	b.n	80061a8 <USBH_Process+0x3cc>
      break;
 8006196:	bf00      	nop
 8006198:	e006      	b.n	80061a8 <USBH_Process+0x3cc>
      break;
 800619a:	bf00      	nop
 800619c:	e004      	b.n	80061a8 <USBH_Process+0x3cc>
      break;
 800619e:	bf00      	nop
 80061a0:	e002      	b.n	80061a8 <USBH_Process+0x3cc>
      break;
 80061a2:	bf00      	nop
 80061a4:	e000      	b.n	80061a8 <USBH_Process+0x3cc>
      break;
 80061a6:	bf00      	nop
  }
  return USBH_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop

080061b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af04      	add	r7, sp, #16
 80061ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b07      	cmp	r3, #7
 80061ca:	f200 81c1 	bhi.w	8006550 <USBH_HandleEnum+0x39c>
 80061ce:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <USBH_HandleEnum+0x20>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061f5 	.word	0x080061f5
 80061d8:	080062b3 	.word	0x080062b3
 80061dc:	0800631d 	.word	0x0800631d
 80061e0:	080063ab 	.word	0x080063ab
 80061e4:	08006415 	.word	0x08006415
 80061e8:	08006485 	.word	0x08006485
 80061ec:	080064cb 	.word	0x080064cb
 80061f0:	08006511 	.word	0x08006511
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80061f4:	2108      	movs	r1, #8
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa50 	bl	800669c <USBH_Get_DevDesc>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d130      	bne.n	8006268 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7919      	ldrb	r1, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800622a:	b292      	uxth	r2, r2
 800622c:	9202      	str	r2, [sp, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	9201      	str	r2, [sp, #4]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	4603      	mov	r3, r0
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f867 	bl	800730c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	7959      	ldrb	r1, [r3, #5]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006252:	b292      	uxth	r2, r2
 8006254:	9202      	str	r2, [sp, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	9201      	str	r2, [sp, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	4603      	mov	r3, r0
 800625e:	2200      	movs	r2, #0
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 f853 	bl	800730c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006266:	e175      	b.n	8006554 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	2b03      	cmp	r3, #3
 800626c:	f040 8172 	bne.w	8006554 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006276:	3301      	adds	r3, #1
 8006278:	b2da      	uxtb	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006286:	2b03      	cmp	r3, #3
 8006288:	d903      	bls.n	8006292 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	220d      	movs	r2, #13
 800628e:	701a      	strb	r2, [r3, #0]
      break;
 8006290:	e160      	b.n	8006554 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	795b      	ldrb	r3, [r3, #5]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f887 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	791b      	ldrb	r3, [r3, #4]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f881 	bl	80073ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
      break;
 80062b0:	e150      	b.n	8006554 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80062b2:	2112      	movs	r1, #18
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f9f1 	bl	800669c <USBH_Get_DevDesc>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80062ca:	e145      	b.n	8006558 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	f040 8142 	bne.w	8006558 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062da:	3301      	adds	r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d903      	bls.n	80062f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	220d      	movs	r2, #13
 80062f2:	701a      	strb	r2, [r3, #0]
      break;
 80062f4:	e130      	b.n	8006558 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	795b      	ldrb	r3, [r3, #5]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f855 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f84f 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	e11d      	b.n	8006558 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800631c:	2101      	movs	r1, #1
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa68 	bl	80067f4 <USBH_SetAddress>
 8006324:	4603      	mov	r3, r0
 8006326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d132      	bne.n	8006394 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800632e:	2002      	movs	r0, #2
 8006330:	f001 fb31 	bl	8007996 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2203      	movs	r2, #3
 8006340:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7919      	ldrb	r1, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006356:	b292      	uxth	r2, r2
 8006358:	9202      	str	r2, [sp, #8]
 800635a:	2200      	movs	r2, #0
 800635c:	9201      	str	r2, [sp, #4]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4603      	mov	r3, r0
 8006362:	2280      	movs	r2, #128	; 0x80
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 ffd1 	bl	800730c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	7959      	ldrb	r1, [r3, #5]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800637e:	b292      	uxth	r2, r2
 8006380:	9202      	str	r2, [sp, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	9201      	str	r2, [sp, #4]
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	4603      	mov	r3, r0
 800638a:	2200      	movs	r2, #0
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 ffbd 	bl	800730c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006392:	e0e3      	b.n	800655c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006394:	7bbb      	ldrb	r3, [r7, #14]
 8006396:	2b03      	cmp	r3, #3
 8006398:	f040 80e0 	bne.w	800655c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	220d      	movs	r2, #13
 80063a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	705a      	strb	r2, [r3, #1]
      break;
 80063a8:	e0d8      	b.n	800655c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80063aa:	2109      	movs	r1, #9
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f99d 	bl	80066ec <USBH_Get_CfgDesc>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2204      	movs	r2, #4
 80063c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063c2:	e0cd      	b.n	8006560 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	f040 80ca 	bne.w	8006560 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d903      	bls.n	80063ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	220d      	movs	r2, #13
 80063ea:	701a      	strb	r2, [r3, #0]
      break;
 80063ec:	e0b8      	b.n	8006560 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	795b      	ldrb	r3, [r3, #5]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 ffd9 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 ffd3 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
      break;
 8006412:	e0a5      	b.n	8006560 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f965 	bl	80066ec <USBH_Get_CfgDesc>
 8006422:	4603      	mov	r3, r0
 8006424:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d103      	bne.n	8006434 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2205      	movs	r2, #5
 8006430:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006432:	e097      	b.n	8006564 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	2b03      	cmp	r3, #3
 8006438:	f040 8094 	bne.w	8006564 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006442:	3301      	adds	r3, #1
 8006444:	b2da      	uxtb	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006452:	2b03      	cmp	r3, #3
 8006454:	d903      	bls.n	800645e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	220d      	movs	r2, #13
 800645a:	701a      	strb	r2, [r3, #0]
      break;
 800645c:	e082      	b.n	8006564 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	795b      	ldrb	r3, [r3, #5]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 ffa1 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	791b      	ldrb	r3, [r3, #4]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 ff9b 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
      break;
 8006482:	e06f      	b.n	8006564 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800648a:	2b00      	cmp	r3, #0
 800648c:	d019      	beq.n	80064c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800649a:	23ff      	movs	r3, #255	; 0xff
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f949 	bl	8006734 <USBH_Get_StringDesc>
 80064a2:	4603      	mov	r3, r0
 80064a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d103      	bne.n	80064b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2206      	movs	r2, #6
 80064b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80064b2:	e059      	b.n	8006568 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d156      	bne.n	8006568 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2206      	movs	r2, #6
 80064be:	705a      	strb	r2, [r3, #1]
      break;
 80064c0:	e052      	b.n	8006568 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2206      	movs	r2, #6
 80064c6:	705a      	strb	r2, [r3, #1]
      break;
 80064c8:	e04e      	b.n	8006568 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d019      	beq.n	8006508 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064e0:	23ff      	movs	r3, #255	; 0xff
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f926 	bl	8006734 <USBH_Get_StringDesc>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2207      	movs	r2, #7
 80064f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80064f8:	e038      	b.n	800656c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d135      	bne.n	800656c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2207      	movs	r2, #7
 8006504:	705a      	strb	r2, [r3, #1]
      break;
 8006506:	e031      	b.n	800656c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2207      	movs	r2, #7
 800650c:	705a      	strb	r2, [r3, #1]
      break;
 800650e:	e02d      	b.n	800656c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006516:	2b00      	cmp	r3, #0
 8006518:	d017      	beq.n	800654a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006526:	23ff      	movs	r3, #255	; 0xff
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f903 	bl	8006734 <USBH_Get_StringDesc>
 800652e:	4603      	mov	r3, r0
 8006530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800653c:	e018      	b.n	8006570 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b03      	cmp	r3, #3
 8006542:	d115      	bne.n	8006570 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	e012      	b.n	8006570 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
      break;
 800654e:	e00f      	b.n	8006570 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006550:	bf00      	nop
 8006552:	e00e      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 8006554:	bf00      	nop
 8006556:	e00c      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 8006558:	bf00      	nop
 800655a:	e00a      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 800655c:	bf00      	nop
 800655e:	e008      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 8006560:	bf00      	nop
 8006562:	e006      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 8006564:	bf00      	nop
 8006566:	e004      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <USBH_HandleEnum+0x3be>
      break;
 8006570:	bf00      	nop
  }
  return Status;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f804 	bl	80065be <USBH_HandleSof>
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b0b      	cmp	r3, #11
 80065ce:	d10a      	bne.n	80065e6 <USBH_HandleSof+0x28>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	4798      	blx	r3
  }
}
 80065e6:	bf00      	nop
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80065fe:	bf00      	nop
}
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800661a:	bf00      	nop
}
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f84e 	bl	8007716 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	791b      	ldrb	r3, [r3, #4]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fe93 	bl	80073ac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	795b      	ldrb	r3, [r3, #5]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fe8d 	bl	80073ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f864 	bl	800678a <USBH_GetDescriptor>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066d8:	78fa      	ldrb	r2, [r7, #3]
 80066da:	b292      	uxth	r2, r2
 80066dc:	4619      	mov	r1, r3
 80066de:	f000 f919 	bl	8006914 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	331c      	adds	r3, #28
 80066fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80066fe:	887b      	ldrh	r3, [r7, #2]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f83d 	bl	800678a <USBH_GetDescriptor>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d107      	bne.n	800672a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800671a:	887b      	ldrh	r3, [r7, #2]
 800671c:	461a      	mov	r2, r3
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f989 	bl	8006a38 <USBH_ParseCfgDesc>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	461a      	mov	r2, r3
 8006740:	460b      	mov	r3, r1
 8006742:	72fb      	strb	r3, [r7, #11]
 8006744:	4613      	mov	r3, r2
 8006746:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006750:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006758:	893b      	ldrh	r3, [r7, #8]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	460b      	mov	r3, r1
 800675e:	2100      	movs	r1, #0
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f812 	bl	800678a <USBH_GetDescriptor>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d107      	bne.n	8006780 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006776:	893a      	ldrh	r2, [r7, #8]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fb26 	bl	8006dcc <USBH_ParseStringDesc>
  }

  return status;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	72fb      	strb	r3, [r7, #11]
 8006798:	4613      	mov	r3, r2
 800679a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	789b      	ldrb	r3, [r3, #2]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d11c      	bne.n	80067de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2206      	movs	r2, #6
 80067b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	893a      	ldrh	r2, [r7, #8]
 80067ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80067bc:	893b      	ldrh	r3, [r7, #8]
 80067be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c6:	d104      	bne.n	80067d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f240 4209 	movw	r2, #1033	; 0x409
 80067ce:	829a      	strh	r2, [r3, #20]
 80067d0:	e002      	b.n	80067d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8b3a      	ldrh	r2, [r7, #24]
 80067dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80067de:	8b3b      	ldrh	r3, [r7, #24]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fb3f 	bl	8006e68 <USBH_CtlReq>
 80067ea:	4603      	mov	r3, r0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	789b      	ldrb	r3, [r3, #2]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d10f      	bne.n	8006828 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2205      	movs	r2, #5
 8006812:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb1b 	bl	8006e68 <USBH_CtlReq>
 8006832:	4603      	mov	r3, r0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	789b      	ldrb	r3, [r3, #2]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d10e      	bne.n	800686e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2209      	movs	r2, #9
 800685a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	887a      	ldrh	r2, [r7, #2]
 8006860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800686e:	2200      	movs	r2, #0
 8006870:	2100      	movs	r1, #0
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 faf8 	bl	8006e68 <USBH_CtlReq>
 8006878:	4603      	mov	r3, r0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	789b      	ldrb	r3, [r3, #2]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d10f      	bne.n	80068b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2203      	movs	r2, #3
 80068a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068b6:	2200      	movs	r2, #0
 80068b8:	2100      	movs	r1, #0
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fad4 	bl	8006e68 <USBH_CtlReq>
 80068c0:	4603      	mov	r3, r0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	789b      	ldrb	r3, [r3, #2]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10f      	bne.n	80068fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80068fe:	2200      	movs	r2, #0
 8006900:	2100      	movs	r1, #0
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fab0 	bl	8006e68 <USBH_CtlReq>
 8006908:	4603      	mov	r3, r0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781a      	ldrb	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	785a      	ldrb	r2, [r3, #1]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3302      	adds	r3, #2
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3303      	adds	r3, #3
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	b29b      	uxth	r3, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	791a      	ldrb	r2, [r3, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	795a      	ldrb	r2, [r3, #5]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	799a      	ldrb	r2, [r3, #6]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	79da      	ldrb	r2, [r3, #7]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	79db      	ldrb	r3, [r3, #7]
 8006972:	2b20      	cmp	r3, #32
 8006974:	dc0f      	bgt.n	8006996 <USBH_ParseDevDesc+0x82>
 8006976:	2b08      	cmp	r3, #8
 8006978:	db14      	blt.n	80069a4 <USBH_ParseDevDesc+0x90>
 800697a:	3b08      	subs	r3, #8
 800697c:	4a2d      	ldr	r2, [pc, #180]	; (8006a34 <USBH_ParseDevDesc+0x120>)
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <USBH_ParseDevDesc+0x86>
 8006994:	e006      	b.n	80069a4 <USBH_ParseDevDesc+0x90>
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d104      	bne.n	80069a4 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	79da      	ldrb	r2, [r3, #7]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	71da      	strb	r2, [r3, #7]
      break;
 80069a2:	e003      	b.n	80069ac <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2240      	movs	r2, #64	; 0x40
 80069a8:	71da      	strb	r2, [r3, #7]
      break;
 80069aa:	bf00      	nop
  }

  if (length > 8U)
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d939      	bls.n	8006a26 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	3308      	adds	r3, #8
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3309      	adds	r3, #9
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	4313      	orrs	r3, r2
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	330a      	adds	r3, #10
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	330b      	adds	r3, #11
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	330c      	adds	r3, #12
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	330d      	adds	r3, #13
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4313      	orrs	r3, r2
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	7b9a      	ldrb	r2, [r3, #14]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	7bda      	ldrb	r2, [r3, #15]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	7c1a      	ldrb	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	7c5a      	ldrb	r2, [r3, #17]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	745a      	strb	r2, [r3, #17]
  }
}
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	01000101 	.word	0x01000101

08006a38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08c      	sub	sp, #48	; 0x30
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	785a      	ldrb	r2, [r3, #1]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	3303      	adds	r3, #3
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a94:	bf28      	it	cs
 8006a96:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	791a      	ldrb	r2, [r3, #4]
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	795a      	ldrb	r2, [r3, #5]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	799a      	ldrb	r2, [r3, #6]
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	79da      	ldrb	r2, [r3, #7]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	7a1a      	ldrb	r2, [r3, #8]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d002      	beq.n	8006ad6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	2209      	movs	r2, #9
 8006ad4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b09      	cmp	r3, #9
 8006ada:	f240 809d 	bls.w	8006c18 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006ade:	2309      	movs	r3, #9
 8006ae0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ae6:	e081      	b.n	8006bec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ae8:	f107 0316 	add.w	r3, r7, #22
 8006aec:	4619      	mov	r1, r3
 8006aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af0:	f000 f99f 	bl	8006e32 <USBH_GetNextDesc>
 8006af4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d176      	bne.n	8006bec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b09      	cmp	r3, #9
 8006b04:	d002      	beq.n	8006b0c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2209      	movs	r2, #9
 8006b0a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b10:	221a      	movs	r2, #26
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	3308      	adds	r3, #8
 8006b18:	6a3a      	ldr	r2, [r7, #32]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b22:	69f8      	ldr	r0, [r7, #28]
 8006b24:	f000 f87e 	bl	8006c24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b32:	e043      	b.n	8006bbc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b34:	f107 0316 	add.w	r3, r7, #22
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3c:	f000 f979 	bl	8006e32 <USBH_GetNextDesc>
 8006b40:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	d138      	bne.n	8006bbc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	795b      	ldrb	r3, [r3, #5]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d10f      	bne.n	8006b72 <USBH_ParseCfgDesc+0x13a>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	799b      	ldrb	r3, [r3, #6]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d10b      	bne.n	8006b72 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	79db      	ldrb	r3, [r3, #7]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10f      	bne.n	8006b82 <USBH_ParseCfgDesc+0x14a>
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b09      	cmp	r3, #9
 8006b68:	d00b      	beq.n	8006b82 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	2209      	movs	r2, #9
 8006b6e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b70:	e007      	b.n	8006b82 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b07      	cmp	r3, #7
 8006b78:	d004      	beq.n	8006b84 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	2207      	movs	r2, #7
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e000      	b.n	8006b84 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b82:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b8c:	3201      	adds	r2, #1
 8006b8e:	00d2      	lsls	r2, r2, #3
 8006b90:	211a      	movs	r1, #26
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	3308      	adds	r3, #8
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba4:	69b9      	ldr	r1, [r7, #24]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f86b 	bl	8006c82 <USBH_ParseEPDesc>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006bb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d204      	bcs.n	8006bd2 <USBH_ParseCfgDesc+0x19a>
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	885a      	ldrh	r2, [r3, #2]
 8006bcc:	8afb      	ldrh	r3, [r7, #22]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d8b0      	bhi.n	8006b34 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d201      	bcs.n	8006be2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e01c      	b.n	8006c1c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be6:	3301      	adds	r3, #1
 8006be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d805      	bhi.n	8006c00 <USBH_ParseCfgDesc+0x1c8>
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	885a      	ldrh	r2, [r3, #2]
 8006bf8:	8afb      	ldrh	r3, [r7, #22]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	f63f af74 	bhi.w	8006ae8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	791b      	ldrb	r3, [r3, #4]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	bf28      	it	cs
 8006c08:	2302      	movcs	r3, #2
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d201      	bcs.n	8006c18 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e001      	b.n	8006c1c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3730      	adds	r7, #48	; 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781a      	ldrb	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	785a      	ldrb	r2, [r3, #1]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	789a      	ldrb	r2, [r3, #2]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	78da      	ldrb	r2, [r3, #3]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	791a      	ldrb	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	795a      	ldrb	r2, [r3, #5]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	799a      	ldrb	r2, [r3, #6]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	79da      	ldrb	r2, [r3, #7]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	7a1a      	ldrb	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	721a      	strb	r2, [r3, #8]
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	785a      	ldrb	r2, [r3, #1]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	789a      	ldrb	r2, [r3, #2]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	78da      	ldrb	r2, [r3, #3]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3305      	adds	r3, #5
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	799a      	ldrb	r2, [r3, #6]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	889b      	ldrh	r3, [r3, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	75fb      	strb	r3, [r7, #23]
 8006ce2:	e033      	b.n	8006d4c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	889b      	ldrh	r3, [r3, #4]
 8006ce8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cec:	f023 0307 	bic.w	r3, r3, #7
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	889b      	ldrh	r3, [r3, #4]
 8006cfa:	b21a      	sxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b299      	uxth	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3305      	adds	r3, #5
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	430b      	orrs	r3, r1
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d110      	bne.n	8006d3e <USBH_ParseEPDesc+0xbc>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b299      	uxth	r1, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3305      	adds	r3, #5
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	430b      	orrs	r3, r1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	b21b      	sxth	r3, r3
 8006d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	e001      	b.n	8006d42 <USBH_ParseEPDesc+0xc0>
 8006d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d42:	4313      	orrs	r3, r2
 8006d44:	b21b      	sxth	r3, r3
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d116      	bne.n	8006d84 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d005      	beq.n	8006d6e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d127      	bne.n	8006dbe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	799b      	ldrb	r3, [r3, #6]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <USBH_ParseEPDesc+0xfc>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	799b      	ldrb	r3, [r3, #6]
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d91f      	bls.n	8006dbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	75fb      	strb	r3, [r7, #23]
 8006d82:	e01c      	b.n	8006dbe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	78db      	ldrb	r3, [r3, #3]
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10a      	bne.n	8006da6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	799b      	ldrb	r3, [r3, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <USBH_ParseEPDesc+0x11e>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	799b      	ldrb	r3, [r3, #6]
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d90e      	bls.n	8006dbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006da0:	2303      	movs	r3, #3
 8006da2:	75fb      	strb	r3, [r7, #23]
 8006da4:	e00b      	b.n	8006dbe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	78db      	ldrb	r3, [r3, #3]
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d105      	bne.n	8006dbe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	799b      	ldrb	r3, [r3, #6]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d120      	bne.n	8006e26 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	1e9a      	subs	r2, r3, #2
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	4293      	cmp	r3, r2
 8006dee:	bf28      	it	cs
 8006df0:	4613      	movcs	r3, r2
 8006df2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3302      	adds	r3, #2
 8006df8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	82fb      	strh	r3, [r7, #22]
 8006dfe:	e00b      	b.n	8006e18 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e00:	8afb      	ldrh	r3, [r7, #22]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	781a      	ldrb	r2, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e12:	8afb      	ldrh	r3, [r7, #22]
 8006e14:	3302      	adds	r3, #2
 8006e16:	82fb      	strh	r3, [r7, #22]
 8006e18:	8afa      	ldrh	r2, [r7, #22]
 8006e1a:	8abb      	ldrh	r3, [r7, #20]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d3ef      	bcc.n	8006e00 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
  }
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	881a      	ldrh	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4413      	add	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	789b      	ldrb	r3, [r3, #2]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d002      	beq.n	8006e88 <USBH_CtlReq+0x20>
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d00f      	beq.n	8006ea6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e86:	e027      	b.n	8006ed8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	88fa      	ldrh	r2, [r7, #6]
 8006e92:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea4:	e018      	b.n	8006ed8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f81c 	bl	8006ee4 <USBH_HandleControl>
 8006eac:	4603      	mov	r3, r0
 8006eae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <USBH_CtlReq+0x54>
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d106      	bne.n	8006eca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	761a      	strb	r2, [r3, #24]
      break;
 8006ec8:	e005      	b.n	8006ed6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d102      	bne.n	8006ed6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	709a      	strb	r2, [r3, #2]
      break;
 8006ed6:	bf00      	nop
  }
  return status;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7e1b      	ldrb	r3, [r3, #24]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	2b0a      	cmp	r3, #10
 8006efc:	f200 8156 	bhi.w	80071ac <USBH_HandleControl+0x2c8>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBH_HandleControl+0x24>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4f 	.word	0x08006f4f
 8006f10:	08006fb9 	.word	0x08006fb9
 8006f14:	08006fdf 	.word	0x08006fdf
 8006f18:	08007017 	.word	0x08007017
 8006f1c:	08007041 	.word	0x08007041
 8006f20:	08007093 	.word	0x08007093
 8006f24:	080070b5 	.word	0x080070b5
 8006f28:	080070f1 	.word	0x080070f1
 8006f2c:	08007117 	.word	0x08007117
 8006f30:	08007155 	.word	0x08007155
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f103 0110 	add.w	r1, r3, #16
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	795b      	ldrb	r3, [r3, #5]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f943 	bl	80071cc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	761a      	strb	r2, [r3, #24]
      break;
 8006f4c:	e139      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	795b      	ldrb	r3, [r3, #5]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fccd 	bl	80078f4 <USBH_LL_GetURBState>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d11e      	bne.n	8006fa2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7c1b      	ldrb	r3, [r3, #16]
 8006f68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8adb      	ldrh	r3, [r3, #22]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f76:	7b7b      	ldrb	r3, [r7, #13]
 8006f78:	2b80      	cmp	r3, #128	; 0x80
 8006f7a:	d103      	bne.n	8006f84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2203      	movs	r2, #3
 8006f80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f82:	e115      	b.n	80071b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2205      	movs	r2, #5
 8006f88:	761a      	strb	r2, [r3, #24]
      break;
 8006f8a:	e111      	b.n	80071b0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006f8c:	7b7b      	ldrb	r3, [r7, #13]
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d103      	bne.n	8006f9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2209      	movs	r2, #9
 8006f96:	761a      	strb	r2, [r3, #24]
      break;
 8006f98:	e10a      	b.n	80071b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	761a      	strb	r2, [r3, #24]
      break;
 8006fa0:	e106      	b.n	80071b0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d003      	beq.n	8006fb0 <USBH_HandleControl+0xcc>
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	f040 8100 	bne.w	80071b0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	220b      	movs	r2, #11
 8006fb4:	761a      	strb	r2, [r3, #24]
      break;
 8006fb6:	e0fb      	b.n	80071b0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6899      	ldr	r1, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	899a      	ldrh	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	791b      	ldrb	r3, [r3, #4]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f93a 	bl	800724a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	761a      	strb	r2, [r3, #24]
      break;
 8006fdc:	e0f1      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc85 	bl	80078f4 <USBH_LL_GetURBState>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d102      	bne.n	8006ffa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2209      	movs	r2, #9
 8006ff8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d102      	bne.n	8007006 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007000:	2303      	movs	r3, #3
 8007002:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007004:	e0d6      	b.n	80071b4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b04      	cmp	r3, #4
 800700a:	f040 80d3 	bne.w	80071b4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220b      	movs	r2, #11
 8007012:	761a      	strb	r2, [r3, #24]
      break;
 8007014:	e0ce      	b.n	80071b4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6899      	ldr	r1, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	899a      	ldrh	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	795b      	ldrb	r3, [r3, #5]
 8007022:	2001      	movs	r0, #1
 8007024:	9000      	str	r0, [sp, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8ea 	bl	8007200 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2206      	movs	r2, #6
 800703c:	761a      	strb	r2, [r3, #24]
      break;
 800703e:	e0c0      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	795b      	ldrb	r3, [r3, #5]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fc54 	bl	80078f4 <USBH_LL_GetURBState>
 800704c:	4603      	mov	r3, r0
 800704e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d103      	bne.n	800705e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2207      	movs	r2, #7
 800705a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800705c:	e0ac      	b.n	80071b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b05      	cmp	r3, #5
 8007062:	d105      	bne.n	8007070 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220c      	movs	r2, #12
 8007068:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800706a:	2303      	movs	r3, #3
 800706c:	73fb      	strb	r3, [r7, #15]
      break;
 800706e:	e0a3      	b.n	80071b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d103      	bne.n	800707e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2205      	movs	r2, #5
 800707a:	761a      	strb	r2, [r3, #24]
      break;
 800707c:	e09c      	b.n	80071b8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b04      	cmp	r3, #4
 8007082:	f040 8099 	bne.w	80071b8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	220b      	movs	r2, #11
 800708a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	e092      	b.n	80071b8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	791b      	ldrb	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	2100      	movs	r1, #0
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f8d5 	bl	800724a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2208      	movs	r2, #8
 80070b0:	761a      	strb	r2, [r3, #24]

      break;
 80070b2:	e086      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc1a 	bl	80078f4 <USBH_LL_GetURBState>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d105      	bne.n	80070d6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	220d      	movs	r2, #13
 80070ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070d4:	e072      	b.n	80071bc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d103      	bne.n	80070e4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	220b      	movs	r2, #11
 80070e0:	761a      	strb	r2, [r3, #24]
      break;
 80070e2:	e06b      	b.n	80071bc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d168      	bne.n	80071bc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
      break;
 80070ee:	e065      	b.n	80071bc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	795b      	ldrb	r3, [r3, #5]
 80070f4:	2201      	movs	r2, #1
 80070f6:	9200      	str	r2, [sp, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f87f 	bl	8007200 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	220a      	movs	r2, #10
 8007112:	761a      	strb	r2, [r3, #24]
      break;
 8007114:	e055      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	795b      	ldrb	r3, [r3, #5]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fbe9 	bl	80078f4 <USBH_LL_GetURBState>
 8007122:	4603      	mov	r3, r0
 8007124:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d105      	bne.n	8007138 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	220d      	movs	r2, #13
 8007134:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007136:	e043      	b.n	80071c0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d103      	bne.n	8007146 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2209      	movs	r2, #9
 8007142:	761a      	strb	r2, [r3, #24]
      break;
 8007144:	e03c      	b.n	80071c0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	2b04      	cmp	r3, #4
 800714a:	d139      	bne.n	80071c0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	220b      	movs	r2, #11
 8007150:	761a      	strb	r2, [r3, #24]
      break;
 8007152:	e035      	b.n	80071c0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7e5b      	ldrb	r3, [r3, #25]
 8007158:	3301      	adds	r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	765a      	strb	r2, [r3, #25]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7e5b      	ldrb	r3, [r3, #25]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d806      	bhi.n	8007176 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007174:	e025      	b.n	80071c2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800717c:	2106      	movs	r1, #6
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	795b      	ldrb	r3, [r3, #5]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f90c 	bl	80073ac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f906 	bl	80073ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80071a6:	2302      	movs	r3, #2
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	e00a      	b.n	80071c2 <USBH_HandleControl+0x2de>

    default:
      break;
 80071ac:	bf00      	nop
 80071ae:	e008      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b0:	bf00      	nop
 80071b2:	e006      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b4:	bf00      	nop
 80071b6:	e004      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071c0:	bf00      	nop
  }

  return status;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80071da:	79f9      	ldrb	r1, [r7, #7]
 80071dc:	2300      	movs	r3, #0
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	2308      	movs	r3, #8
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	2300      	movs	r3, #0
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2300      	movs	r3, #0
 80071ee:	2200      	movs	r2, #0
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fb4e 	bl	8007892 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af04      	add	r7, sp, #16
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4611      	mov	r1, r2
 800720c:	461a      	mov	r2, r3
 800720e:	460b      	mov	r3, r1
 8007210:	80fb      	strh	r3, [r7, #6]
 8007212:	4613      	mov	r3, r2
 8007214:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007224:	7979      	ldrb	r1, [r7, #5]
 8007226:	7e3b      	ldrb	r3, [r7, #24]
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	2301      	movs	r3, #1
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2300      	movs	r3, #0
 8007238:	2200      	movs	r2, #0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb29 	bl	8007892 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af04      	add	r7, sp, #16
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	4611      	mov	r1, r2
 8007256:	461a      	mov	r2, r3
 8007258:	460b      	mov	r3, r1
 800725a:	80fb      	strh	r3, [r7, #6]
 800725c:	4613      	mov	r3, r2
 800725e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007260:	7979      	ldrb	r1, [r7, #5]
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2301      	movs	r3, #1
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	2201      	movs	r2, #1
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fb0b 	bl	8007892 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800727c:	2300      	movs	r3, #0

}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b088      	sub	sp, #32
 800728a:	af04      	add	r7, sp, #16
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	4611      	mov	r1, r2
 8007292:	461a      	mov	r2, r3
 8007294:	460b      	mov	r3, r1
 8007296:	80fb      	strh	r3, [r7, #6]
 8007298:	4613      	mov	r3, r2
 800729a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072aa:	7979      	ldrb	r1, [r7, #5]
 80072ac:	7e3b      	ldrb	r3, [r7, #24]
 80072ae:	9303      	str	r3, [sp, #12]
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	9302      	str	r3, [sp, #8]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	2301      	movs	r3, #1
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2302      	movs	r3, #2
 80072be:	2200      	movs	r2, #0
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fae6 	bl	8007892 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	460b      	mov	r3, r1
 80072e0:	80fb      	strh	r3, [r7, #6]
 80072e2:	4613      	mov	r3, r2
 80072e4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072e6:	7979      	ldrb	r1, [r7, #5]
 80072e8:	2300      	movs	r3, #0
 80072ea:	9303      	str	r3, [sp, #12]
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	9302      	str	r3, [sp, #8]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	2301      	movs	r3, #1
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2302      	movs	r3, #2
 80072fa:	2201      	movs	r2, #1
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fac8 	bl	8007892 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af04      	add	r7, sp, #16
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4603      	mov	r3, r0
 800731c:	70fb      	strb	r3, [r7, #3]
 800731e:	460b      	mov	r3, r1
 8007320:	70bb      	strb	r3, [r7, #2]
 8007322:	4613      	mov	r3, r2
 8007324:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007326:	7878      	ldrb	r0, [r7, #1]
 8007328:	78ba      	ldrb	r2, [r7, #2]
 800732a:	78f9      	ldrb	r1, [r7, #3]
 800732c:	8b3b      	ldrh	r3, [r7, #24]
 800732e:	9302      	str	r3, [sp, #8]
 8007330:	7d3b      	ldrb	r3, [r7, #20]
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	7c3b      	ldrb	r3, [r7, #16]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	4603      	mov	r3, r0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa5b 	bl	80077f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa7a 	bl	8007854 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f836 	bl	80073e8 <USBH_GetFreePipe>
 800737c:	4603      	mov	r3, r0
 800737e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007386:	4293      	cmp	r3, r2
 8007388:	d00a      	beq.n	80073a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	89fb      	ldrh	r3, [r7, #14]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	33e0      	adds	r3, #224	; 0xe0
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	b2db      	uxtb	r3, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	2b0f      	cmp	r3, #15
 80073bc:	d80d      	bhi.n	80073da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	33e0      	adds	r3, #224	; 0xe0
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	33e0      	adds	r3, #224	; 0xe0
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	440b      	add	r3, r1
 80073d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
 80073f8:	e00f      	b.n	800741a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	33e0      	adds	r3, #224	; 0xe0
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	b29b      	uxth	r3, r3
 8007412:	e007      	b.n	8007424 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	3301      	adds	r3, #1
 8007418:	73fb      	strb	r3, [r7, #15]
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b0f      	cmp	r3, #15
 800741e:	d9ec      	bls.n	80073fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007420:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007434:	2201      	movs	r2, #1
 8007436:	490e      	ldr	r1, [pc, #56]	; (8007470 <MX_USB_HOST_Init+0x40>)
 8007438:	480e      	ldr	r0, [pc, #56]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800743a:	f7fe fba5 	bl	8005b88 <USBH_Init>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007444:	f7f9 f9ec 	bl	8000820 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007448:	490b      	ldr	r1, [pc, #44]	; (8007478 <MX_USB_HOST_Init+0x48>)
 800744a:	480a      	ldr	r0, [pc, #40]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800744c:	f7fe fc2a 	bl	8005ca4 <USBH_RegisterClass>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007456:	f7f9 f9e3 	bl	8000820 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800745a:	4806      	ldr	r0, [pc, #24]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800745c:	f7fe fcae 	bl	8005dbc <USBH_Start>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007466:	f7f9 f9db 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800746a:	bf00      	nop
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	08007491 	.word	0x08007491
 8007474:	20000190 	.word	0x20000190
 8007478:	2000000c 	.word	0x2000000c

0800747c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007480:	4802      	ldr	r0, [pc, #8]	; (800748c <MX_USB_HOST_Process+0x10>)
 8007482:	f7fe fcab 	bl	8005ddc <USBH_Process>
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000190 	.word	0x20000190

08007490 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d819      	bhi.n	80074d8 <USBH_UserProcess+0x48>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBH_UserProcess+0x1c>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074d1 	.word	0x080074d1
 80074bc:	080074c1 	.word	0x080074c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80074c0:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <USBH_UserProcess+0x58>)
 80074c2:	2203      	movs	r2, #3
 80074c4:	701a      	strb	r2, [r3, #0]
  break;
 80074c6:	e008      	b.n	80074da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <USBH_UserProcess+0x58>)
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
  break;
 80074ce:	e004      	b.n	80074da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <USBH_UserProcess+0x58>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
  break;
 80074d6:	e000      	b.n	80074da <USBH_UserProcess+0x4a>

  default:
  break;
 80074d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20000568 	.word	0x20000568

080074ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b0a0      	sub	sp, #128	; 0x80
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	609a      	str	r2, [r3, #8]
 8007500:	60da      	str	r2, [r3, #12]
 8007502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007504:	f107 0310 	add.w	r3, r7, #16
 8007508:	225c      	movs	r2, #92	; 0x5c
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fb35 	bl	8007b7c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800751a:	d149      	bne.n	80075b0 <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800751c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007520:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007522:	2300      	movs	r3, #0
 8007524:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007526:	f107 0310 	add.w	r3, r7, #16
 800752a:	4618      	mov	r0, r3
 800752c:	f7fb fcfa 	bl	8002f24 <HAL_RCCEx_PeriphCLKConfig>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 8007536:	f7f9 f973 	bl	8000820 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	4b1e      	ldr	r3, [pc, #120]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	6313      	str	r3, [r2, #48]	; 0x30
 800754a:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007556:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800755a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755c:	2302      	movs	r3, #2
 800755e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007560:	2300      	movs	r3, #0
 8007562:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007564:	2303      	movs	r3, #3
 8007566:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007568:	230a      	movs	r3, #10
 800756a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800756c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007570:	4619      	mov	r1, r3
 8007572:	4812      	ldr	r0, [pc, #72]	; (80075bc <HAL_HCD_MspInit+0xd0>)
 8007574:	f7f9 fcc0 	bl	8000ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 800757a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757c:	4a0e      	ldr	r2, [pc, #56]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 800757e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007582:	6353      	str	r3, [r2, #52]	; 0x34
 8007584:	2300      	movs	r3, #0
 8007586:	60bb      	str	r3, [r7, #8]
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 800758a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758c:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 800758e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007592:	6453      	str	r3, [r2, #68]	; 0x44
 8007594:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <HAL_HCD_MspInit+0xcc>)
 8007596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075a0:	2200      	movs	r2, #0
 80075a2:	2100      	movs	r1, #0
 80075a4:	2043      	movs	r0, #67	; 0x43
 80075a6:	f7f9 fc70 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075aa:	2043      	movs	r0, #67	; 0x43
 80075ac:	f7f9 fc89 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075b0:	bf00      	nop
 80075b2:	3780      	adds	r7, #128	; 0x80
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40023800 	.word	0x40023800
 80075bc:	40020000 	.word	0x40020000

080075c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe ffe3 	bl	800659a <USBH_LL_IncTimer>
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff f81b 	bl	8006626 <USBH_LL_Connect>
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff f824 	bl	8006654 <USBH_LL_Disconnect>
}
 800760c:	bf00      	nop
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
 8007620:	4613      	mov	r3, r2
 8007622:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe ffd5 	bl	80065ee <USBH_LL_PortEnabled>
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe ffd5 	bl	800660a <USBH_LL_PortDisabled>
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007676:	2b01      	cmp	r3, #1
 8007678:	d12a      	bne.n	80076d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800767a:	4a18      	ldr	r2, [pc, #96]	; (80076dc <USBH_LL_Init+0x74>)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a15      	ldr	r2, [pc, #84]	; (80076dc <USBH_LL_Init+0x74>)
 8007686:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800768a:	4b14      	ldr	r3, [pc, #80]	; (80076dc <USBH_LL_Init+0x74>)
 800768c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007690:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8007692:	4b12      	ldr	r3, [pc, #72]	; (80076dc <USBH_LL_Init+0x74>)
 8007694:	220c      	movs	r2, #12
 8007696:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007698:	4b10      	ldr	r3, [pc, #64]	; (80076dc <USBH_LL_Init+0x74>)
 800769a:	2201      	movs	r2, #1
 800769c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <USBH_LL_Init+0x74>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80076a4:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <USBH_LL_Init+0x74>)
 80076a6:	2202      	movs	r2, #2
 80076a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <USBH_LL_Init+0x74>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80076b0:	480a      	ldr	r0, [pc, #40]	; (80076dc <USBH_LL_Init+0x74>)
 80076b2:	f7f9 fdce 	bl	8001252 <HAL_HCD_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80076bc:	f7f9 f8b0 	bl	8000820 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80076c0:	4806      	ldr	r0, [pc, #24]	; (80076dc <USBH_LL_Init+0x74>)
 80076c2:	f7fa f9b2 	bl	8001a2a <HAL_HCD_GetCurrentFrame>
 80076c6:	4603      	mov	r3, r0
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fe ff56 	bl	800657c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	2000056c 	.word	0x2000056c

080076e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fa f921 	bl	800193e <HAL_HCD_Start>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f952 	bl	80079ac <USBH_Get_USB_Status>
 8007708:	4603      	mov	r3, r0
 800770a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800770c:	7bbb      	ldrb	r3, [r7, #14]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800772c:	4618      	mov	r0, r3
 800772e:	f7fa f929 	bl	8001984 <HAL_HCD_Stop>
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	4618      	mov	r0, r3
 800773a:	f000 f937 	bl	80079ac <USBH_Get_USB_Status>
 800773e:	4603      	mov	r3, r0
 8007740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007742:	7bbb      	ldrb	r3, [r7, #14]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800775e:	4618      	mov	r0, r3
 8007760:	f7fa f971 	bl	8001a46 <HAL_HCD_GetCurrentSpeed>
 8007764:	4603      	mov	r3, r0
 8007766:	2b02      	cmp	r3, #2
 8007768:	d00c      	beq.n	8007784 <USBH_LL_GetSpeed+0x38>
 800776a:	2b02      	cmp	r3, #2
 800776c:	d80d      	bhi.n	800778a <USBH_LL_GetSpeed+0x3e>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <USBH_LL_GetSpeed+0x2c>
 8007772:	2b01      	cmp	r3, #1
 8007774:	d003      	beq.n	800777e <USBH_LL_GetSpeed+0x32>
 8007776:	e008      	b.n	800778a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]
    break;
 800777c:	e008      	b.n	8007790 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
    break;
 8007782:	e005      	b.n	8007790 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007784:	2302      	movs	r3, #2
 8007786:	73fb      	strb	r3, [r7, #15]
    break;
 8007788:	e002      	b.n	8007790 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
    break;
 800778e:	bf00      	nop
  }
  return  speed;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fa f904 	bl	80019be <HAL_HCD_ResetPort>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f8f5 	bl	80079ac <USBH_Get_USB_Status>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fa f90b 	bl	8001a02 <HAL_HCD_HC_GetXferCount>
 80077ec:	4603      	mov	r3, r0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077f6:	b590      	push	{r4, r7, lr}
 80077f8:	b089      	sub	sp, #36	; 0x24
 80077fa:	af04      	add	r7, sp, #16
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	4608      	mov	r0, r1
 8007800:	4611      	mov	r1, r2
 8007802:	461a      	mov	r2, r3
 8007804:	4603      	mov	r3, r0
 8007806:	70fb      	strb	r3, [r7, #3]
 8007808:	460b      	mov	r3, r1
 800780a:	70bb      	strb	r3, [r7, #2]
 800780c:	4613      	mov	r3, r2
 800780e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800781e:	787c      	ldrb	r4, [r7, #1]
 8007820:	78ba      	ldrb	r2, [r7, #2]
 8007822:	78f9      	ldrb	r1, [r7, #3]
 8007824:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007826:	9302      	str	r3, [sp, #8]
 8007828:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4623      	mov	r3, r4
 8007836:	f7f9 fd6e 	bl	8001316 <HAL_HCD_HC_Init>
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	4618      	mov	r0, r3
 8007842:	f000 f8b3 	bl	80079ac <USBH_Get_USB_Status>
 8007846:	4603      	mov	r3, r0
 8007848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800784a:	7bbb      	ldrb	r3, [r7, #14]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	bd90      	pop	{r4, r7, pc}

08007854 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	4611      	mov	r1, r2
 8007872:	4618      	mov	r0, r3
 8007874:	f7f9 fdde 	bl	8001434 <HAL_HCD_HC_Halt>
 8007878:	4603      	mov	r3, r0
 800787a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f894 	bl	80079ac <USBH_Get_USB_Status>
 8007884:	4603      	mov	r3, r0
 8007886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007888:	7bbb      	ldrb	r3, [r7, #14]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007892:	b590      	push	{r4, r7, lr}
 8007894:	b089      	sub	sp, #36	; 0x24
 8007896:	af04      	add	r7, sp, #16
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	461a      	mov	r2, r3
 80078a0:	4603      	mov	r3, r0
 80078a2:	70fb      	strb	r3, [r7, #3]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70bb      	strb	r3, [r7, #2]
 80078a8:	4613      	mov	r3, r2
 80078aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078ba:	787c      	ldrb	r4, [r7, #1]
 80078bc:	78ba      	ldrb	r2, [r7, #2]
 80078be:	78f9      	ldrb	r1, [r7, #3]
 80078c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078c4:	9303      	str	r3, [sp, #12]
 80078c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078c8:	9302      	str	r3, [sp, #8]
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	4623      	mov	r3, r4
 80078d6:	f7f9 fdd1 	bl	800147c <HAL_HCD_HC_SubmitRequest>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 f863 	bl	80079ac <USBH_Get_USB_Status>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd90      	pop	{r4, r7, pc}

080078f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7fa f865 	bl	80019da <HAL_HCD_HC_GetURBState>
 8007910:	4603      	mov	r3, r0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8007926:	20c8      	movs	r0, #200	; 0xc8
 8007928:	f7f9 f9b0 	bl	8000c8c <HAL_Delay>
  return USBH_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
 8007942:	4613      	mov	r3, r2
 8007944:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800794c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800794e:	78fb      	ldrb	r3, [r7, #3]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	212c      	movs	r1, #44	; 0x2c
 8007954:	fb01 f303 	mul.w	r3, r1, r3
 8007958:	4413      	add	r3, r2
 800795a:	333b      	adds	r3, #59	; 0x3b
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	212c      	movs	r1, #44	; 0x2c
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	4413      	add	r3, r2
 800796e:	3354      	adds	r3, #84	; 0x54
 8007970:	78ba      	ldrb	r2, [r7, #2]
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e008      	b.n	8007988 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	212c      	movs	r1, #44	; 0x2c
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	4413      	add	r3, r2
 8007982:	3355      	adds	r3, #85	; 0x55
 8007984:	78ba      	ldrb	r2, [r7, #2]
 8007986:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7f9 f974 	bl	8000c8c <HAL_Delay>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d817      	bhi.n	80079f0 <USBH_Get_USB_Status+0x44>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <USBH_Get_USB_Status+0x1c>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	080079df 	.word	0x080079df
 80079d0:	080079e5 	.word	0x080079e5
 80079d4:	080079eb 	.word	0x080079eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]
    break;
 80079dc:	e00b      	b.n	80079f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80079de:	2302      	movs	r3, #2
 80079e0:	73fb      	strb	r3, [r7, #15]
    break;
 80079e2:	e008      	b.n	80079f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73fb      	strb	r3, [r7, #15]
    break;
 80079e8:	e005      	b.n	80079f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80079ea:	2302      	movs	r3, #2
 80079ec:	73fb      	strb	r3, [r7, #15]
    break;
 80079ee:	e002      	b.n	80079f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80079f0:	2302      	movs	r3, #2
 80079f2:	73fb      	strb	r3, [r7, #15]
    break;
 80079f4:	bf00      	nop
  }
  return usb_status;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <malloc>:
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <malloc+0xc>)
 8007a06:	4601      	mov	r1, r0
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	f000 b82b 	b.w	8007a64 <_malloc_r>
 8007a0e:	bf00      	nop
 8007a10:	20000078 	.word	0x20000078

08007a14 <free>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <free+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f000 b8f3 	b.w	8007c04 <_free_r>
 8007a1e:	bf00      	nop
 8007a20:	20000078 	.word	0x20000078

08007a24 <sbrk_aligned>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4e0e      	ldr	r6, [pc, #56]	; (8007a60 <sbrk_aligned+0x3c>)
 8007a28:	460c      	mov	r4, r1
 8007a2a:	6831      	ldr	r1, [r6, #0]
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	b911      	cbnz	r1, 8007a36 <sbrk_aligned+0x12>
 8007a30:	f000 f8ac 	bl	8007b8c <_sbrk_r>
 8007a34:	6030      	str	r0, [r6, #0]
 8007a36:	4621      	mov	r1, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 f8a7 	bl	8007b8c <_sbrk_r>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	d00a      	beq.n	8007a58 <sbrk_aligned+0x34>
 8007a42:	1cc4      	adds	r4, r0, #3
 8007a44:	f024 0403 	bic.w	r4, r4, #3
 8007a48:	42a0      	cmp	r0, r4
 8007a4a:	d007      	beq.n	8007a5c <sbrk_aligned+0x38>
 8007a4c:	1a21      	subs	r1, r4, r0
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 f89c 	bl	8007b8c <_sbrk_r>
 8007a54:	3001      	adds	r0, #1
 8007a56:	d101      	bne.n	8007a5c <sbrk_aligned+0x38>
 8007a58:	f04f 34ff 	mov.w	r4, #4294967295
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	20000874 	.word	0x20000874

08007a64 <_malloc_r>:
 8007a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a68:	1ccd      	adds	r5, r1, #3
 8007a6a:	f025 0503 	bic.w	r5, r5, #3
 8007a6e:	3508      	adds	r5, #8
 8007a70:	2d0c      	cmp	r5, #12
 8007a72:	bf38      	it	cc
 8007a74:	250c      	movcc	r5, #12
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	4607      	mov	r7, r0
 8007a7a:	db01      	blt.n	8007a80 <_malloc_r+0x1c>
 8007a7c:	42a9      	cmp	r1, r5
 8007a7e:	d905      	bls.n	8007a8c <_malloc_r+0x28>
 8007a80:	230c      	movs	r3, #12
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	2600      	movs	r6, #0
 8007a86:	4630      	mov	r0, r6
 8007a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b60 <_malloc_r+0xfc>
 8007a90:	f000 f868 	bl	8007b64 <__malloc_lock>
 8007a94:	f8d8 3000 	ldr.w	r3, [r8]
 8007a98:	461c      	mov	r4, r3
 8007a9a:	bb5c      	cbnz	r4, 8007af4 <_malloc_r+0x90>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f7ff ffc0 	bl	8007a24 <sbrk_aligned>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	d155      	bne.n	8007b56 <_malloc_r+0xf2>
 8007aaa:	f8d8 4000 	ldr.w	r4, [r8]
 8007aae:	4626      	mov	r6, r4
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	d145      	bne.n	8007b40 <_malloc_r+0xdc>
 8007ab4:	2c00      	cmp	r4, #0
 8007ab6:	d048      	beq.n	8007b4a <_malloc_r+0xe6>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	4631      	mov	r1, r6
 8007abc:	4638      	mov	r0, r7
 8007abe:	eb04 0903 	add.w	r9, r4, r3
 8007ac2:	f000 f863 	bl	8007b8c <_sbrk_r>
 8007ac6:	4581      	cmp	r9, r0
 8007ac8:	d13f      	bne.n	8007b4a <_malloc_r+0xe6>
 8007aca:	6821      	ldr	r1, [r4, #0]
 8007acc:	1a6d      	subs	r5, r5, r1
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	f7ff ffa7 	bl	8007a24 <sbrk_aligned>
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d037      	beq.n	8007b4a <_malloc_r+0xe6>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	442b      	add	r3, r5
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d038      	beq.n	8007b5a <_malloc_r+0xf6>
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	42a2      	cmp	r2, r4
 8007aec:	d12b      	bne.n	8007b46 <_malloc_r+0xe2>
 8007aee:	2200      	movs	r2, #0
 8007af0:	605a      	str	r2, [r3, #4]
 8007af2:	e00f      	b.n	8007b14 <_malloc_r+0xb0>
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	1b52      	subs	r2, r2, r5
 8007af8:	d41f      	bmi.n	8007b3a <_malloc_r+0xd6>
 8007afa:	2a0b      	cmp	r2, #11
 8007afc:	d917      	bls.n	8007b2e <_malloc_r+0xca>
 8007afe:	1961      	adds	r1, r4, r5
 8007b00:	42a3      	cmp	r3, r4
 8007b02:	6025      	str	r5, [r4, #0]
 8007b04:	bf18      	it	ne
 8007b06:	6059      	strne	r1, [r3, #4]
 8007b08:	6863      	ldr	r3, [r4, #4]
 8007b0a:	bf08      	it	eq
 8007b0c:	f8c8 1000 	streq.w	r1, [r8]
 8007b10:	5162      	str	r2, [r4, r5]
 8007b12:	604b      	str	r3, [r1, #4]
 8007b14:	4638      	mov	r0, r7
 8007b16:	f104 060b 	add.w	r6, r4, #11
 8007b1a:	f000 f829 	bl	8007b70 <__malloc_unlock>
 8007b1e:	f026 0607 	bic.w	r6, r6, #7
 8007b22:	1d23      	adds	r3, r4, #4
 8007b24:	1af2      	subs	r2, r6, r3
 8007b26:	d0ae      	beq.n	8007a86 <_malloc_r+0x22>
 8007b28:	1b9b      	subs	r3, r3, r6
 8007b2a:	50a3      	str	r3, [r4, r2]
 8007b2c:	e7ab      	b.n	8007a86 <_malloc_r+0x22>
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	6862      	ldr	r2, [r4, #4]
 8007b32:	d1dd      	bne.n	8007af0 <_malloc_r+0x8c>
 8007b34:	f8c8 2000 	str.w	r2, [r8]
 8007b38:	e7ec      	b.n	8007b14 <_malloc_r+0xb0>
 8007b3a:	4623      	mov	r3, r4
 8007b3c:	6864      	ldr	r4, [r4, #4]
 8007b3e:	e7ac      	b.n	8007a9a <_malloc_r+0x36>
 8007b40:	4634      	mov	r4, r6
 8007b42:	6876      	ldr	r6, [r6, #4]
 8007b44:	e7b4      	b.n	8007ab0 <_malloc_r+0x4c>
 8007b46:	4613      	mov	r3, r2
 8007b48:	e7cc      	b.n	8007ae4 <_malloc_r+0x80>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	603b      	str	r3, [r7, #0]
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f000 f80e 	bl	8007b70 <__malloc_unlock>
 8007b54:	e797      	b.n	8007a86 <_malloc_r+0x22>
 8007b56:	6025      	str	r5, [r4, #0]
 8007b58:	e7dc      	b.n	8007b14 <_malloc_r+0xb0>
 8007b5a:	605b      	str	r3, [r3, #4]
 8007b5c:	deff      	udf	#255	; 0xff
 8007b5e:	bf00      	nop
 8007b60:	20000870 	.word	0x20000870

08007b64 <__malloc_lock>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__malloc_lock+0x8>)
 8007b66:	f000 b84b 	b.w	8007c00 <__retarget_lock_acquire_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	200009b4 	.word	0x200009b4

08007b70 <__malloc_unlock>:
 8007b70:	4801      	ldr	r0, [pc, #4]	; (8007b78 <__malloc_unlock+0x8>)
 8007b72:	f000 b846 	b.w	8007c02 <__retarget_lock_release_recursive>
 8007b76:	bf00      	nop
 8007b78:	200009b4 	.word	0x200009b4

08007b7c <memset>:
 8007b7c:	4402      	add	r2, r0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d100      	bne.n	8007b86 <memset+0xa>
 8007b84:	4770      	bx	lr
 8007b86:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8a:	e7f9      	b.n	8007b80 <memset+0x4>

08007b8c <_sbrk_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	; (8007ba8 <_sbrk_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7f8 ff22 	bl	80009e0 <_sbrk>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_sbrk_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_sbrk_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	200009b0 	.word	0x200009b0

08007bac <__errno>:
 8007bac:	4b01      	ldr	r3, [pc, #4]	; (8007bb4 <__errno+0x8>)
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000078 	.word	0x20000078

08007bb8 <__libc_init_array>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	4d0d      	ldr	r5, [pc, #52]	; (8007bf0 <__libc_init_array+0x38>)
 8007bbc:	4c0d      	ldr	r4, [pc, #52]	; (8007bf4 <__libc_init_array+0x3c>)
 8007bbe:	1b64      	subs	r4, r4, r5
 8007bc0:	10a4      	asrs	r4, r4, #2
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	42a6      	cmp	r6, r4
 8007bc6:	d109      	bne.n	8007bdc <__libc_init_array+0x24>
 8007bc8:	4d0b      	ldr	r5, [pc, #44]	; (8007bf8 <__libc_init_array+0x40>)
 8007bca:	4c0c      	ldr	r4, [pc, #48]	; (8007bfc <__libc_init_array+0x44>)
 8007bcc:	f000 f866 	bl	8007c9c <_init>
 8007bd0:	1b64      	subs	r4, r4, r5
 8007bd2:	10a4      	asrs	r4, r4, #2
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	42a6      	cmp	r6, r4
 8007bd8:	d105      	bne.n	8007be6 <__libc_init_array+0x2e>
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be0:	4798      	blx	r3
 8007be2:	3601      	adds	r6, #1
 8007be4:	e7ee      	b.n	8007bc4 <__libc_init_array+0xc>
 8007be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bea:	4798      	blx	r3
 8007bec:	3601      	adds	r6, #1
 8007bee:	e7f2      	b.n	8007bd6 <__libc_init_array+0x1e>
 8007bf0:	08007cd8 	.word	0x08007cd8
 8007bf4:	08007cd8 	.word	0x08007cd8
 8007bf8:	08007cd8 	.word	0x08007cd8
 8007bfc:	08007cdc 	.word	0x08007cdc

08007c00 <__retarget_lock_acquire_recursive>:
 8007c00:	4770      	bx	lr

08007c02 <__retarget_lock_release_recursive>:
 8007c02:	4770      	bx	lr

08007c04 <_free_r>:
 8007c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c06:	2900      	cmp	r1, #0
 8007c08:	d044      	beq.n	8007c94 <_free_r+0x90>
 8007c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c0e:	9001      	str	r0, [sp, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f1a1 0404 	sub.w	r4, r1, #4
 8007c16:	bfb8      	it	lt
 8007c18:	18e4      	addlt	r4, r4, r3
 8007c1a:	f7ff ffa3 	bl	8007b64 <__malloc_lock>
 8007c1e:	4a1e      	ldr	r2, [pc, #120]	; (8007c98 <_free_r+0x94>)
 8007c20:	9801      	ldr	r0, [sp, #4]
 8007c22:	6813      	ldr	r3, [r2, #0]
 8007c24:	b933      	cbnz	r3, 8007c34 <_free_r+0x30>
 8007c26:	6063      	str	r3, [r4, #4]
 8007c28:	6014      	str	r4, [r2, #0]
 8007c2a:	b003      	add	sp, #12
 8007c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c30:	f7ff bf9e 	b.w	8007b70 <__malloc_unlock>
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	d908      	bls.n	8007c4a <_free_r+0x46>
 8007c38:	6825      	ldr	r5, [r4, #0]
 8007c3a:	1961      	adds	r1, r4, r5
 8007c3c:	428b      	cmp	r3, r1
 8007c3e:	bf01      	itttt	eq
 8007c40:	6819      	ldreq	r1, [r3, #0]
 8007c42:	685b      	ldreq	r3, [r3, #4]
 8007c44:	1949      	addeq	r1, r1, r5
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	e7ed      	b.n	8007c26 <_free_r+0x22>
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	b10b      	cbz	r3, 8007c54 <_free_r+0x50>
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d9fa      	bls.n	8007c4a <_free_r+0x46>
 8007c54:	6811      	ldr	r1, [r2, #0]
 8007c56:	1855      	adds	r5, r2, r1
 8007c58:	42a5      	cmp	r5, r4
 8007c5a:	d10b      	bne.n	8007c74 <_free_r+0x70>
 8007c5c:	6824      	ldr	r4, [r4, #0]
 8007c5e:	4421      	add	r1, r4
 8007c60:	1854      	adds	r4, r2, r1
 8007c62:	42a3      	cmp	r3, r4
 8007c64:	6011      	str	r1, [r2, #0]
 8007c66:	d1e0      	bne.n	8007c2a <_free_r+0x26>
 8007c68:	681c      	ldr	r4, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	6053      	str	r3, [r2, #4]
 8007c6e:	440c      	add	r4, r1
 8007c70:	6014      	str	r4, [r2, #0]
 8007c72:	e7da      	b.n	8007c2a <_free_r+0x26>
 8007c74:	d902      	bls.n	8007c7c <_free_r+0x78>
 8007c76:	230c      	movs	r3, #12
 8007c78:	6003      	str	r3, [r0, #0]
 8007c7a:	e7d6      	b.n	8007c2a <_free_r+0x26>
 8007c7c:	6825      	ldr	r5, [r4, #0]
 8007c7e:	1961      	adds	r1, r4, r5
 8007c80:	428b      	cmp	r3, r1
 8007c82:	bf04      	itt	eq
 8007c84:	6819      	ldreq	r1, [r3, #0]
 8007c86:	685b      	ldreq	r3, [r3, #4]
 8007c88:	6063      	str	r3, [r4, #4]
 8007c8a:	bf04      	itt	eq
 8007c8c:	1949      	addeq	r1, r1, r5
 8007c8e:	6021      	streq	r1, [r4, #0]
 8007c90:	6054      	str	r4, [r2, #4]
 8007c92:	e7ca      	b.n	8007c2a <_free_r+0x26>
 8007c94:	b003      	add	sp, #12
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	20000870 	.word	0x20000870

08007c9c <_init>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_fini>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr
